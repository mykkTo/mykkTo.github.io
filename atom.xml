<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jack</title>
  
  <subtitle>jackの博客</subtitle>
  <link href="https://mykkto.github.io/atom.xml" rel="self"/>
  
  <link href="https://mykkto.github.io/"/>
  <updated>2023-03-12T16:35:48.112Z</updated>
  <id>https://mykkto.github.io/</id>
  
  <author>
    <name>jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题-03(关于Cloud)</title>
    <link href="https://mykkto.github.io/posts/45f5cab5.html"/>
    <id>https://mykkto.github.io/posts/45f5cab5.html</id>
    <published>2023-02-15T14:28:51.000Z</published>
    <updated>2023-03-12T16:35:48.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>鸣谢给站长投稿问题的同行朋友，居多都是小伙伴面试被问到的问题，以及扩展</p><p>本章针对 中高开岗位题目甄选，如有不足还请评论区指教，感谢！</p><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li><p>你有过SpringCloud ？</p></li><li><p>注册中心</p><ul><li>那几款？对比？</li><li>服务发现流程，原理？</li></ul></li><li><p>熔断器</p><ul><li>那几款？对比？</li></ul></li><li><p>MySQL</p><ul><li>执行流程（5.7 ）</li><li></li></ul></li></ul><h2 id="一、你有过SpringCloud-？"><a href="#一、你有过SpringCloud-？" class="headerlink" title="一、你有过SpringCloud ？"></a>一、你有过SpringCloud ？</h2><p>当然，如果按照厂商分为两种：Netflix 和 alibaba ；如果按照技术栈则分为，注册中心、配置中心、网关、熔断器、服务调用、分布式事务、链路追踪等，不过核心的组件有五大，cloud是 eureka,feign,ribbon,hystrix,zuul，alibbaba:nacos,sentinel,gateway.</p><p>社区活跃，你在生产上遇到的问题不是第一个遇到，教程多</p><h3 id="1、常规题（放松版）"><a href="#1、常规题（放松版）" class="headerlink" title="1、常规题（放松版）"></a>1、常规题（放松版）</h3><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><h3 id="1、注册中心"><a href="#1、注册中心" class="headerlink" title="1、注册中心"></a>1、注册中心</h3><h4 id="1、注册中心比较"><a href="#1、注册中心比较" class="headerlink" title="1、注册中心比较"></a>1、注册中心比较</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220222205601.png"></p><h4 id="2、注册服务于发现流程"><a href="#2、注册服务于发现流程" class="headerlink" title="2、注册服务于发现流程"></a>2、注册服务于发现流程</h4><h3 id="2、熔断器"><a href="#2、熔断器" class="headerlink" title="2、熔断器"></a>2、熔断器</h3><h4 id="1、对比图"><a href="#1、对比图" class="headerlink" title="1、对比图"></a>1、对比图</h4><h2 id="二、Mysql高级面基"><a href="#二、Mysql高级面基" class="headerlink" title="二、Mysql高级面基"></a>二、Mysql高级面基</h2><p>高级特性本周整理大纲：<br>1、执行流程（5.7 and 8.0 暂不整理），逻辑架构（三层）；图、概述，白话总结<br>2、存储引擎（InnoDB MyISAM （核心对比图）…边缘5种简述-了解）；装逼：阿里自定义引擎：Xtradb<br>3、索引迭代设计（是非聚簇索引，二级、联合索引），索引使用常见（11 yes 7 not）；边缘所以你接口对比（HASH、AVL、B、B+）、Explain调优阿里、三范式 ER模型<br>N、事务（显式、隐式），锁（表锁：S锁、X锁、意向锁、自增锁、元数据锁；行锁：记录锁、间隙锁、临键锁、插入意向锁；乐观悲观锁…..） 扩展待定？</p><h4 id="1、执行流程"><a href="#1、执行流程" class="headerlink" title="1、执行流程"></a>1、执行流程</h4><p><strong>SQL流程</strong> </p><p>sql语句 -&gt; 查询缓存 -&gt; 解析器 -&gt; 优化器 -&gt; 执行器</p><p><strong>完整流程</strong></p><p> 客户端程序 connectors &gt;&gt; 连接池 &gt;&gt; SQL接口 &gt;&gt; 解析器 &gt;&gt; 优化器 &gt;&gt; 查询缓存 &gt;&gt; 插件式存储引擎 &gt;&gt; File（文件系统/日志文件）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302171540587.png"></p><blockquote><ol><li>客户端程序 : 包括一些mysql工具如：native 或者语言工具如：php 、go 、python</li><li>连接池  : 提供多个用户客户端和服务端交互的线程</li><li>SQL接口 : 接收sql命令，返回查询结果</li><li>解析器  : 进行sql语法的解析、语意解析、生成语法树</li><li>优化器  : mysql核心组件，对sql命令进行优化</li><li>缓存    : 以key -&gt; value方式缓存查询结果 (如果查询sql指令有缓存直接在SQL接口部分返回缓存结果)</li><li>存储引擎 : 与底层文件进行交互，查询数据文件系统、日志文件等</li></ol></blockquote><p><strong>mysql server三层架构</strong></p><p>1、连接层</p><p>mysql服务器有专门的tcp连接池限制最大连接数，采用长连接模式复用tcp连接，进行连接交互</p><p>2、服务层 </p><ul><li>Interface 接口</li><li>解析器</li><li>查询优化器</li><li>查询缓存组件</li></ul><p>3、引擎层</p><p>插件式的存储引擎层，真正的负责了mysql中数据的存储和提取，对物理服务器级别维护的底层数据执行操作，服务器通过api与存储引擎通信。不同的存储引擎具有的功能不同，支持二开引擎【阿里：Xtradb】</p><h4 id="2、聚簇索引和非聚簇索引"><a href="#2、聚簇索引和非聚簇索引" class="headerlink" title="2、聚簇索引和非聚簇索引"></a>2、聚簇索引和非聚簇索引</h4><p>对比：</p><ul><li>聚簇索引叶子节点存储的是行数据；而非聚簇索引叶子节点存储的是聚簇索引（通常是主键 ID）。</li><li>聚簇索引查询效率更高，而非聚簇索引需要进行回表查询，因此性能不如聚簇索引。</li><li>聚簇索引一般为主键索引，而主键一个表中只能有一个，因此聚簇索引一个表中也只能有一个，而非聚簇索引则没有数量上的限制</li></ul><p><strong>聚簇索引 id 对应的 B+ 树如下图所示：</strong> </p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252030574.png"></p><p><strong>在 student 中非聚簇索引 class_id 对应 B+ 树如下图所示：</strong> </p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252030261.png"></p><h4 id="3、存储引擎"><a href="#3、存储引擎" class="headerlink" title="3、存储引擎"></a>3、存储引擎</h4><p>对比图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302251609760.png"></p><p><strong>MyISAM</strong> <strong>与</strong> <strong>InnoDB两种引擎中索引的区别</strong></p><p>① 在InnoDB存储引擎中，我们只需要根据主键值对聚簇索引进行一次查找就能找到对应的记录，而在MyISAM中却需要进行一次回表操作，意味着MyISAM中建立的索引相当于全部都是二级索引。</p><p>② InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。</p><p>③ InnoDB的非聚簇索引data域存储相应记录主键的值，而MyISAM索引记录的是地址。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</p><p>④ MyISAM的回表操作是十分快速的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p><p>⑤ InnoDB要求表必须有主键（MyISAM可以没有）。如果没有显式指定，则MySQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整型。</p><p>补充1：InnoDB的逻辑结构图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252055728.png"></p><h4 id="4、为什么覆盖索引不用回表"><a href="#4、为什么覆盖索引不用回表" class="headerlink" title="4、为什么覆盖索引不用回表"></a>4、为什么覆盖索引不用回表</h4><p>一级索引：聚簇索引即主键索引<br>二级索引：非聚簇索引</p><p>一级B+Tree：叶子节点保存着键（id的值）和数据（全部字段的值）<br>二级B+Tree：叶子节点保存着键（索引字段的值）和数据（主键索引值）</p><p>查询 一级索引，根据一级B+Tree查询到数据，直接返回数据<br>查询 二级索引，根据二级B+Tree查询到对应的聚簇索引，再根据聚簇索引在一级B+Tree里查询到相应数据</p><p>查询 一级索引只需要扫描一次B+Tree。<br>查询 二级索引需要扫描两次B+Tree。根据二级B+Tree扫描的结果，再去一级B+Tree里进行扫描就叫回表操作。</p><p>如果使用组合索引，就可以利用覆盖索引避免回表操作<br>例如：表一共有五个字段：a（主键索引），b_c_d（组合索引），e（没有索引）</p><p>如果用户查询时只查 b,c,d 例：SELECT <code>b</code>, <code>c</code>, <code>d</code> FROM <code>table</code> WHERE <code>b</code> = 3 AND <code>c</code> = 7 AND <code>d</code> = 5;</p><p>因为查询的字段 b,c,d的值（B+Tree里的键） 已经在B+Tree里了，所以就可以直接返回，不用再拿聚簇索引去一级B+Tree里进行查询<br>如果查询字段为 a,b,c,d 因为a为主键索引，也保存再二级B+Tree的叶子节点里，所以也不用回表查询<br>如果查询字段为 a,b,c,d,e 因为e没有在这个二级B+Tree里，所以需要进行回表操作，拿着主键索引再去一级B+Tree里进行查询。</p><h4 id="5、B-tree"><a href="#5、B-tree" class="headerlink" title="5、B+tree"></a>5、B+tree</h4><p>时间复杂度：<strong>O(logN)</strong></p><p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4阶（4指针3key）的b+tree为例</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252105651.png"></p><p>最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别： </p><ul><li>所有的数据都会出现在叶子节点。 </li><li>叶子节点形成一个单向链表。 </li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。 </li></ul><p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252123348.png"></p><h4 id="6、SQL优化（慢SQL优化）"><a href="#6、SQL优化（慢SQL优化）" class="headerlink" title="6、SQL优化（慢SQL优化）"></a>6、SQL优化（慢SQL优化）</h4><p>第一步：可以用 <code>explain</code> 查看执行计划</p><p>常见案例优化：</p><p>1-1、<strong>insert</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化，通过手动控制事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1-2、<strong>大批量插入数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 客户端连接服务端时，加上参数 -–local-infile</span>mysql –<span class="token operator">-</span><span class="token keyword">local</span><span class="token operator">-</span><span class="token keyword">infile</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><span class="token keyword">set</span> <span class="token keyword">global</span> local_infile <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 执行load指令将准备好的数据，加载到表结构中</span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">'/root/sql1.log'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> tb_user <span class="token keyword">fields</span><span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">','</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\n'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主键顺序插入性能高于乱序插入</p><p>2-1、<strong>主键优化</strong></p><ul><li>满足业务需求的情况下，尽量降低主键的长度。 </li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。（单调递增，高并发ID：雪花算法）</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。 </li><li>业务操作时，避免对主键的修改。 </li></ul><p>3-1、<strong>order by</strong> 优化</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</li><li> 尽量使用覆盖索引</li><li>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size(默认256k</li></ul><p>科普：</p><p>1、最左前缀法则（最左原则）：</p><p>比如，age 字段有索引，phone 没有索引，那么排序的时候，先写age 写在左边</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252153639.png"></p><p>2、Using filesort and Using index</p><ul><li>MySQL的排序，有两种方式： </li><li>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。 </li><li>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。 </li><li>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index。 </li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252150380.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302252150422.png"></p><p>3、覆盖索引：</p><p>尽量使用覆盖索引，减少select *。那么什么是覆盖索引呢？覆盖索引是指查询使用了索引，且需要返回的列，在该索引中已经全部能够找到</p><p>4-1、 <strong>group by ** **优化</strong> </p><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>5-1、<strong>limit ** **优化</strong></p><p>一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_sku t <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> tb_sku <span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token keyword">limit</span> <span class="token number">2000000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> a <span class="token keyword">where</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> a<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6-1、<strong>count</strong> <strong>优化</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262102677.png"></p><p>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽量使用 count(*)。</p><p><strong>7-1、update</strong> <strong>优化</strong></p><p>我们主要需要注意一下update语句执行时的注意事项。(加索引的字段)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'javaEE'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们在执行删除的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放。</p><p>但是当我们在执行如下SQL时。(未加索引的字段)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'SpringBoot'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'PHP'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们开启多个事务，在执行上述的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能大大降低。 </p><p><strong>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁 。</strong></p><h4 id="7、索引失效"><a href="#7、索引失效" class="headerlink" title="7、索引失效"></a>7、索引失效</h4><p>1、<strong>索引列运算</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262217534.png"></p><p>2、<strong>字符串不加引号</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262219304.png"></p><p>我们会明显的发现，如果字符串不加单引号，对于查询结果，没什么影响，但是数据库存在隐式类型转换，索引将失效</p><p>3、<strong>模糊查询</strong></p><p>在like模糊查询中，在关键字后面加%，索引可以生效。而如果在关键字前面加了%，索引将会失效。 </p><p>4、<strong>or</strong> <strong>连接条件</strong></p><p>当or连接的条件，左右两侧字段都有索引时，索引才会生效</p><p>5、<strong>数据分布影响</strong></p><p><strong>（1）基本数值，数据不同</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262236450.png"></p><p>MySQL在查询时，会评估使用索引的效率与走全表扫描的效率，如果走全表扫描更快，则放弃索引，走全表扫描。 <strong>因为索引是用来索引少量数据的，如果通过索引查询返回大批量的数据，则还不如走全表扫描来的快，此时索引就会失效</strong></p><p><strong>（2）is null   、 is not null</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262242400.png"></p><p>接下来，我们做一个操作将profession字段值全部更新为null，再次看下执行计划</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302262243088.png"></p><p>最终我们看到，一模一样的SQL语句，先后执行了两次，结果查询计划是不一样的，为什么会出现这种 现象，这是和数据库的数据分布有关系。查询时MySQL会评估，走索引快，还是全表扫描快，如果全表扫描更快，则放弃索引走全表扫描。 因此，is null 、is not null是否走索引，得具体情况具体分析，并不是固定的</p><p><strong>（3）总结：</strong></p><p>数据分布会根据索引数据量和全表扫描快慢比较，哪个快走哪里</p><p>8、索引设计原则</p><ul><li>针对于数据量较大，且查询比较频繁的表建立索引。 </li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。 (eg:0,1那种状态不要建立</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。 </li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。 </li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li></ul><h2 id="三、MQ"><a href="#三、MQ" class="headerlink" title="三、MQ"></a>三、MQ</h2><p>执行流程 、消息可靠性投递（现有企业封装了。。。）-小总结、</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092229549.png"></p><h3 id="1、常规"><a href="#1、常规" class="headerlink" title="1、常规"></a>1、常规</h3><h4 id="1、什么是MQ，优缺点"><a href="#1、什么是MQ，优缺点" class="headerlink" title="1、什么是MQ，优缺点"></a>1、什么是MQ，优缺点</h4><p>消息队列</p><p>异步处理，提高吞吐量</p><p>应用解耦，比如发送短信</p><p>流量削峰，可以通过消息队列长度控制请求量</p><p>增加系统复杂度，需要保证消息不重复消费，保证一致性，消息可靠性</p><h4 id="2、什么是RabbitMq？为什么用？应用场景？"><a href="#2、什么是RabbitMq？为什么用？应用场景？" class="headerlink" title="2、什么是RabbitMq？为什么用？应用场景？"></a>2、什么是RabbitMq？为什么用？应用场景？</h4><p>基于erlang语言开发，基于AMQP协议的消息中间件</p><p>社区活跃，国内使用的公司也多，吞吐量万级到十万级别，完善的管理界面。成熟的消息队列。</p><p>应用场景：服务间异步通信，顺序消费，定时任务，请求削峰</p><h4 id="3、RabbitMQ基本概念"><a href="#3、RabbitMQ基本概念" class="headerlink" title="3、RabbitMQ基本概念?"></a>3、<strong>RabbitMQ基本概念?</strong></h4><p>Exchange 交换机</p><p>Queue 消息队列</p><p>Binding 绑定，将交换机和队列按路由规则绑定起来</p><p>Routing Key 路由关键字，exchange根据这个关键字进行消息投递</p><p>VHost 相当于某个数据库</p><p>Producer 消息生产者</p><p>Consumer 消息消费者</p><h4 id="4、RabbitMq工作模式？"><a href="#4、RabbitMq工作模式？" class="headerlink" title="4、RabbitMq工作模式？"></a>4、RabbitMq工作模式？</h4><ol><li>简单模式 HelloWorld ：一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。</li><li>工作队列模式 Work Queue ：一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。</li><li>发布订阅模式 Publish/subscribe ：需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</li><li>路由模式 Routing ：需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li><li>通配符模式 Topic ：需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li></ol><h4 id="5、RabbitMq如何保证消息有序性"><a href="#5、RabbitMq如何保证消息有序性" class="headerlink" title="5、RabbitMq如何保证消息有序性?"></a>5、RabbitMq如何保证消息有序性?</h4><p>一个队列对应一个消费者</p><h4 id="6、RabbitMq如何保证消费不会被重复消费？"><a href="#6、RabbitMq如何保证消费不会被重复消费？" class="headerlink" title="6、RabbitMq如何保证消费不会被重复消费？"></a>6、RabbitMq如何保证消费不会被重复消费？</h4><p>根据业务来，比如订单有状态。或者定义唯一标识，消费后缓存到redis。在此消费时候判断一下redis。</p><h4 id="7、RabbitMQ如何保证消息的可靠性"><a href="#7、RabbitMQ如何保证消息的可靠性" class="headerlink" title="7、RabbitMQ如何保证消息的可靠性?"></a>7、RabbitMQ如何保证消息的可靠性?</h4><p>生产者丢失消息：</p><p>1.使用事务机制，牺牲性能</p><p>2.使用confirm模式，发送成功之后，会返回ack到生产者</p><p>消息队列丢失消息：</p><p>1.消息持久化</p><p>Exchange 设置持久化 ,Queue 设置持久化，durable设置为true</p><p>Message持久化发送：发送消息设置发送模式deliveryMode=2，代表持久化消息</p><p>消费者丢失消息</p><p>1.ACK确认机制</p><p>消费者确认消费后，RabbitMq才会将消息删除</p><h4 id="8、RabbitMQ部署方式"><a href="#8、RabbitMQ部署方式" class="headerlink" title="8、RabbitMQ部署方式?"></a>8、RabbitMQ部署方式?</h4><p>1.单机模式 2.普通集群(主从) 3.镜像集群</p><h4 id="9、什么是RocketMQ？"><a href="#9、什么是RocketMQ？" class="headerlink" title="9、什么是RocketMQ？"></a>9、什么是<strong>RocketMQ？</strong></h4><p>java开发，面向互联网集群化，功能丰富，对在线业务的响应时延做了很多的优化，大多数情况下可以做到毫秒级的响应，每秒钟大概能处理几十万条消息</p><h4 id="10、RocketMq实现消息事务的流程？"><a href="#10、RocketMq实现消息事务的流程？" class="headerlink" title="10、RocketMq实现消息事务的流程？"></a>10、RocketMq实现消息事务的流程？</h4><p>1.服务A发送一个半事务消息(half 消息)到RocketMq中,保证服务A和RocketMq正常通信,无法正常通信则回滚,正常则开始本地事务，处理本地业务逻辑并提交事务.</p><p>2.事务提交成功则向RocketMq发送提交，表示将 half 消息提交，将 half 消息写入到磁盘.事务提交失败则向RocketMq发送回滚，删除 half 消息.</p><p>3.如果RocketMq指定时间没有收到提交或者回滚消息，将尝试调用服务A提供的一个接口来判断half 消息对于的业务是否成功，成功则持久化，失败则删除</p><p>4.服务B消费RocketMq中的消息，处理本地业务，提交事务</p><h4 id="11、RocketMq的half-消息是什么？"><a href="#11、RocketMq的half-消息是什么？" class="headerlink" title="11、RocketMq的half 消息是什么？"></a>11、RocketMq的half 消息是什么？</h4><p>half消息只有被提交后才会被消费者消费</p><h4 id="12、为什么要先发送-half-消息？"><a href="#12、为什么要先发送-half-消息？" class="headerlink" title="12、为什么要先发送 half 消息？"></a>12、为什么要先发送 half 消息？</h4><p>为了保证服务 A 和 RocketMq之间是否能正常通信</p><h4 id="13、如果服务-A-本地事务执行失败了会怎么样？"><a href="#13、如果服务-A-本地事务执行失败了会怎么样？" class="headerlink" title="13、如果服务 A 本地事务执行失败了会怎么样？"></a>13、如果服务 A 本地事务执行失败了会怎么样？</h4><p>本地事务进行回滚，在向 RocketMq发送 rollback 操作。</p><h4 id="14、服务-B-本地事务提交失败了会怎么样？"><a href="#14、服务-B-本地事务提交失败了会怎么样？" class="headerlink" title="14、服务 B 本地事务提交失败了会怎么样？"></a>14、服务 B 本地事务提交失败了会怎么样？</h4><p>可以进行多次重试，直到成功。如果重试多次后，还是提交失败，那么 MQ 会在一定时间后，继续将这条消息推送给服务 B，服务 B 就可以继续执行本地事务并提交了，直到成功。保证最终一致性</p><h4 id="15、如何保证RocketMq消息不丢失"><a href="#15、如何保证RocketMq消息不丢失" class="headerlink" title="15、如何保证RocketMq消息不丢失?"></a>15、如何保证RocketMq消息不丢失?</h4><p>生产阶段只要发送返回ok状态就代表成功,</p><p>异步发送在回调中可以检查发送状态ok就代表成功,</p><p>存储阶段修改刷盘策略为同步刷盘。默认情况下是异步刷盘的。</p><p>集群部署，一主多从。默认异步复制，设置同步复制，牺牲性能</p><p>主节点设置同步复制 brokerRole=SYNC_MASTER</p><h3 id="2、进阶"><a href="#2、进阶" class="headerlink" title="2、进阶"></a>2、进阶</h3><h4 id="1、Rabbitmq-执行流程"><a href="#1、Rabbitmq-执行流程" class="headerlink" title="1、Rabbitmq 执行流程"></a>1、Rabbitmq 执行流程</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092235471.png"></p><ul><li>Broker：接收和分发消息的应用，RabbitMQ Server就是 Message Broker</li><li>Virtual host：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网 络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多 个vhost，每个用户在自己的 vhost 创建 exchange／queue 等</li><li>Connection：publisher／consumer 和 broker 之间的 TCP 连接</li><li>Channel：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线 程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</li><li>Exchange：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</li><li>Queue：消息最终被送到这里等待 consumer 取走</li><li>Binding：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</li></ul><h4 id="2、MQ消息可靠性投递"><a href="#2、MQ消息可靠性投递" class="headerlink" title="2、MQ消息可靠性投递"></a>2、MQ消息可靠性投递</h4><p>0、<strong>主要实现步骤</strong></p><ul><li>生产者确认机制</li><li>消费者确认机制</li><li>持久化（交换机，队列，消息）</li><li>失败重试机制</li><li>消息堆积问题</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303072220195.png"></p><p>1、<strong>生产者消息确认</strong></p><p>（1）publisher-comfirm：消息成功发送到exchange，返回ack消息发送失败，没有到达交换机，返回nack消息，发送过程中出现异常，没有收到回执</p><p>（2）消息成功发送到exchange，但没有路由到queue，回调ReturnCallback</p><p>（3）确认机制发送消息时，需要给每个消息设置一个全局唯一id，以区分不同消息，避免ack冲突</p><p>2、<strong>消费者确认机制</strong></p><p>RabbitMQ是<strong>阅后即焚</strong>机制，RabbitMQ确认消息被消费者消费后会立刻删除。</p><p>而RabbitMQ是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向RabbitMQ发送ACK回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><p>1）RabbitMQ投递消息给消费者</p><p>2）消费者获取消息后，返回ACK给RabbitMQ</p><p>3）RabbitMQ删除消息</p><p>4）消费者宕机，消息尚未处理</p><p>这样，消息就丢失了。因此消费者返回ACK的时机非常重要。</p><p>而SpringAMQP则允许配置三种确认模式：</p><p>•manual：手动ack，需要在业务代码结束后，调用api发送ack。</p><p>•auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack</p><p>•none：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><p>none模式下，消息投递是不可靠的，可能丢失</p><p>auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack</p><p>manual：自己根据业务情况，判断什么时候该ack</p><p>一般，我们都是使用默认的auto即可</p><p>3、<strong>持久化</strong></p><p>（1）交换机持久化</p><p>RabbitMQ中交换机默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">simpleExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"simple.direct"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上，默认情况下，由SpringAMQP声明的交换机都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303051551218.png"></p><p>（2）队列持久化</p><p>RabbitMQ中队列默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 使用QueueBuilder构建队列，durable就是持久化的</span>    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"simple.queue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上，默认情况下，由SpringAMQP声明的队列都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的队列都会带上D的标示：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303051517011.png"></p><p>（3）消息持久化</p><p>利用SpringAMQP发送消息时，可以设置消息的属性（MessageProperties），指定delivery-mode：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p>默认情况下，SpringAMQP发出的任何消息都是持久化的，不用特意指定。</p><p>4、<strong>失败重试机制</strong></p><p><strong>步骤：</strong></p><p>本地重试机制 -》 死信队列</p><p>4-1、<strong>本地重试</strong></p><p>我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><p>修改consumer服务的application.yml文件，添加内容：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token key atrule">simple</span><span class="token punctuation">:</span>        <span class="token key atrule">retry</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启消费者失败重试</span>          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> 1000ms <span class="token comment"># 初始的失败等待时长为1秒</span>          <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span>          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 最大重试次数</span>          <span class="token key atrule">stateless</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li><li><strong>重试达到最大次数后，Spring会返回ack，消息会被丢弃</strong></li></ul><p>4-2、<strong>失败策略</strong></p><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由Spring内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecovery接口来处理，它包含三种不同的实现：</p><ul><li>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</li><li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</li><li><strong>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机（死信，惰性，异常交换机）</strong></li></ul><p>比较优雅的一种处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在consumer服务中定义处理失败消息的交换机和队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"error.direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"error.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> errorQueue<span class="token punctuation">,</span> <span class="token class-name">DirectExchange</span> errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>errorMessageExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">"error.direct"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4-3、<strong>死信队列</strong></p><p>什么样的消息会成为死信？</p><blockquote><p>消息被消费者reject或者返回nack ，拒绝</p><p>消息超时未消费（TTL）</p><p>普通队列满了（可指定到死信，不是一定死信也可以是惰性）</p></blockquote><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，检查DLX）</p><p>队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的RoutingKey</li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p>4-4、<strong>死信作为重试机制策略</strong></p><p>在失败重试策略中，默认的RejectAndDontRequeueRecoverer会在本地重试次数耗尽后，发送reject给RabbitMQ，消息变成死信，被丢弃。</p><p>我们可以给simple.queue添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"simple.queue"</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>        <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">"dl.direct"</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 声明死信交换机 dl.direct</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"dl.direct"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 声明存储死信的队列 dl.queue</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"dl.queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 将死信队列 与 死信交换机绑定</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">dlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">dlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">dlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"simple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者确认模式: auto<br>    acknowledge-mode: auto<br>    特征: 当消息不能被消费时,会重新入队,再次投递给消费者进行被消费<br>    default-requeue-rejected: false # 拒绝消息重新入队,如果队列绑定了死信交换机则消息会投递到死信交换机并路由到死信队列</p><p>本地重试：底下是三种方案，不是三个步骤，需要注意</p><p>​    当本地重试次数耗尽时,如果当前队列没有绑定死信交换机或错误队列,则消息丢弃<br>​    如果提供了异常队列,则消息投递到异常对象<br>​    如果队列绑定了死信交换机,则消息以死信的形式存放到死信队列</p><p>5、<strong>惰性队列</strong></p><p>5-1、<strong>堆积问题</strong></p><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303052229466.png"></p><p><strong>解决消息堆积思路：</strong></p><ul><li>增加更多消费者，提高消费速度。也就是我们之前说的work queue模式</li><li>在消费者内开启线程池加快消息处理速度</li><li>扩大队列容积，提高堆积上限</li></ul><p>5-2、<strong>惰性队列</strong></p><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><p>5-2-1、<strong>基于命令行设置lazy-queue</strong></p><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rabbitmqctl set_policy Lazy <span class="token string">"^simple.queue$"</span> <span class="token string">'{"queue-mode":"lazy"}'</span> --apply-to queues  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rabbitmqctl ：RabbitMQ的命令行工具set_policy ：添加一个策略Lazy ：策略名称，可以自定义<span class="token string">"^lazy-queue$"</span> ：用正则表达式匹配队列的名字<span class="token string">'{"queue-mode":"lazy"}'</span> ：设置队列模式为lazy模式--apply-to queues：策略的作用对象，是所有的队列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-2-2、基于@Bean声明lazy-queue</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303052228644.png"></p><p>5-2-3、基于@RabbitListener声明LazyQueue</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303052230941.png"></p><p><strong>小结：</strong></p><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>使用惰性队列，可以再mq中保存更多消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些？</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h2 id="四、Redis"><a href="#四、Redis" class="headerlink" title="四、Redis"></a>四、Redis</h2><p>缓存一致性问题、十大数据结构</p><h3 id="1、常规（放松版）"><a href="#1、常规（放松版）" class="headerlink" title="1、常规（放松版）"></a>1、常规（放松版）</h3><h4 id="1、redis有哪些数据结构"><a href="#1、redis有哪些数据结构" class="headerlink" title="1、redis有哪些数据结构?"></a>1、redis有哪些数据结构?</h4><p>字符串String、字典Hash、列表List、集合Set、有序集合SortedSet</p><p>HyperLogLog ：网站的UV统计</p><p>Geo：获取位置的距离</p><p>Bitmap:位图</p><p>Stream：消息队列</p><h4 id="2、为什么要用redis"><a href="#2、为什么要用redis" class="headerlink" title="2、为什么要用redis?"></a>2、为什么要用redis?</h4><p>可以做缓存，耗时间的sql，且不频繁变动的可以缓存到redis，提高响应速度</p><p>提高并发，大量的请求先请求到redis，而不是直接请求到数据库</p><p>可以做分布式锁。</p><h4 id="3、什么是分布式锁？"><a href="#3、什么是分布式锁？" class="headerlink" title="3、什么是分布式锁？"></a>3、什么是分布式锁？</h4><p>setnx来获取锁，expire来添加过期时间，防止资源占用过久</p><h4 id="4、找出redis中以某个前缀开头的大量的key？"><a href="#4、找出redis中以某个前缀开头的大量的key？" class="headerlink" title="4、找出redis中以某个前缀开头的大量的key？"></a>4、找出redis中以某个前缀开头的大量的key？</h4><p>keys xx* 使用keys会造成阻塞</p><p>scan 0 match key1111* count 20 不会造成阻塞</p><h4 id="5、如何使用redis做消息队列？"><a href="#5、如何使用redis做消息队列？" class="headerlink" title="5、如何使用redis做消息队列？"></a>5、如何使用redis做消息队列？</h4><p>list结构作为队列，rpush生产消息，lpop消费消息，需要自己实现阻塞。blpop没有消息会阻塞，等到消息到来。</p><h4 id="6、大量的key在同一时间过期，需要注意什么？"><a href="#6、大量的key在同一时间过期，需要注意什么？" class="headerlink" title="6、大量的key在同一时间过期，需要注意什么？"></a>6、大量的key在同一时间过期，需要注意什么？</h4><p>redis可能会出现卡顿现象，并发量大可能出现缓存雪崩，可以在过期时间添加一个随机数</p><h4 id="7、什么是缓存穿透，缓存击穿？"><a href="#7、什么是缓存穿透，缓存击穿？" class="headerlink" title="7、什么是缓存穿透，缓存击穿？"></a>7、什么是缓存穿透，缓存击穿？</h4><p>缓存穿透：对空值缓存，设置可访问的名单（白名单），采用布隆过滤器</p><p>缓存击穿: 一个key过期时，大量请求打到数据库。加互斥锁和热点数据不过期。</p><h4 id="8、redis的线程模型？"><a href="#8、redis的线程模型？" class="headerlink" title="8、redis的线程模型？"></a>8、redis的线程模型？</h4><p>redis使用文件事件处理器，它是一个单线程的，采用io多路复用程序监听多个socket，</p><p>将产生事件的socket压入内存队列，事件分派器根据事件类型选择对应的事件处理器进行处理。</p><h4 id="9、redis-为什么使用单进程、单线程也很快"><a href="#9、redis-为什么使用单进程、单线程也很快" class="headerlink" title="9、redis 为什么使用单进程、单线程也很快?"></a>9、redis 为什么使用单进程、单线程也很快?</h4><p>1.基于内存的操作</p><p>2.使用了 I/O 多路复用模型</p><p>3.单线程可以避免不必要的上下文切换和竞争条件</p><h4 id="10、redis过期策略"><a href="#10、redis过期策略" class="headerlink" title="10、redis过期策略?"></a>10、redis过期策略?</h4><p>定期删除+惰性删除。</p><p>定期删除：每隔一段时间删除</p><p>惰性删除：获取的时候判断是否过期</p><h4 id="11、redis的内存淘汰机制？"><a href="#11、redis的内存淘汰机制？" class="headerlink" title="11、redis的内存淘汰机制？"></a>11、redis的内存淘汰机制？</h4><ul><li>noeviction: 当内存不足时，新写入操作会报错</li><li>allkeys-lru：当内存不足时，移除最近最少使用的 key（这个是最常用的）。</li><li>allkeys-random：当内存不足时，随机移除某个 key。</li><li>volatile-lru：当内存不足时，在设置了过期时间的键中，移除最近最少使用的 key。</li><li>volatile-random：当内存不足时，在设置了过期时间的键中，随机移除某个 key。</li><li>volatile-ttl：当内存不足时，在设置了过期时间的键中，有更早过期时间的 key 优先移除</li></ul><h4 id="12、redis-的持久化有哪几种方式？"><a href="#12、redis-的持久化有哪几种方式？" class="headerlink" title="12、redis 的持久化有哪几种方式？"></a>12、<strong>redis 的持久化有哪几种方式？</strong></h4><p>Rdb：rdb会周期性对redis的数据进行持久化</p><p>Aof：将每条写入命令写入日志中，在redis重启的时候通过日志文件重构数据</p><p>Rdb会产生多个文件，每个文件代表某一个时刻的redis数据。对于aof来说，基于rdb恢复数据会更快。</p><p>redis 故障Rdb会丢失更多的数据，Rdb快照都是隔5分钟或者更长时间生成，而aof每隔一秒就会执行一次，所以只会丢失一秒钟的数据。</p><h4 id="13、如何保证缓存和数据库一致？"><a href="#13、如何保证缓存和数据库一致？" class="headerlink" title="13、如何保证缓存和数据库一致？"></a>13、<strong>如何保证缓存和数据库一致？</strong></h4><p>读的时候先读缓存，没有的话读数据库，放入缓存，返回结果。更新的时候先更新数据库，然后删除缓存。</p><p>为什么是删除而不是更新?</p><p>因为更新可能是更新一个或几个字段，缓存可能缓存的是一个结果集。</p><p>先更新数据库，在删除缓存，如果缓存删除失败？</p><p>解决方案:先删除缓存，在删除数据库，删除数据库失败那数据还是没变。</p><h4 id="14、redis-的并发竞争问题是什么？如何解决这个问题？了解redis-事务的-CAS-方案吗？"><a href="#14、redis-的并发竞争问题是什么？如何解决这个问题？了解redis-事务的-CAS-方案吗？" class="headerlink" title="14、redis 的并发竞争问题是什么？如何解决这个问题？了解redis 事务的 CAS 方案吗？"></a>14、r<strong>edis 的并发竞争问题是什么？如何解决这个问题？了解redis 事务的 CAS 方案吗？</strong></h4><p><strong>多个客户端同事写一个key，造成数据不一致</strong></p><p><strong>redis天然支持乐观锁</strong></p><p>watch 监控key，multi开始事务,在执行exec命令前值被修改则会回滚。</p><h4 id="15、Redis-的-LRU-算法怎么实现的"><a href="#15、Redis-的-LRU-算法怎么实现的" class="headerlink" title="15、Redis 的 LRU 算法怎么实现的?"></a>15、Redis 的 LRU 算法怎么实现的?</h4><p>拿到n个key，和缓冲池中的key比较最大空闲时间，比缓存池的key最大空闲时间还大，则替换缓存池的key，然后从缓存池中移除最大空闲时间的key。</p><h4 id="16、Redis-怎么保证高可用、有哪些集群模式？"><a href="#16、Redis-怎么保证高可用、有哪些集群模式？" class="headerlink" title="16、Redis 怎么保证高可用、有哪些集群模式？"></a>16、Redis 怎么保证高可用、有哪些集群模式？</h4><p>主从，哨兵，集群</p><p><strong>1.主从复制</strong></p><p>1.开启配置</p><ul><li>在 slave 直接执行命令：slaveof <master ip=""> <master port=""></master></master></li><li>在 slave 配置文件中加入：slaveof <master ip=""> <master port=""></master></master></li><li>使用启动命令：–slaveof <master ip=""> <master port=""></master></master></li></ul><p>2.建立套接字(<strong>socket</strong>)连接 3.<strong>发送PING命令</strong> 4.身份验证 5.发送CAPA(同步复制的能力)</p><p>6.数据同步 7.命令传播</p><p>出现故障需要手动更改配置</p><p><strong>2.哨兵</strong></p><p>哨兵（Sentinel） 是 Redis 的高可用性解决方案，由多个哨兵监控主服务器。监控的主服务器故障的时候，可以将从服务器升级为主服务器</p><p><strong>3.集群</strong></p><p><strong>哨兵模式的缺点就是所有的数据都放在一台服务器上，无法比较好的进行水平扩展。</strong></p><p><strong>集群模式：</strong></p><p><strong>去中心化，</strong>将数据按槽存储分布在多个 Redis 节点上。集群共有 16384 个槽，每个节点负责处理部分槽。</p><p>所有的 Redis 节点彼此互联，通过 PING-PONG 机制来进行节点间的心跳检测。</p><p>主节点故障时，从节点向所有有投票的主节点发起选举，获得票数&gt;2n+1则升级为主节点.</p><h3 id="2、二阶（散装）"><a href="#2、二阶（散装）" class="headerlink" title="2、二阶（散装）"></a>2、二阶（散装）</h3><h4 id="———概述———"><a href="#———概述———" class="headerlink" title="———概述———-"></a>———概述———-</h4><h4 id="1、Redis有哪些优缺点"><a href="#1、Redis有哪些优缺点" class="headerlink" title="1、Redis有哪些优缺点"></a>1、Redis有哪些优缺点</h4><p>优点</p><ul><li>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。</li><li>支持数据持久化，支持AOF和RDB两种持久化方式。</li><li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li><li>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li></ul><p>缺点</p><ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h4 id="2、为什么要用-Redis-为什么要用缓存"><a href="#2、为什么要用-Redis-为什么要用缓存" class="headerlink" title="2、为什么要用 Redis /为什么要用缓存"></a>2、为什么要用 Redis /为什么要用缓存</h4><p>主要从“高性能”和“高并发”这两点来看待这个问题。</p><h5 id="高性能："><a href="#高性能：" class="headerlink" title="高性能："></a>高性能：</h5><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><h5 id="高并发："><a href="#高并发：" class="headerlink" title="高并发："></a>高并发：</h5><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。（用户会话信息，字典数据，网关黑白名单…）</p><h4 id="3、为什么要用-Redis-而不用-map-guava-做缓存"><a href="#3、为什么要用-Redis-而不用-map-guava-做缓存" class="headerlink" title="3、为什么要用 Redis 而不用 map/guava 做缓存?"></a>3、为什么要用 Redis 而不用 map/guava 做缓存?</h4><p>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p><p>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为复杂。</p><h4 id="4、Redis为什么这么快"><a href="#4、Redis为什么这么快" class="headerlink" title="4、Redis为什么这么快"></a>4、Redis为什么这么快</h4><p>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；</p><p>2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p><p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、使用多路 I/O 复用模型，非阻塞 IO；</p><p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p><h4 id="—–数据结构—"><a href="#—–数据结构—" class="headerlink" title="—–数据结构—-"></a>—–数据结构—-</h4><h4 id="1、应用场景"><a href="#1、应用场景" class="headerlink" title="1、应用场景"></a>1、应用场景</h4><ul><li>计数器</li></ul><p>可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p><ul><li>缓存</li></ul><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p><ul><li>会话缓存</li></ul><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><ul><li>全页缓存（FPC）</li></ul><p>除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><ul><li>查找表</li></ul><p>例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p><ul><li>消息队列(发布/订阅功能)</li></ul><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</p><ul><li>分布式锁实现</li></ul><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p><ul><li>其它</li></ul><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</p><p>——————————————–两种分点上为功能，下为结构——————————————————–</p><p>expire：设置key的过期时间</p><p>persist：设置key永久有效</p><ul><li><strong>5种基础数据类型</strong>：String、List、Set、Zset、Hash。</li><li><strong>三种特殊的数据类型</strong>： HyperLogLogs（基数统计）， Bitmaps (位图) ， geospatial （地理位置)</li></ul><p><strong>String（字符串）：</strong></p><blockquote><p>底层数据结构：<strong>SDS即动态字符串</strong>，最大容量512M，每次最多扩容1M，是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或序列化的对象<br>应用场景：分布式锁、计数器(如访问次数、点赞转发数量)<br>常用方法：set 、get、strlen 、incr 、 decr 、setnx、setex、exists</p></blockquote><p><strong>list（双向列表）：</strong></p><blockquote><p>特点：单值多键，用来存储多个有序的字符串，一个列表最多可以存储2^32-1个元素。可以实现队列和栈<br>底层数据结构：<strong>快表</strong><br>应用场景：消息队列 、文章列表<br>常用方法：lpush 、lrang 、rpush 、lpop 、rpop 、llen、lindex、rpoplpush、linsert</p></blockquote><p><strong>Hash（哈希）：</strong></p><blockquote><p>底层数据结构：<strong>压缩列表</strong>、<strong>哈希表</strong>。<br>特点：指v（值）本身又是一个键值对（k-v）结构<br>应用场景：缓存用户信息、购物车等。<br>常用方法：hset 、hget 、hkeys 、hvals 、hmset 、hmget 、hgetAll 、hlen 、hdel 、hsetnx 、hexists</p></blockquote><p><strong>set（集合）：</strong></p><blockquote><p>特点：用来保存多个的字符串元素，但是不允许重复元素，元素是无序的。可以实现并集、交集、差集的操作<br>底层数据结构：<strong>哈希表</strong>、<strong>整数集</strong><br>应用场景：抽奖、共同关注、QQ内推等。<br>常用方法：sadd 、smembers 、sismember 、scard 、srem 、srandmember、spop、smove、sdiff、sinter、sunion</p></blockquote><p><strong>zset（有序集合）：</strong></p><blockquote><p>特点：有序不重复的集合。和 set 相⽐sorted set 增加了⼀个权重参数 score，可以根据score进行排序，但score是可以重复的，value是不可以重复的。<br>底层数据结构：<strong>压缩列表</strong>、<strong>跳表</strong><br>应用场景：排行榜、抖音热搜<br>常用方法：zadd 、zrange 、zrangebyscore(按score从小到大) 、zrem 、zcard 、zcount 、zrevrange(按score从大到小）</p></blockquote><h4 id="—–持久化—"><a href="#—–持久化—" class="headerlink" title="—–持久化—-"></a>—–持久化—-</h4><h4 id="1、Redis-的持久化机制是什么？各自的优缺点？"><a href="#1、Redis-的持久化机制是什么？各自的优缺点？" class="headerlink" title="1、Redis 的持久化机制是什么？各自的优缺点？"></a>1、Redis 的持久化机制是什么？各自的优缺点？</h4><p>Redis 提供两种持久化机制 RDB（默认） 和 AOF 机制:</p><p><strong>RDB：是Redis DataBase缩写快照</strong></p><p>RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303112207073.png"></p><p>优点：</p><ul><li>1、只有一个文件 dump.rdb，方便持久化。</li><li>2、容灾性好，一个文件可以保存到安全的磁盘。</li><li>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</li><li>4.相对于数据集大时，比 AOF 的启动效率更高。</li></ul><p>缺点：</p><ul><li>1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)</li><li>2、AOF（Append-only file)持久化方式：是指所有的命令行记录以 redis 命令请 求协议的格式完全持久化存储)保存为 aof 文件。</li></ul><p><strong>AOF：持久化</strong></p><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p><p>当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。</p><p>优点：</p><ul><li>安全，所有写入的数据都不会丢失。</li><li>AOF文件易读，可修改。</li></ul><p>详情了解：</p><ul><li>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</li><li>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</li><li>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）</li></ul><p>缺点：</p><ul><li>1、AOF 文件比 RDB 文件大，且恢复速度慢。</li><li>2、数据集大的时候，比 rdb 启动效率低。</li></ul><p>优缺点是什么？</p><ul><li>AOF文件比RDB更新频率高，优先使用AOF还原数据。</li><li>AOF比RDB更安全也更大</li><li>RDB性能比AOF好</li><li>如果两个都配了优先加载AOF</li></ul><h4 id="2、如何选择合适的持久化方式"><a href="#2、如何选择合适的持久化方式" class="headerlink" title="2、如何选择合适的持久化方式"></a>2、如何选择合适的持久化方式</h4><ul><li>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</li><li>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。</li><li>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</li></ul><h4 id="3、Redis持久化数据和缓存怎么做扩容"><a href="#3、Redis持久化数据和缓存怎么做扩容" class="headerlink" title="3、Redis持久化数据和缓存怎么做扩容"></a>3、Redis持久化数据和缓存怎么做扩容</h4><ul><li>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。</li><li>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。</li></ul><h4 id="—过期键的删除策略—"><a href="#—过期键的删除策略—" class="headerlink" title="—过期键的删除策略—"></a>—过期键的删除策略—</h4><h4 id="1、Redis的过期键的删除策略"><a href="#1、Redis的过期键的删除策略" class="headerlink" title="1、Redis的过期键的删除策略"></a>1、Redis的过期键的删除策略</h4><p>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</p><p>过期策略通常有以下三种：</p><ul><li>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</li><li>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</li><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。<br>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)</li></ul><p>Redis中同时使用了惰性过期和定期过期两种过期策略。</p><h4 id="2、对过期的数据怎么处理呢"><a href="#2、对过期的数据怎么处理呢" class="headerlink" title="2、对过期的数据怎么处理呢?"></a>2、对过期的数据怎么处理呢?</h4><p>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：</p><ol><li>定时去清理过期的缓存；</li><li>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</li></ol><p>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</p><h4 id="—内存相关—"><a href="#—内存相关—" class="headerlink" title="—内存相关—"></a>—内存相关—</h4><h4 id="1、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#1、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="1、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>1、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h4><p>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><h4 id="2、Redis的内存淘汰策略有哪些"><a href="#2、Redis的内存淘汰策略有哪些" class="headerlink" title="2、Redis的内存淘汰策略有哪些"></a>2、Redis的内存淘汰策略有哪些</h4><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><p>全局的键空间选择性移除</p><ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ul><p>设置过期时间的键空间选择性移除</p><ul><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ul><p><strong>总结</strong></p><p>Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</p><h4 id="3、Redis的内存用完了会发生什么"><a href="#3、Redis的内存用完了会发生什么" class="headerlink" title="3、Redis的内存用完了会发生什么"></a>3、Redis的内存用完了会发生什么</h4><p>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><h4 id="4、Redis如何做内存优化"><a href="#4、Redis如何做内存优化" class="headerlink" title="4、Redis如何做内存优化"></a>4、Redis如何做内存优化</h4><p>可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应该把这个用户的所有信息存储到一张散列表里面</p><p>补充：但是注意 key粒度要足够细（xxx-yy-zzz-***）</p><h4 id="—线程模型—"><a href="#—线程模型—" class="headerlink" title="—线程模型—"></a>—线程模型—</h4><h4 id="1、Redis线程模型"><a href="#1、Redis线程模型" class="headerlink" title="1、Redis线程模型"></a>1、Redis线程模型</h4><p>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><h4 id="—–事务—–"><a href="#—–事务—–" class="headerlink" title="—–事务—–"></a>—–事务—–</h4><p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p><h4 id="1、相关命令"><a href="#1、相关命令" class="headerlink" title="1、相关命令"></a>1、<strong>相关命令</strong></h4><ul><li>MULTI ：开启事务，redis会将后续的命令逐个放入队列中，然后使用EXEC命令来原子化执行这个命令系列。</li><li>EXEC：执行事务中的所有操作命令。</li><li>DISCARD：取消事务，放弃执行事务块中的所有命令。</li><li>WATCH：监视一个或多个key,如果事务在执行前，这个key(或多个key)被其他命令修改，则事务被中断，不会执行事务中的任何命令。</li><li>UNWATCH：取消WATCH对所有key的监视。</li></ul><h4 id="2、执行的3个阶段"><a href="#2、执行的3个阶段" class="headerlink" title="2、执行的3个阶段"></a>2、<strong>执行的3个阶段</strong></h4><ul><li><strong>开启</strong>：以MULTI开始一个事务</li><li><strong>入队</strong>：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li><strong>执行</strong>：由EXEC命令触发事务</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303121523348.png"></p><h4 id="3、Redis-对-ACID的支持性理解"><a href="#3、Redis-对-ACID的支持性理解" class="headerlink" title="3、Redis 对 ACID的支持性理解"></a>3、Redis 对 ACID的支持性理解</h4><ul><li><strong>原子性atomicity</strong></li></ul><blockquote><p>Redis官方文档给的理解是，<strong>Redis的事务是原子性的：所有的命令，要么全部执行，要么全部不执行</strong>。而不是完全成功。</p></blockquote><ul><li><strong>一致性consistency</strong></li></ul><blockquote><p>redis事务可以保证命令失败的情况下得以回滚，数据能恢复到没有执行之前的样子，是保证一致性的，除非redis进程意外终结。</p></blockquote><ul><li><strong>隔离性Isolation</strong></li></ul><blockquote><p>redis事务是严格遵守隔离性的，原因是redis是单进程单线程模式(v6.0之前），可以保证命令执行过程中不会被其他客户端命令打断。但是，Redis不像其它结构化数据库有隔离级别这种设计。</p></blockquote><ul><li><strong>持久性Durability</strong></li></ul><blockquote><p><strong>redis事务是不保证持久性的</strong>，这是因为redis持久化策略中不管是RDB还是AOF都是异步执行的，不保证持久性是出于对性能的考虑。</p></blockquote><h4 id="4、Redis事务支持隔离性吗"><a href="#4、Redis事务支持隔离性吗" class="headerlink" title="4、Redis事务支持隔离性吗"></a>4、Redis事务支持隔离性吗</h4><p>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，Redis 的事务是总是带有隔离性的。</p><h4 id="5、Redis事务保证原子性吗，支持回滚吗"><a href="#5、Redis事务保证原子性吗，支持回滚吗" class="headerlink" title="5、Redis事务保证原子性吗，支持回滚吗"></a>5、Redis事务保证原子性吗，支持回滚吗</h4><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><h4 id="6、Redis事务其他实现"><a href="#6、Redis事务其他实现" class="headerlink" title="6、Redis事务其他实现"></a>6、Redis事务其他实现</h4><ul><li>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，<br>其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完</li><li>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐</li></ul><h4 id="——集群方案——"><a href="#——集群方案——" class="headerlink" title="——集群方案——-"></a>——集群方案——-</h4><h4 id="1、主从复制"><a href="#1、主从复制" class="headerlink" title="1、主从复制"></a>1、主从复制</h4><p>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑读高并发的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的 slave 节点，从节点负责读。所有的读请求全部走从节点。这样也可以很轻松实现水平扩容，支撑读高并发。</p><p>redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发</p><p>redis replication 的核心机制</p><ul><li>redis 采用异步方式复制数据到 slave 节点，不过 redis2.8 开始，slave node 会周期性地确认自己每次复制的数据量；</li><li>一个 master node 是可以配置多个 slave node 的；</li><li>slave node 也可以连接其他的 slave node；</li><li>slave node 做复制的时候，不会 block(阻塞) master node 的正常工作；（异步所以不会block）</li><li>slave node 在做复制的时候，也不会 block 对自己的查询操作，它会用旧的数据集来提供服务；但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了；</li><li>slave node 主要用来进行横向扩容，做读写分离，扩容的 slave node 可以提高读的吞吐量。</li></ul><p>注意，如果采用了主从架构，那么建议必须开启 master node 的持久化，不建议用 slave node 作为 master node 的数据热备，因为那样的话，如果你关掉 master 的持久化，可能在 master 宕机重启的时候数据是空的，然后可能一经过复制， slave node 的数据也丢了。</p><p>另外，master 的各种备份方案，也需要做。万一本地的所有文件丢失了，从备份中挑选一份 rdb 去恢复 master，这样才能确保启动的时候，是有数据的，即使采用了后续讲解的高可用机制，slave node 可以自动接管 master node，但也可能 sentinel 还没检测到 master failure，master node 就自动重启了，还是可能导致上面所有的 slave node 数据被清空。</p><p><strong>作用：</strong></p><ul><li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li><strong>故障恢复</strong>：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li><strong>负载均衡</strong>：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li><strong>高可用基石</strong>：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul><p>主从库之间采用的是<strong>读写分离</strong>的方式。</p><ul><li>读操作：主库、从库都可以接收；</li><li>写操作：首先到主库执行，然后，主库将写操作同步给从库</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303122214522.png"></p><ul><li><strong>全量（同步）复制</strong>：比如第一次同步时</li><li><strong>增量（同步）复制</strong>：只会把主从库网络断连期间主库收到的命令，同步给从库</li></ul><p><strong>Redis 全量复制的三个阶段（redis 主从复制的核心原理）：</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303122215886.png"></p><p>当启动一个 slave node 的时候，它会发送一个 <code>PSYNC</code> 命令给 master node。</p><p>如果这是 slave node 初次连接到 master node，那么会触发一次 <code>full resynchronization</code> 全量复制。此时 master 会启动一个后台线程，开始生成一份 <code>RDB</code> 快照文件，</p><p>同时还会将从客户端 client 新收到的所有写命令缓存在内存中。<code>RDB</code> 文件生成完毕后， master 会将这个 <code>RDB</code> 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中，</p><p>接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。</p><p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</p><p><strong>第一阶段：主从库间建立连接、协商同步的过程</strong>，主要是为全量复制做准备。在这一步，从库和主库建立起连接，并告诉主库即将进行同步，主库确认回复后，主从库间就可以开始同步了。</p><p>具体来说，从库给主库发送 psync 命令，表示要进行数据同步，主库根据这个命令的参数来启动复制。psync 命令包含了主库的 runID 和复制进度 offset 两个参数。runID，是每个 Redis 实例启动时都会自动生成的一个随机 ID，用来唯一标记这个实例。当从库和主库第一次复制时，因为不知道主库的 runID，所以将 runID 设为“？”。offset，此时设为 -1，表示第一次复制。主库收到 psync 命令后，会用 FULLRESYNC 响应命令带上两个参数：主库 runID 和主库目前的复制进度 offset，返回给从库。从库收到响应后，会记录下这两个参数。这里有个地方需要注意，FULLRESYNC 响应表示第一次复制采用的全量复制，也就是说，主库会把当前所有的数据都复制给从库。</p><p><strong>第二阶段：主库将所有数据同步给从库</strong>。从库收到数据后，在本地完成数据加载。这个过程依赖于内存快照生成的 RDB 文件。</p><p>具体来说，主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。从库接收到 RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。这是因为从库在通过 replicaof 命令开始和主库同步前，可能保存了其他数据。为了避免之前数据的影响，从库需要先把当前数据库清空。在主库将数据同步给从库的过程中，主库不会被阻塞，仍然可以正常接收请求。否则，Redis 的服务就被中断了。但是，这些请求中的写操作并没有记录到刚刚生成的 RDB 文件中。为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作。</p><p><strong>第三个阶段：主库会把第二阶段执行过程中新收到的写命令，再发送给从库</strong>。具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了。</p><p><strong>Redis 增量复制的流程：</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303122304116.png"></p><p><strong>Redis 为什么主从全量复制使用RDB而不使用AOF？</strong></p><p>1、RDB文件内容是经过压缩的二进制数据（不同数据类型数据做了针对性优化），文件很小。而AOF文件记录的是每一次写操作的命令，写操作越多文件会变得很大，其中还包括很多对同一个key的多次冗余操作。在主从全量数据同步时，传输RDB文件可以尽量降低对主库机器网络带宽的消耗，从库在加载RDB文件时，一是文件小，读取整个文件的速度会很快，二是因为RDB文件存储的都是二进制数据，从库直接按照RDB协议解析还原数据即可，速度会非常快，而AOF需要依次重放每个写命令，这个过程会经历冗长的处理逻辑，恢复速度相比RDB会慢得多，所以使用RDB进行主从全量复制的成本最低。</p><p>2、假设要使用AOF做全量复制，意味着必须打开AOF功能，打开AOF就要选择文件刷盘的策略，选择不当会严重影响Redis性能。而RDB只有在需要定时备份和主从全量复制数据时才会触发生成一次快照。而在很多丢失数据不敏感的业务场景，其实是不需要开启AOF的。</p><p><strong>Redis 为什么还会有从库的从库的设计？</strong></p><p>一次全量复制中，对于主库来说，需要完成两个耗时的操作：<strong>生成 RDB 文件和传输 RDB 文件</strong>。</p><p>如果从库数量很多，而且都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量复制。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。此外，传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力。那么，有没有好的解决方法可以分担主库压力呢？</p><p>其实是有的，这就是“主 - 从 - 从”模式。</p><p>在刚才介绍的主从库模式中，所有的从库都是和主库连接，所有的全量复制也都是和主库进行的。现在，我们可以通过“主 - 从 - 从”模式<strong>将主库生成 RDB 和传输 RDB 的压力，以级联的方式分散到从库上</strong>。</p><p>简单来说，我们在部署主从集群的时候，可以手动选择一个从库（比如选择内存资源配置较高的从库），用于级联其他的从库。然后，我们可以再选择一些从库（例如三分之一的从库），在这些从库上执行如下命令，让它们和刚才所选的从库，建立起主从关系。</p><blockquote><p>replicaof 所选从库的IP 6379</p></blockquote><p>这样一来，这些从库就会知道，在进行同步时，不用再和主库进行交互了，只要和级联的从库进行写操作同步就行了，这就可以减轻主库上的压力，如下图所示：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303122306011.png"></p><h4 id="2、哨兵模式"><a href="#2、哨兵模式" class="headerlink" title="2、哨兵模式"></a>2、哨兵模式</h4><p>哨兵的核心功能是主节点的自动故障转移。下图是一个典型的哨兵集群监控的逻辑图：（自动化主从架构）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303122311211.png"></p><p><strong>哨兵的作用：</strong></p><ul><li><strong>监控（Monitoring）</strong>：哨兵会不断地检查主节点和从节点是否运作正常。</li><li><strong>自动故障转移（Automatic failover）</strong>：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。</li><li><strong>配置提供者（Configuration provider）</strong>：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。</li><li><strong>通知（Notification）</strong>：哨兵可以将故障转移的结果发送给客户端。</li></ul><p>其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移；而配置提供者和通知功能，则需要在与客户端的交互中才能体现。</p><h4 id="3、集群模式"><a href="#3、集群模式" class="headerlink" title="3、集群模式"></a>3、集群模式</h4><p>redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？</p><p><strong>简介</strong></p><p>Redis Cluster是一种服务端Sharding（分片）技术，3.0版本开始正式提供。Redis Cluster并没有使用一致性hash，而是采用slot(槽)的概念，一共分成16384个槽。将请求发送到任意节点，接收到请求的节点会将查询请求发送到正确的节点上执行</p><p><strong>方案说明</strong></p><ol><li>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽(哈希值)区间的数据，默认分配了16384 个槽位</li><li>每份数据分片会存储在多个互为主从的多节点上</li><li>数据写入先写主节点，再同步到从节点(支持配置为阻塞同步)</li><li>同一分片多个节点间的数据不保持一致性</li><li>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点</li><li>扩容时时需要需要把旧节点的数据迁移一部分到新节点</li></ol><p>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w 的端口号，比如 16379。</p><p>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，<code>gossip</code> 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><p><strong>基本通信原理，节点间的内部通信机制：</strong></p><blockquote><p>集群元数据的维护有两种方式：集中式、Gossip 协议。redis cluster 节点间采用 gossip 协议进行通信。</p></blockquote><p><strong>分布式寻址算法:</strong></p><ul><li>hash 算法（大量缓存重建）</li><li>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）</li><li>redis cluster 的 hash slot 算法</li></ul><p>优点</p><ul><li>无中心架构，支持动态扩容，对业务透明</li><li>具备Sentinel的监控和自动Failover(故障转移)能力</li><li>客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可</li><li>高性能，客户端直连redis服务，免去了proxy代理的损耗</li></ul><p>缺点</p><ul><li>运维也很复杂，数据迁移需要人工干预</li><li>只能使用0号数据库</li><li>不支持批量操作(pipeline管道操作)</li><li>分布式逻辑和存储模块耦合等</li></ul><h4 id="3-1、基于客户端分配"><a href="#3-1、基于客户端分配" class="headerlink" title="3-1、基于客户端分配"></a>3-1、基于客户端分配</h4><p>Redis Sharding是Redis Cluster出来之前，业界普遍使用的多Redis实例集群方法。其主要思想是采用哈希算法将Redis数据的key进行散列，通过hash函数，特定的key会映射到特定的Redis节点上。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool</p><p>优点</p><ul><li>优势在于非常简单，服务端的Redis实例彼此独立，相互无关联，每个Redis实例像单服务器一样运行，非常容易线性扩展，系统的灵活性很强</li></ul><p>缺点</p><ul><li>由于sharding处理放到客户端，规模进一步扩大时给运维带来挑战。</li><li>客户端sharding不支持动态增删节点。服务端Redis实例群拓扑结构有变化时，每个客户端都需要更新调整。连接不能共享，当应用规模增大时，资源浪费制约优化</li></ul><h4 id="3-2、基于代理服务器分片"><a href="#3-2、基于代理服务器分片" class="headerlink" title="3-2、基于代理服务器分片"></a>3-2、基于代理服务器分片</h4><p>客户端发送请求到一个代理组件，代理解析客户端的数据，并将请求转发至正确的节点，最后将结果回复给客户端</p><p><strong>特征</strong></p><ul><li>透明接入，业务程序不用关心后端Redis实例，切换成本低</li><li>Proxy 的逻辑和存储的逻辑是隔离的</li><li>代理层多了一次转发，性能有所损耗</li></ul><p><strong>业界开源方案</strong></p><ul><li>Twtter开源的Twemproxy</li><li>豌豆荚开源的Codis</li></ul><h4 id="4、生产环境中的-redis-是怎么部署的"><a href="#4、生产环境中的-redis-是怎么部署的" class="headerlink" title="4、生产环境中的 redis 是怎么部署的"></a>4、生产环境中的 redis 是怎么部署的</h4><p>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p><p>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>5 台机器对外提供读写，一共有 50g 内存。</p><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。</p><p>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p><h4 id="5、说说Redis哈希槽的概念"><a href="#5、说说Redis哈希槽的概念" class="headerlink" title="5、说说Redis哈希槽的概念"></a>5、说说Redis哈希槽的概念</h4><p>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</p><h4 id="6、Redis集群会有写操作丢失吗？为什么？"><a href="#6、Redis集群会有写操作丢失吗？为什么？" class="headerlink" title="6、Redis集群会有写操作丢失吗？为什么？"></a>6、Redis集群会有写操作丢失吗？为什么？</h4><p>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><h4 id="—-分区—–"><a href="#—-分区—–" class="headerlink" title="—-分区—–"></a>—-分区—–</h4><h4 id="1、Redis是单线程的，如何提高多核CPU的利用率？"><a href="#1、Redis是单线程的，如何提高多核CPU的利用率？" class="headerlink" title="1、Redis是单线程的，如何提高多核CPU的利用率？"></a>1、Redis是单线程的，如何提高多核CPU的利用率？</h4><p>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）</p><h2 id="五、分布式事务"><a href="#五、分布式事务" class="headerlink" title="五、分布式事务"></a>五、分布式事务</h2><h3 id="1、常规（放松解压版）"><a href="#1、常规（放松解压版）" class="headerlink" title="1、常规（放松解压版）"></a>1、常规（放松解压版）</h3><h4 id="1、事务的特性"><a href="#1、事务的特性" class="headerlink" title="1、事务的特性"></a>1、事务的特性</h4><p>1.原子性 要么一起成功要么一起失败</p><p>2.一致性 事务执行前后数据保持一致性状态</p><p>3.隔离性 多个事务之间是隔离的，互相不影响</p><p>4.持久性 事务一旦提交数据的改变是持久的</p><h4 id="2、分布式事务和分布式锁的区别"><a href="#2、分布式事务和分布式锁的区别" class="headerlink" title="2、分布式事务和分布式锁的区别"></a>2、分布式事务和分布式锁的区别</h4><p>分布式事务是解决流程化的问题，分布式锁是解决资源占用问题</p><h4 id="3、mysql如何实现本地事务"><a href="#3、mysql如何实现本地事务" class="headerlink" title="3、mysql如何实现本地事务"></a>3、mysql如何实现本地事务</h4><p>1.通过数据库锁的机制，保障事务的隔离性；</p><p>2.通过 Redo Log（重做日志）来，保障事务的持久性；</p><p>3.通过 Undo Log （撤销日志）来，保障事务的原子性；</p><p>4.通过 Undo Log （撤销日志）来，保障事务的一致性；</p><h4 id="4、什么是分布式事务"><a href="#4、什么是分布式事务" class="headerlink" title="4、什么是分布式事务"></a>4、什么是分布式事务</h4><p>分布式事务保证分布式系统的数据一致性，分布式系统上一次大的操作由多个小的操作完成，每个小操作都在不同的应用执行，分布式事务就是要保证这些操作要么失败，要么成功</p><h4 id="5、什么是cap定理"><a href="#5、什么是cap定理" class="headerlink" title="5、什么是cap定理"></a>5、什么是cap定理</h4><p>web服务无法同时满足cap定理</p><p>c 一致性性(Consistency):更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致，不能存在中间状态。</p><p>a 可用性(Availability):系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</p><p>p 分区容错性(Partition tolerance):即使出现单个组件无法可用，操作依然可以完成</p><h4 id="6、什么是数据一致性"><a href="#6、什么是数据一致性" class="headerlink" title="6、什么是数据一致性"></a>6、什么是数据一致性</h4><p>数据更新成功返回客户端之后，所有节点的数据保持一致，没有中间状态</p><p>强一致性：时刻保证数据一致性</p><p>最终一致性：一段时间后保证数据一致性</p><p>弱一致性：允许存在部分数据不一致</p><h4 id="7、为什么分布式系统无法同时保证一致性和可用性"><a href="#7、为什么分布式系统无法同时保证一致性和可用性" class="headerlink" title="7、为什么分布式系统无法同时保证一致性和可用性"></a>7、为什么分布式系统无法<strong>同时保证一致性和可用性</strong></h4><p>对于分布式系统而言，分区容错性是一个最基本的要求，因此基本上我们在设计分布式系统的时候只能从一致性（C）和可用性（A）之间进行取舍</p><h4 id="8、什么是base定理"><a href="#8、什么是base定理" class="headerlink" title="8、什么是base定理"></a>8、什么是base定理</h4><p>cap定理的a和p的延伸，通过牺牲一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态</p><h4 id="9、什么是刚性事务和柔性事务"><a href="#9、什么是刚性事务和柔性事务" class="headerlink" title="9、什么是刚性事务和柔性事务"></a>9、什么是刚性事务和柔性事务</h4><p>刚性事务：通常无业务改造，强一致性，原生支持回滚/隔离性，低并发，适合短事务</p><p>XA 协议（2PC、JTA、JTS）、3PC，但由于同步阻塞，处理效率低，不适合大型网站分布式场景</p><p>柔性事务：不要求强一致性，而是要求最终一致性，允许有中间状态，也就是Base理论</p><p>TCC/FMT、Saga（状态机模式、Aop模式）、本地事务消息、消息事务（半消息）</p><h4 id="10、什么是XA"><a href="#10、什么是XA" class="headerlink" title="10、什么是XA"></a>10、什么是XA</h4><p>XA ，强一致性，在整个过程中，数据一直锁住状态，即从prepare到commit、rollback的整个过程中，TM一直把持折数据库的锁，如果有其他人要修改数据库的该条数据，就必须等待锁的释放，存在长事务风险。</p><h4 id="11、分布式事务有哪些解决方案"><a href="#11、分布式事务有哪些解决方案" class="headerlink" title="11、分布式事务有哪些解决方案"></a>11、分布式事务有哪些解决方案</h4><p>一、2pc：二阶段提交，强一致性设计，引入一个事务协调者的角色来协调管理各参与者（也可称之为各本地资源）的提交和回滚，二阶段分别指的是准备和提交两个阶段。同步阻塞，存在长事务风险</p><p>【准备提交阶段-提交阶段】</p><p>二、3pc：在2pc之后多加入预提交阶段，和超时。预提交阶段主要是询问事务参与者是否能正常有条件的执行</p><p>【准备提交阶段-预提交阶段-提交阶段】</p><p>三、Tcc：2PC 和 3PC 都是数据库层面的，而 TCC 是业务层面的分布式事务，需要自己实现Try - Confirm - Cancel三个方法，存在代码入侵业务紧耦合问题</p><ul><li><p>Try 指的是预留，即资源的预留和锁定，<strong>注意是预留</strong>。</p></li><li><p>Confirm 指的是确认操作，这一步其实就是真正的执行了。</p></li><li><p>Cancel 指的是撤销操作，可以理解为把预留阶段的动作撤销了。</p></li></ul><p>四、消息事务：RocketMQ很好支持消息事务,本地执行事务前发送消息，本地事务失败则丢弃消息，本地执行成功，消息订阅方执行本地事务，成功之后消费消息。</p><h4 id="12、2pc和3pc的区别"><a href="#12、2pc和3pc的区别" class="headerlink" title="12、2pc和3pc的区别"></a>12、2pc和3pc的区别</h4><p>3pc多加入预提交阶段，和超时</p><h4 id="13、Seata-的at模式"><a href="#13、Seata-的at模式" class="headerlink" title="13、Seata 的at模式"></a>13、Seata 的at模式</h4><ul><li>Seata AT分为两阶段，主要逻辑全部在第一阶段，第二阶段主要做回滚或日志清理的工作。</li><li>会在每个数据库中维护undo_log表</li><li>@GlobalTransactional 注解表示开启分布式事务</li></ul><h4 id="14、2pc和Seata的at区别"><a href="#14、2pc和Seata的at区别" class="headerlink" title="14、2pc和Seata的at区别"></a>14、2pc和<strong>Seata的</strong>at区别</h4><p>at模式是增强版的2pc，第一阶段业务数据和回滚日志记录在同一个本地事务中提交,提交之后就会释放资源</p><h4 id="15、Seata的四种模式"><a href="#15、Seata的四种模式" class="headerlink" title="15、Seata的四种模式"></a>15、Seata的四种模式</h4><h3 id="2、进阶-1"><a href="#2、进阶-1" class="headerlink" title="2、进阶"></a>2、进阶</h3><h4 id="1、设计：1ID-3组件（seata）"><a href="#1、设计：1ID-3组件（seata）" class="headerlink" title="1、设计：1ID+3组件（seata）"></a>1、设计：1ID+3组件（seata）</h4><h5 id="1、ID"><a href="#1、ID" class="headerlink" title="1、ID"></a>1、ID</h5><p>全局唯一的事务ID：Transaction ID XID</p><h5 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h5><p>Transaction Coordinator (TC)<strong>【程序员】</strong></p><p><code>事务协调器</code>，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚；</p><p>Transaction Manager (TM)<strong>【经理】</strong></p><p><code>控制全局事务的边界</code>，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议；</p><p>Resource Manager (RM)<strong>【用户】</strong></p><p><code>控制分支事务</code>，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</p><p>XID【程序】</p><h4 id="2、处理过程"><a href="#2、处理过程" class="headerlink" title="2、处理过程"></a>2、处理过程</h4><p>1、TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</p><p>2、XID 在微服务调用链路的上下文中传播；</p><p>3、RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</p><p>4、TM 向 TC 发起针对 XID 的全局提交或回滚决议；</p><p>5、TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325203440.png"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="3、分布式事务的实现方式"><a href="#3、分布式事务的实现方式" class="headerlink" title="3、分布式事务的实现方式"></a>3、分布式事务的实现方式</h3><h4 id="1、-1"><a href="#1、-1" class="headerlink" title="1、"></a>1、</h4><h2 id="N、设计题"><a href="#N、设计题" class="headerlink" title="N、设计题"></a>N、设计题</h2><h3 id="1、MQ实现异步秒杀"><a href="#1、MQ实现异步秒杀" class="headerlink" title="1、MQ实现异步秒杀"></a>1、MQ实现异步秒杀</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>场景：一万件商品同时被一万人秒杀成功，会导致瞬间上万请求访问到订单数据库中创建订单。此时对数据库的压力就会很大。</p><p>方案：引入RocketMQ进行削峰处理。</p><p>每个请求进来在Redis中秒杀库存成功，就认为需要生成订单，此时发送一个消息到RocketMQ中去。</p><p>然后让普通订单系统从RocketMQ中消费秒杀成功的消息进行处理。对于MQ来说，这种上万的消息积压很容易就扛下来了，只要过了高峰期，订单系统很快就能消费、处理完。这个过程中不会对订单数据库造成过大的压力</p><h4 id="2、架构图"><a href="#2、架构图" class="headerlink" title="2、架构图"></a>2、架构图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202302272128319.png"></p><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><ul><li>在前端/客户端设置秒杀答题，错开大量人下单的时间，组织作弊器刷单</li><li>独立出来一套秒杀系统，专门负责处理秒杀请求</li><li>优先基于Redis进行高并发的库存扣减，一旦库存扣完则秒杀结束</li><li>秒杀结束之后，Nginx层过滤掉无效的请求，大幅度削减转发到后端的流量</li><li>瞬时生成的大量下单请求直接进入RocketMQ进行削峰，订单系统慢慢拉取消息完成下单操作</li></ul><h3 id="2、RocketMQ事务最终一致性"><a href="#2、RocketMQ事务最终一致性" class="headerlink" title="2、RocketMQ事务最终一致性"></a>2、RocketMQ事务最终一致性</h3><h4 id="1、执行流程图"><a href="#1、执行流程图" class="headerlink" title="1、执行流程图"></a>1、执行流程图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202303012201093.png"></p><p>1、首先服务 A 发送一个半事务消息(也称 half 消息)至 MQ 中。为什么要先发送一个 half 消息呢？这是为了保证服务 A 和 MQ 之间的通信正常，如果无法正常通信，则服务 A 可以直接返回一个异常，也就不用处理后面的逻辑的了。</p><p>2、如果 half 消息发送成功，MQ 收到这个 half 消息后，会返回一个 success 响应给服务 A。</p><p>3、服务 A 接收到 MQ 返回的 success 响应后，开始处理本地的业务逻辑，并提交本地事务。</p><p>4、如果服务 A 本地事务提交成功，则会向 MQ 中发送 commit，表示将 half 消息提交，MQ 就会执行第 5 步操作；如果服务 A 本地事务提交失败，则直接回滚本地事务，并向 MQ 中发送 rollback，表示将之前的 half 消息进行回滚，MQ 接收到 rollback 消息后，就会将 half 消息删除。</p><p>5、如果 commit，则将 half 消息写入到磁盘。</p><p>6、如果 MQ 长时间没有接收到 commit 或者 rollback 消息，例如：服务 A 在处理本地业务时宕机了，或者发送的 commit、rollback 因为在弱网环境，数据丢失了。那么 MQ 就会在一定时间后尝试调用服务 A 提供的一个接口，通过这个接口来判断 half 消息的状态。所以服务 A 提供的接口，需要实现的业务逻辑是：通过数据库中对应数据的状态来判断，之前的 half 消息对应的业务是否执行成功。如果 MQ 从这个接口中得知 half 消息执行成功了，那么 MQ 就会将 half 消息持久化到本地磁盘，如果得知没有执行成功，那么就会将 half 消息删除。</p><p>7、服务 B 从 MQ 中消费到对应的消息。</p><p>8、服务 B 处理本地业务逻辑，然后提交本地事务。</p><h4 id="2、问答题"><a href="#2、问答题" class="headerlink" title="2、问答题"></a>2、问答题</h4><h5 id="Q-half-消息是个啥？"><a href="#Q-half-消息是个啥？" class="headerlink" title="Q: half 消息是个啥？"></a>Q: half 消息是个啥？</h5><p>A: 它和我们正常发送的普通消息是一样的，都是存储在 MQ 中，唯一不同的是 half 在 MQ 中不会立马被消费者消费到，除非这个 half 消息被 commit 了。(至于为什么未 commit 的 half 消息无法被消费者读取到，这是因为在 MQ 内部，对于事务消息而言，在 commit 之前，会先放在一个内部队列中，只有 commit 了，才会真正将消息放在消费者能读取到的 topic 队列中)</p><h5 id="Q-为什么要先发送-half-消息？"><a href="#Q-为什么要先发送-half-消息？" class="headerlink" title="Q: 为什么要先发送 half 消息？"></a>Q: 为什么要先发送 half 消息？</h5><p>A: 前面已经解释过了，主要是为了保证服务 A 和 MQ 之间是否能正常通信，如果两者之间都不能正常通信，后面还玩个锤子，直接返回异常就可以了。</p><h5 id="Q-如果-MQ-接收到了-half-消息，但是在返回-success-响应的时候，因为网络原因，导致服务-A-没有接收到-success-响应，这个时候是什么现象？"><a href="#Q-如果-MQ-接收到了-half-消息，但是在返回-success-响应的时候，因为网络原因，导致服务-A-没有接收到-success-响应，这个时候是什么现象？" class="headerlink" title="Q: 如果 MQ 接收到了 half 消息，但是在返回 success 响应的时候，因为网络原因，导致服务 A 没有接收到 success 响应，这个时候是什么现象？"></a>Q: 如果 MQ 接收到了 half 消息，但是在返回 success 响应的时候，因为网络原因，导致服务 A 没有接收到 success 响应，这个时候是什么现象？</h5><p>A: 当服务 A 发送 half 消息后，它会等待 MQ 给自己返回 success 响应，如果没有接收到，那么服务 A 也会直接结束，返回异常，不再执行后续逻辑。不执行后续逻辑，这样服务 A 也就不会提交 commit 消息给 MQ，MQ 长时间没接收到 commit 消息，那么它就会主动回调服务 A 的一个接口，服务 A 通过接口，查询本地数据后，发现这条消息对应的业务并没有正常执行，那么就告诉 MQ，这个 half 消息不能 commit，需要 rollback，MQ 知道后，就将 half 消息进行删除。</p><p>Q: 如果服务 A 本地事务执行失败了，怎么办？</p><p>A: 服务 A 本地事务执行失败后，先对自己本地事务进行回滚，然后再向 MQ 发送 rollback 操作。</p><h5 id="Q-服务-A-本地事务提交成功或失败后，向-MQ-发送的-commit-或者-rollback-消息，因为网络问题丢失了，又该怎么处理？"><a href="#Q-服务-A-本地事务提交成功或失败后，向-MQ-发送的-commit-或者-rollback-消息，因为网络问题丢失了，又该怎么处理？" class="headerlink" title="Q: 服务 A 本地事务提交成功或失败后，向 MQ 发送的 commit 或者 rollback 消息，因为网络问题丢失了，又该怎么处理？"></a>Q: 服务 A 本地事务提交成功或失败后，向 MQ 发送的 commit 或者 rollback 消息，因为网络问题丢失了，又该怎么处理？</h5><p>A: 和上一个问题一样，MQ 长时间没有接收到 half 消息的 commit 或者 rollback 消息，MQ 会主动回调服务 A 的接口，通过这个接口来判断自己该对这个 half 消息如何处理。</p><h5 id="Q-前面说的全是事务消息的实现流程，这和事务消息如何保证数据的最终一致性有什么关系呢？"><a href="#Q-前面说的全是事务消息的实现流程，这和事务消息如何保证数据的最终一致性有什么关系呢？" class="headerlink" title="Q: 前面说的全是事务消息的实现流程，这和事务消息如何保证数据的最终一致性有什么关系呢？"></a>Q: 前面说的全是事务消息的实现流程，这和事务消息如何保证数据的最终一致性有什么关系呢？</h5><p>A: 有关系。首先，服务 A 执行本地事务并提交和向 MQ 中发送消息这是两个写操作，然后通过 RocketMQ 的事务消息，我们保证了这两个写操作要么都执行成功，要么都执行失败。然后让其他系统，如服务 B 通过消费 MQ 中的消息，然后再去执行自己本地的事务，这样到最后，服务 A 和服务 B 这两个系统的数据状态是不是达到了一致？这就是最终一致性的含义。</p><p>如果要求服务 A 和服务 B 的数据状态，在服务 A 返回给客户端之间，这两者就达到一致，这是强一致性，RocketMQ 是没法保证强一致性的。</p><p>目前通过「可靠消息来保证数据的最终一致性」是很多大厂都采用的方案，基本都是通过 MQ 和补偿机制来保证数据的一致性。（所谓的可靠消息，就是消息不丢失，如何保证 MQ 的消息不丢失，下篇文章会写，这也是面试常考题）</p><h5 id="Q-服务-B-本地事务提交失败了，怎么办？"><a href="#Q-服务-B-本地事务提交失败了，怎么办？" class="headerlink" title="Q: 服务 B 本地事务提交失败了，怎么办？"></a>Q: 服务 B 本地事务提交失败了，怎么办？</h5><p>A: 如果服务 B 本地事务提交失败了，可以进行多次重试，直到成功。如果重试多次后，还是提交失败，例如此时服务 B 对应的 DB 宕机了，这个时候只要服务 B 不向 MQ 提交本次消息的 offset 即可。如果不提交 offset，那么 MQ 会在一定时间后，继续将这条消息推送给服务 B，服务 B 就可以继续执行本地事务并提交了，直到成功。这样，依旧是保证了服务 A 和服务 B 数据的最终一致性。</p><h2 id="T、散列"><a href="#T、散列" class="headerlink" title="T、散列"></a>T、散列</h2><h3 id="1、乱打"><a href="#1、乱打" class="headerlink" title="1、乱打"></a>1、乱打</h3><blockquote><p>问题：库存为啥分为 锁定库存什么的，没有这个锁定库存的话，抢购成功，直接可销售库存 -1 ，已销售库存 + 1 不也可以嘛，为啥redis的秒杀产品 和 数据库商品表，都要加上什么锁定库存呢？</p><p>答：库存分为锁定库存和可销售库存的原因是为了避免超卖和重复销售的情况发生。在秒杀场景中，由于用户的并发量非常高，可能会导致多个用户同时下单成功，但实际上库存只有一个，如果不加锁定库存的机制，就会导致超卖的情况。而且，在用户下单之后，订单并不一定会立即支付，如果将可销售库存减去，就有可能会出现订单未支付但库存已被扣减的情况，这也是需要锁定库存的原因。所以，在秒杀场景中，为了保证库存的正确性和售后服务的质量，需要对库存进行细分和管理。</p></blockquote><blockquote><p>问题：Hystrix 为啥每次请求都用自己的线程</p><p>答：Hystrix 是一种基于线程隔离的断路器模式实现。为了实现线程隔离，Hystrix 会在每个被保护的依赖服务调用中创建一个新的线程池，每次请求都会被分配到这个线程池中的一个线程中执行。这样做的好处是，即使被保护的依赖服务调用发生故障或延迟，也不会影响其他请求的执行，从而提高了系统的可靠性和稳定性。</p><p>Hystrix 还可以对每个线程池进行配置，比如可以设置线程池的大小、队列的容量等参数，以达到更好的资源利用和负载均衡效果。因此，每次请求都使用自己的线程，可以更好地实现线程隔离，保障系统的可靠性和稳定性。</p></blockquote><blockquote><p>问题：在seata分布式事务框架下，如果一个分布式事务分表调用A、B、C服务，A、B调用成功，C调用失败，进行回滚。在回滚的时候，A、B有没有提交到数据库持久化？</p><p>答：其实已经成功了，但是seata底层自动生成用来回滚的sql，把你之前执行的数据库更新，给做一个反向操作</p></blockquote><blockquote><p>问题：这个可靠消息最终一致性的核心思想是消息防丢吗？那RabbitMQ使用手动ACK也可以实现消息防丢，因此RabbitMQ也算是能实现可靠消息最终一致性吗？ 总感觉我理解错了。<br>答：对的，其实每个MQ都有自己的功能，往后看，即使没有RocketMQ，自己做点开发，也能实现类似的效果</p></blockquote><blockquote><p>问题：基于内存分段生成订单号方案我觉得稍微复杂一些，而且还需要依靠数据库中的表来处理max id，这种内存分段的方案跟直接用redis的incr生成一个自增的数字相比有什么好处吗，直接用redis处理更简单，而且性能也很高</p><p>答：redis的操作是需要去建立网络连接的，内存操作直接在内存中获取的，性能快很多</p></blockquote><blockquote><p>问题：订单引入状态机后有什么好处呢，不用的话会有什么问题？状态机为什么要选用squirrel框架呢？<br>答：这样的好处就是将订单状态流转和对应的业务处理解耦，并且也不会再有一堆繁杂的 if…else 操作，每当需要新的订单状态流转操作的时候，可以去编写对应的一套operator和processor组件来完成，和已有业务的分离度很高。<br>squirrel框架 集成简单上手快，功能全面</p></blockquote><blockquote><p>问题：商品考核我认为就是，运营会针对线上商品的一些销售数据情况作分析，比如上架了一批薯条，这个月销量很好，那我们就多进点货物，少那就少进点，但是针对海量的商品，也不能一个个给肉眼去审核，在审核时候有配置模版啥的，引入审核配置规则，比如一个配置模版里边有商品ID=》规则模版这样的。 不知道我的理解对不对?</p><p>答：您的理解是正确的。商品考核通常是基于线上销售数据对商品进行评估和分析，以便运营人员做出更加明智的决策，比如调整商品的进货量、价格等，以提高销售业绩和利润。 对于海量商品的考核，手工审核确实是不切实际的。因此，可以引入自动化的审核配置规则，这些规则可以通过配置模板来实现，比如基于商品ID、销售额、库存、售后服务质量等指标来设计规则，从而更加高效地进行商品考核。在具体实现过程中，可以使用机器学习和数据分析技术，从大量数据中挖掘出有效规律和模式，提高商品考核的准确性和效率。</p></blockquote><blockquote><p>问题：提交订单，会发一个延迟消息，如果一直订单未支付，到了触发的时候，恰好用户点击付款了，此时并发同时过来，是不是要在支付和取消的时候都要加分布式锁，那如果真的此时取消了，是不是只能通知用户，订单已取消，请重新下单吗</p><p>答：对于订单支付的延迟消息，确保订单支付的一致性和正确性是非常重要的。在并发情况下，确保数据的一致性和正确性通常需要使用分布式锁来避免冲突。在订单取消的情况下，可以采用异步通知的方式向用户发送消息，告知订单已取消，并提醒用户重新下单。在实际实现中，可以使用消息队列等技术来实现延迟消息和异步通知，保证订单支付的正确性和用户体验。</p></blockquote><blockquote><p>问题：我看好多书都参考&lt;深入理解java内存模型&gt;一书叫了StoreStore, StoreLoad, LoadLoad, LoadStore, 但是我发现还有一种叫法叫Release Barrier , Store Barrier, Acquire Barrier? 这两种叫法以什么为基准叫的???内存屏障是怎么分类的？？？</p><p>答：内存屏障是指在编程中使用的一种同步机制，它能够确保在程序中特定位置处的内存操作按照特定顺序执行，从而保证了多线程环境下的可见性和有序性。</p><p>在Java内存模型中，内存屏障按照功能被划分为四种：Load Barrier（读屏障）、Store Barrier（写屏障）、StoreLoad Barrier（写-读屏障）和LoadStore Barrier（读-写屏障）。这些屏障的作用如下：</p><p>Load Barrier（读屏障）：它用于确保某个线程在读取某个变量时，能够看到其他线程对该变量的更新。<br>Store Barrier（写屏障）：它用于确保某个线程在修改某个变量时，对其他线程的修改可见。<br>StoreLoad Barrier（写-读屏障）：它用于确保某个线程在写入某个变量后，之后读取该变量时，能够看到其他线程在写入该变量之前的操作。<br>LoadStore Barrier（读-写屏障）：它用于确保某个线程在读取某个变量时，之前的写入操作对其他线程可见。<br>另外，Release Barrier 和 Acquire Barrier 是一种更高层次的内存屏障概念，它们是基于前面提到的四种内存屏障而定义的。Release Barrier 和 Acquire Barrier 分别用于确保某个线程的写操作对其他线程可见和确保某个线程的读操作看到其他线程的写操作。在Java内存模型中，Release Barrier 对应的是 Store Store Barrier 和 StoreLoad Barrier，而 Acquire Barrier 对应的是 LoadLoad Barrier 和 LoadStore Barrier。</p><p>内存屏障的分类是根据其功能不同来划分的，而 Release Barrier 和 Acquire Barrier 则是一种更高层次的概念，它们是基于前面提到的四种内存屏障而定义的。</p></blockquote><blockquote><p>问题2：能不能下订单的时候不推mq，在用户支付的成功后再向其他系统推送mq消息呢?如果延迟推送，用户刚下单就支付了，岂不是要等半个小时，才能收到红包系统发的红包?</p><p>答：这是两条消息，一个是你创建订单了，完了有一个订单创建通知，你可以30分钟后消费这个消息，判断你的订单是否已经超过30分钟还没支付;另外一个是如果已经支付了，有一个订单支付的消息，然后你很多系统可以消费这个消息，做后续的处理</p></blockquote><h3 id="2、闲聊"><a href="#2、闲聊" class="headerlink" title="2、闲聊"></a>2、闲聊</h3><h4 id="1、离职原因"><a href="#1、离职原因" class="headerlink" title="1、离职原因"></a>1、离职原因</h4><ul><li>薪资一方面，其次是触碰更多的事边缘技术，能成长的空间有限</li><li>虽说能碰到一些核心技术，但是成长也比较缓慢，不是长久之策</li><li>舒适圈待久了，有些迫切的危机感， 望得到更多的挑战和学习机会</li></ul><h4 id="2、-1"><a href="#2、-1" class="headerlink" title="2、"></a>2、</h4><h2 id="参考-↓"><a href="#参考-↓" class="headerlink" title="参考 ↓"></a>参考 ↓</h2><p>MySQL 执行流程 :<a href="https://blog.csdn.net/qwer123451234123/article/details/124344299">https://blog.csdn.net/qwer123451234123/article/details/124344299</a></p><p>数据结构可视化演变： <a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><p>B+Tree时间复杂度：<a href="https://blog.csdn.net/yunduanyou/article/details/128233801">https://blog.csdn.net/yunduanyou/article/details/128233801</a></p><p>1.8流操作题：<a href="https://blog.csdn.net/Thinkingcao/article/details/108664921">https://blog.csdn.net/Thinkingcao/article/details/108664921</a></p><p>MySQL中的聚簇索引和非聚簇索引：<a href="https://www.jb51.net/article/251419.htm">https://www.jb51.net/article/251419.htm</a></p><p>MySQL存储引擎：<a href="https://blog.csdn.net/promsing/article/details/126157969">https://blog.csdn.net/promsing/article/details/126157969</a></p><p>MySQL覆盖索引为什么不用回表：<a href="https://blog.csdn.net/muwenbofx/article/details/123259858">https://blog.csdn.net/muwenbofx/article/details/123259858</a></p><p>慢SQL解决：</p><p><a href="https://www.qycn.com/xzx/article/9300.html">https://www.qycn.com/xzx/article/9300.html</a></p><p><a href="https://baijiahao.baidu.com/s?id=1746620518356199899&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1746620518356199899&amp;wfr=spider&amp;for=pc</a></p><p>SpringCloud与Dubbo的区别：<a href="https://blog.csdn.net/weixin_51291483/article/details/109212137/">https://blog.csdn.net/weixin_51291483/article/details/109212137/</a></p><p>CND加速：<a href="https://www.likecs.com/show-204294177.html#sc=1128">https://www.likecs.com/show-204294177.html#sc=1128</a><br>秒杀设计：<a href="https://blog.csdn.net/weixin_42405670/article/details/118138802">https://blog.csdn.net/weixin_42405670/article/details/118138802</a><br>seata 面试题：<br>简单版：<a href="https://zhuanlan.zhihu.com/p/470281769">https://zhuanlan.zhihu.com/p/470281769</a><br>完整版：<a href="https://www.cnblogs.com/crazymakercircle/p/14375424.html#autoid-h4-6-3-0">https://www.cnblogs.com/crazymakercircle/p/14375424.html#autoid-h4-6-3-0</a></p><p>Seata的四种模式：</p><p><a href="https://blog.csdn.net/wuyongde_0922/article/details/125333625">https://blog.csdn.net/wuyongde_0922/article/details/125333625</a></p><p><a href="https://blog.csdn.net/m0_58600248/article/details/126271252">https://blog.csdn.net/m0_58600248/article/details/126271252</a></p><p>Spring 面试题：<a href="https://zhuanlan.zhihu.com/p/469797333">https://zhuanlan.zhihu.com/p/469797333</a><br>MQ面试题：<a href="https://zhuanlan.zhihu.com/p/470984789">https://zhuanlan.zhihu.com/p/470984789</a></p><p>RocketMQ事务消息如何保证数据的最终一致性：<a href="https://blog.csdn.net/qq_42093488/article/details/114677515">https://blog.csdn.net/qq_42093488/article/details/114677515</a></p><p>七种分布式事务实现：<a href="https://blog.csdn.net/qq_36963950/article/details/108909780">https://blog.csdn.net/qq_36963950/article/details/108909780</a></p><p>redis数据结构：<a href="https://blog.csdn.net/mz474920631/article/details/125200050">https://blog.csdn.net/mz474920631/article/details/125200050</a></p><p>TCC落地文章（有合集）：<a href="https://blog.csdn.net/weixin_44102992/article/details/126493034?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_44102992/article/details/126493034?spm=1001.2014.3001.5501</a></p><p>TCC和RocketMQ做分布式事务区别：<a href="https://zhuanlan.zhihu.com/p/183753774">https://zhuanlan.zhihu.com/p/183753774</a></p><p>redis之如何实现消息队列：<a href="https://blog.csdn.net/wang0907/article/details/127830591">https://blog.csdn.net/wang0907/article/details/127830591</a></p><p>分布式事务四种方案和对比：<a href="https://www.cnblogs.com/muxilaoshi/p/15429404.html">https://www.cnblogs.com/muxilaoshi/p/15429404.html</a></p><p>seata AT和XA的区别：<a href="https://www.51cto.com/article/659139.html?u_atoken=908e9399-a703-4278-8438-3e2639de1e42&amp;u_asession=01cbB_xA5flpNlOFMXMMxwrHuPaiY7SlcCklCBZ6cSuxieaFEySACzsRygqqIcFf6yX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K8PYmybX1Fb1-mAlyDPgbs_DvUNWlpfeCH_Z_6FnnXEnGBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05H6c_C18NzGqylFOgxYxOfyO9v0KX11HhF9UNuVuWDyDEKZsyCCsmlvOm93IX5QObFbfUNqdn8aQG1mI6aOKSs4Teqnna915rPIdR1R6vLUber5juuaXtMV73tq6jjhUPwNFoYr3TWz60hy4MRDOTCYy74sE94reA3i6Bm9SeXcv9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzdFdm6FtdJ6etcsGdFNqcU7WcMYF5aSO9Hw4ju-PP021VSW66CuWlZZ6ywL2zPMFnu3h9VXwMyh6PgyDIVSG1W8kCUCcLCVBKZk4XCs8ybF9IwNOrpX04BxodSt1A8Jz_TYwAep73xlDlF8jhaGyXHfBkISeMFkkfFA1VnMgsMutmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=djAEUQI/tZgGE8x5s2Rr8+QuQKg=">https://www.51cto.com/article/659139.html?u_atoken=908e9399-a703-4278-8438-3e2639de1e42&amp;u_asession=01cbB_xA5flpNlOFMXMMxwrHuPaiY7SlcCklCBZ6cSuxieaFEySACzsRygqqIcFf6yX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K8PYmybX1Fb1-mAlyDPgbs_DvUNWlpfeCH_Z_6FnnXEnGBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05H6c_C18NzGqylFOgxYxOfyO9v0KX11HhF9UNuVuWDyDEKZsyCCsmlvOm93IX5QObFbfUNqdn8aQG1mI6aOKSs4Teqnna915rPIdR1R6vLUber5juuaXtMV73tq6jjhUPwNFoYr3TWz60hy4MRDOTCYy74sE94reA3i6Bm9SeXcv9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzdFdm6FtdJ6etcsGdFNqcU7WcMYF5aSO9Hw4ju-PP021VSW66CuWlZZ6ywL2zPMFnu3h9VXwMyh6PgyDIVSG1W8kCUCcLCVBKZk4XCs8ybF9IwNOrpX04BxodSt1A8Jz_TYwAep73xlDlF8jhaGyXHfBkISeMFkkfFA1VnMgsMutmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=djAEUQI%2FtZgGE8x5s2Rr8%2BQuQKg%3D</a></p><p>金融项目seata说明：<a href="https://zhuanlan.zhihu.com/p/499041496">https://zhuanlan.zhihu.com/p/499041496</a></p><p>接口幂等性校验实现：<a href="https://blog.csdn.net/huchao_lingo/article/details/105540418">https://blog.csdn.net/huchao_lingo/article/details/105540418</a></p><p>消息队列的可靠性：<a href="https://blog.csdn.net/m0_73859807/article/details/128861716">https://blog.csdn.net/m0_73859807/article/details/128861716</a></p><p>字节跳动，高可用、不重复消费、可靠传输、顺序消费、消息堆积：<a href="https://www.cnblogs.com/binghe001/p/14443360.html">https://www.cnblogs.com/binghe001/p/14443360.html</a></p><p>站长简书：<a href="https://www.jianshu.com/p/2e995df9ccbc">https://www.jianshu.com/p/2e995df9ccbc</a></p><p>Redis面试题：</p><p><a href="https://zhuanlan.zhihu.com/p/567047691">https://zhuanlan.zhihu.com/p/567047691</a></p><p><a href="https://www.cnblogs.com/javazhiyin/p/13839357.html">https://www.cnblogs.com/javazhiyin/p/13839357.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试题" scheme="https://mykkto.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="springcloud" scheme="https://mykkto.github.io/tags/springcloud/"/>
    
    <category term="面试" scheme="https://mykkto.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JUC-深度面试题（粉丝投稿）</title>
    <link href="https://mykkto.github.io/posts/ee9ed7cb.html"/>
    <id>https://mykkto.github.io/posts/ee9ed7cb.html</id>
    <published>2023-01-04T12:39:21.000Z</published>
    <updated>2023-02-26T14:16:15.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022-JUC-复盘"><a href="#2022-JUC-复盘" class="headerlink" title="2022 JUC 复盘"></a>2022 JUC 复盘</h1><h2 id="大纲目录"><a href="#大纲目录" class="headerlink" title="大纲目录"></a>大纲目录</h2><p>[TOC]</p><h3 id="ComlpetableFutuer"><a href="#ComlpetableFutuer" class="headerlink" title="ComlpetableFutuer"></a>ComlpetableFutuer</h3><h4 id="回顾Future"><a href="#回顾Future" class="headerlink" title="回顾Future"></a>回顾Future</h4><h5 id="1future-接口就是定义操作一步执行一些方法，如获得异步任务的执行结果。取消任务的执行，判断任务是否取消，判断任务是否执行完毕。"><a href="#1future-接口就是定义操作一步执行一些方法，如获得异步任务的执行结果。取消任务的执行，判断任务是否取消，判断任务是否执行完毕。" class="headerlink" title="1future 接口就是定义操作一步执行一些方法，如获得异步任务的执行结果。取消任务的执行，判断任务是否取消，判断任务是否执行完毕。"></a>1future 接口就是定义操作一步执行一些方法，如获得异步任务的执行结果。取消任务的执行，判断任务是否取消，判断任务是否执行完毕。</h5><h5 id="2-它具体实现是FutureTask-它同时实现了-Runnable-和Future-接口-。通过它构造方法方法可以传入-callable-和runnable-具体实现类。"><a href="#2-它具体实现是FutureTask-它同时实现了-Runnable-和Future-接口-。通过它构造方法方法可以传入-callable-和runnable-具体实现类。" class="headerlink" title="2 它具体实现是FutureTask ,它同时实现了 Runnable 和Future  接口 。通过它构造方法方法可以传入 callable 和runnable 具体实现类。"></a>2 它具体实现是FutureTask ,它同时实现了 Runnable 和Future  接口 。通过它构造方法方法可以传入 callable 和runnable 具体实现类。</h5><h5 id="3-结论就是-通过futuretask-接可以现实性多线程的异步任务。"><a href="#3-结论就是-通过futuretask-接可以现实性多线程的异步任务。" class="headerlink" title="3 结论就是  通过futuretask 接可以现实性多线程的异步任务。"></a>3 结论就是  通过futuretask 接可以现实性多线程的异步任务。</h5><h5 id="4-futuretask-结合线程池提供效率"><a href="#4-futuretask-结合线程池提供效率" class="headerlink" title="4 futuretask 结合线程池提供效率"></a>4 futuretask 结合线程池提供效率</h5><h5 id="5futuretask-缺点：-1如果耗时很久的异步子线程处理完成之后-，再去调用-get方法获取计算任务程序一切都正常，反之就会导致之线程阻塞。2isDone-方法-轮询容易导致cpu空转-耗损导致更多资源占用。"><a href="#5futuretask-缺点：-1如果耗时很久的异步子线程处理完成之后-，再去调用-get方法获取计算任务程序一切都正常，反之就会导致之线程阻塞。2isDone-方法-轮询容易导致cpu空转-耗损导致更多资源占用。" class="headerlink" title="5futuretask 缺点： 1如果耗时很久的异步子线程处理完成之后 ，再去调用 get方法获取计算任务程序一切都正常，反之就会导致之线程阻塞。2isDone 方法 轮询容易导致cpu空转 耗损导致更多资源占用。"></a>5futuretask 缺点： 1如果耗时很久的异步子线程处理完成之后 ，再去调用 get方法获取计算任务程序一切都正常，反之就会导致之线程阻塞。2isDone 方法 轮询容易导致cpu空转 耗损导致更多资源占用。</h5><h5 id="6针对futuretask-的改进不需通过轮询的方式的判断的线程任务是否完成，通过回调通知函数。异步任务的步骤上的依赖（上一个步骤时下个步骤的前提）这就CompletableFutrure出来的伏笔。"><a href="#6针对futuretask-的改进不需通过轮询的方式的判断的线程任务是否完成，通过回调通知函数。异步任务的步骤上的依赖（上一个步骤时下个步骤的前提）这就CompletableFutrure出来的伏笔。" class="headerlink" title="6针对futuretask 的改进不需通过轮询的方式的判断的线程任务是否完成，通过回调通知函数。异步任务的步骤上的依赖（上一个步骤时下个步骤的前提）这就CompletableFutrure出来的伏笔。"></a>6针对futuretask 的改进不需通过轮询的方式的判断的线程任务是否完成，通过回调通知函数。异步任务的步骤上的依赖（上一个步骤时下个步骤的前提）这就CompletableFutrure出来的伏笔。</h5><h5 id="考点-CompletableFutuer-调用-runAsync-supplyAsync-等静态方法传入一个参数时候，它的线程池是什么？"><a href="#考点-CompletableFutuer-调用-runAsync-supplyAsync-等静态方法传入一个参数时候，它的线程池是什么？" class="headerlink" title="==考点   CompletableFutuer 调用 runAsync supplyAsync   等静态方法传入一个参数时候，它的线程池是什么？=="></a>==考点   CompletableFutuer 调用 <code>runAsync</code> <code>supplyAsync</code>   等静态方法传入一个参数时候，它的线程池是什么？==</h5><h6 id="在调用CompletableFutuer-静态方法默认不传入线程池的参数时候，CompletableFutuer-的ForkJoinpool-。"><a href="#在调用CompletableFutuer-静态方法默认不传入线程池的参数时候，CompletableFutuer-的ForkJoinpool-。" class="headerlink" title="在调用CompletableFutuer 静态方法默认不传入线程池的参数时候，CompletableFutuer 的ForkJoinpool 。"></a>在调用CompletableFutuer 静态方法默认不传入线程池的参数时候，CompletableFutuer 的ForkJoinpool 。</h6><h6 id="code"><a href="#code" class="headerlink" title="code"></a>code</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"come in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ruset <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ruset<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//无异常情况</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上部的计算结果时"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常情况是"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主要线程忙其他任务去了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭线程池</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="考点-CompletableFuture-种方法get-和join-两个方法的区别"><a href="#考点-CompletableFuture-种方法get-和join-两个方法的区别" class="headerlink" title="==考点 CompletableFuture  种方法get  和join 两个方法的区别=="></a>==考点 CompletableFuture  种方法get  和join 两个方法的区别==</h5><h6 id="get-方法需要声明抛异常，二join-不需要-getNow是判断线程任务是是否完成，如果完成就返回完成的状态，如果没有就返回getNow的参数的的值，Handle这个方法可以获得正常和异常的参数结果。"><a href="#get-方法需要声明抛异常，二join-不需要-getNow是判断线程任务是是否完成，如果完成就返回完成的状态，如果没有就返回getNow的参数的的值，Handle这个方法可以获得正常和异常的参数结果。" class="headerlink" title="get 方法需要声明抛异常，二join 不需要  getNow是判断线程任务是是否完成，如果完成就返回完成的状态，如果没有就返回getNow的参数的的值，Handle这个方法可以获得正常和异常的参数结果。"></a>get 方法需要声明抛异常，二join 不需要  <code>getNow</code>是判断线程任务是是否完成，如果完成就返回完成的状态，如果没有就返回getNow的参数的的值，Handle这个方法可以获得正常和异常的参数结果。</h6><h5 id="考点-CompletableFuture-是否都一直调用默认的线程池吗，thenApply-和thenApplyAsync这两个方法有啥却别"><a href="#考点-CompletableFuture-是否都一直调用默认的线程池吗，thenApply-和thenApplyAsync这两个方法有啥却别" class="headerlink" title="==考点 CompletableFuture  是否都一直调用默认的线程池吗，thenApply  和thenApplyAsync这两个方法有啥却别=="></a>==考点 CompletableFuture  是否都一直调用默认的线程池吗，thenApply  和thenApplyAsync这两个方法有啥却别==</h5><h6 id="如果有传入自定义的线程池就按照传入线程执行，当调-ThenRun-方法执行第二个任务时候，则第二个任务和第一个任务共用一个线程池，当调用ThenRunAsync-时候执行第二个任务时候，则第一任务使用自定义的线程池，从第二个任务开始使用的就是ForkJoin-线程池。-还有一种情况是-如果mian-线程执行，那么后续都由main线程执行不会切换线程池。系统优化原则减少切换，main-线程执行效率太快"><a href="#如果有传入自定义的线程池就按照传入线程执行，当调-ThenRun-方法执行第二个任务时候，则第二个任务和第一个任务共用一个线程池，当调用ThenRunAsync-时候执行第二个任务时候，则第一任务使用自定义的线程池，从第二个任务开始使用的就是ForkJoin-线程池。-还有一种情况是-如果mian-线程执行，那么后续都由main线程执行不会切换线程池。系统优化原则减少切换，main-线程执行效率太快" class="headerlink" title="如果有传入自定义的线程池就按照传入线程执行，当调    ThenRun 方法执行第二个任务时候，则第二个任务和第一个任务共用一个线程池，当调用ThenRunAsync 时候执行第二个任务时候，则第一任务使用自定义的线程池，从第二个任务开始使用的就是ForkJoin 线程池。==还有一种情况是 如果mian  线程执行，那么后续都由main线程执行不会切换线程池。系统优化原则减少切换，main 线程执行效率太快=="></a>如果有传入自定义的线程池就按照传入线程执行，当调    ThenRun 方法执行第二个任务时候，则第二个任务和第一个任务共用一个线程池，当调用ThenRunAsync 时候执行第二个任务时候，则第一任务使用自定义的线程池，从第二个任务开始使用的就是ForkJoin 线程池。==还有一种情况是 如果mian  线程执行，那么后续都由main线程执行不会切换线程池。系统优化原则减少切换，main 线程执行效率太快==</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompleateFutureAPIDome</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义线程池</span>        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前线程池是pool</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token comment">//这个之后都是默认线程池</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前线程池是 ForkJoin 线程池</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印出来是"</span><span class="token operator">+</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E4%B8%A4%E7%A7%8D%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="这两种的区别的图例"></p><h3 id="Java-锁的哪些事"><a href="#Java-锁的哪些事" class="headerlink" title="Java 锁的哪些事"></a>Java 锁的哪些事</h3><h4 id="何为悲观锁何为乐观锁"><a href="#何为悲观锁何为乐观锁" class="headerlink" title="==何为悲观锁何为乐观锁=="></a>==何为悲观锁何为乐观锁==</h4><h5 id="悲观锁概念：大白话的，线程执行的任务其他线程一定会和它抢资源，因此在获取数据之前一定是加一把锁，确保数据安全没有背修改过。规则是先加锁。"><a href="#悲观锁概念：大白话的，线程执行的任务其他线程一定会和它抢资源，因此在获取数据之前一定是加一把锁，确保数据安全没有背修改过。规则是先加锁。" class="headerlink" title="悲观锁概念：大白话的，线程执行的任务其他线程一定会和它抢资源，因此在获取数据之前一定是加一把锁，确保数据安全没有背修改过。规则是先加锁。"></a>悲观锁概念：大白话的，线程执行的任务其他线程一定会和它抢资源，因此在获取数据之前一定是加一把锁，确保数据安全没有背修改过。规则是先加锁。</h5><h5 id="乐观锁的概念：线程执行的时候认为不会有其他线程和它抢占资源（其他线程不会修改数据），所以不会加锁。规则不会加锁，但是通过版本好的迭代或者CAS-自旋来判断。（比较并交换的状态）"><a href="#乐观锁的概念：线程执行的时候认为不会有其他线程和它抢占资源（其他线程不会修改数据），所以不会加锁。规则不会加锁，但是通过版本好的迭代或者CAS-自旋来判断。（比较并交换的状态）" class="headerlink" title="乐观锁的概念：线程执行的时候认为不会有其他线程和它抢占资源（其他线程不会修改数据），所以不会加锁。规则不会加锁，但是通过版本好的迭代或者CAS 自旋来判断。（比较并交换的状态）"></a>乐观锁的概念：线程执行的时候认为不会有其他线程和它抢占资源（其他线程不会修改数据），所以不会加锁。规则不会加锁，但是通过版本好的迭代或者CAS 自旋来判断。（比较并交换的状态）</h5><h4 id="根据8-锁用例场景总结"><a href="#根据8-锁用例场景总结" class="headerlink" title="==根据8 锁用例场景总结=="></a>==根据8 锁用例场景总结==</h4><h5 id="当对象同时多个synchronzied-方法，当某一时刻内，只要一个线程去调用其中的一个synchronzied-方法-其他线都要等待它执行完毕再执行。锁是当前对象this-因为对象是jvm-堆里面"><a href="#当对象同时多个synchronzied-方法，当某一时刻内，只要一个线程去调用其中的一个synchronzied-方法-其他线都要等待它执行完毕再执行。锁是当前对象this-因为对象是jvm-堆里面" class="headerlink" title="当对象同时多个synchronzied 方法，当某一时刻内，只要一个线程去调用其中的一个synchronzied 方法 其他线都要等待它执行完毕再执行。锁是当前对象this  因为对象是jvm 堆里面"></a>当对象同时多个synchronzied 方法，当某一时刻内，只要一个线程去调用其中的一个synchronzied 方法 其他线都要等待它执行完毕再执行。锁是当前对象this  因为对象是jvm 堆里面</h5><h5 id="当没有产生竞争时候，各自拿自己锁的执行。"><a href="#当没有产生竞争时候，各自拿自己锁的执行。" class="headerlink" title="当没有产生竞争时候，各自拿自己锁的执行。"></a>当没有产生竞争时候，各自拿自己锁的执行。</h5><h5 id="static-sychronzied-锁的是当前-类型模板。class-类锁-jvm-的方法区里面-只有唯一-一个"><a href="#static-sychronzied-锁的是当前-类型模板。class-类锁-jvm-的方法区里面-只有唯一-一个" class="headerlink" title="static sychronzied   锁的是当前 类型模板。class  (类锁)  jvm 的方法区里面   只有唯一 一个"></a>static sychronzied   锁的是当前 类型模板。class  (类锁)  jvm 的方法区里面   只有唯一 一个</h5><h5 id="对-同步代码块-锁的-sychronzied-括号的对象"><a href="#对-同步代码块-锁的-sychronzied-括号的对象" class="headerlink" title="对 同步代码块 锁的 sychronzied   括号的对象"></a>对 同步代码块 锁的 sychronzied   括号的对象</h5><h5 id="总之根据锁不同，分析是对象锁还是，类锁，或者同步代码块，如果不同锁，不那么不会有竞争关系，各自执行各自互不相干扰，使用锁的原则用无锁尽量，实在不行就同代码块，在不行使用对象-，最后才考虑类锁。锁粒度大小排序-到大-无锁-lt-同步代码块-lt-对象锁-lt-类锁"><a href="#总之根据锁不同，分析是对象锁还是，类锁，或者同步代码块，如果不同锁，不那么不会有竞争关系，各自执行各自互不相干扰，使用锁的原则用无锁尽量，实在不行就同代码块，在不行使用对象-，最后才考虑类锁。锁粒度大小排序-到大-无锁-lt-同步代码块-lt-对象锁-lt-类锁" class="headerlink" title="==总之根据锁不同，分析是对象锁还是，类锁，或者同步代码块，如果不同锁，不那么不会有竞争关系，各自执行各自互不相干扰，使用锁的原则用无锁尽量，实在不行就同代码块，在不行使用对象 ，最后才考虑类锁。锁粒度大小排序 到大   无锁    < 同步代码块  < 对象锁   < 类锁=="></a>==总之根据锁不同，分析是对象锁还是，类锁，或者同步代码块，如果不同锁，不那么不会有竞争关系，各自执行各自互不相干扰，使用锁的原则用无锁尽量，实在不行就同代码块，在不行使用对象 ，最后才考虑类锁。锁粒度大小排序 到大   无锁    &lt; 同步代码块  &lt; 对象锁   &lt; 类锁==</h5><h5 id="同步代码-反编译看-是用-javap-c-查看-底层sychronized-morritorenter-和monitorexit-但为啥会两个-monitorexit"><a href="#同步代码-反编译看-是用-javap-c-查看-底层sychronized-morritorenter-和monitorexit-但为啥会两个-monitorexit" class="headerlink" title="==同步代码 反编译看 是用  javap  -c   查看  底层sychronized  morritorenter   和monitorexit,但为啥会两个 monitorexit=="></a>==同步代码 反编译看 是用  javap  -c   查看  底层sychronized  morritorenter   和monitorexit,但为啥会两个 monitorexit==</h5><h6 id="是唯一正常情况获得执行完毕释放锁，但要异常情况也可以释放锁。所以加两个的-monitorexit，二对象锁和类型-它们反编译之后可以看-ACC-SYCHRONIZED-以及类锁"><a href="#是唯一正常情况获得执行完毕释放锁，但要异常情况也可以释放锁。所以加两个的-monitorexit，二对象锁和类型-它们反编译之后可以看-ACC-SYCHRONIZED-以及类锁" class="headerlink" title="是唯一正常情况获得执行完毕释放锁，但要异常情况也可以释放锁。所以加两个的 monitorexit，二对象锁和类型 它们反编译之后可以看  ACC_SYCHRONIZED ,以及类锁"></a>是唯一正常情况获得执行完毕释放锁，但要异常情况也可以释放锁。所以加两个的 monitorexit，二对象锁和类型 它们反编译之后可以看  ACC_SYCHRONIZED ,以及类锁</h6><h4 id="公平锁-和非公平锁"><a href="#公平锁-和非公平锁" class="headerlink" title="==公平锁 和非公平锁=="></a>==公平锁 和非公平锁==</h4><h5 id="公平锁是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列"><a href="#公平锁是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列" class="headerlink" title="公平锁是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列"></a>公平锁是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列</h5><h5 id="非公平锁-是指多个线程不会-按照申请锁的顺序来获取锁，有的锁-插队，而且插队执行之后，可能会继续再来排队又插队相比其他线程不公平的抢夺cpu资源的。"><a href="#非公平锁-是指多个线程不会-按照申请锁的顺序来获取锁，有的锁-插队，而且插队执行之后，可能会继续再来排队又插队相比其他线程不公平的抢夺cpu资源的。" class="headerlink" title="非公平锁 是指多个线程不会    按照申请锁的顺序来获取锁，有的锁 插队，而且插队执行之后，可能会继续再来排队又插队相比其他线程不公平的抢夺cpu资源的。"></a>非公平锁 是指多个线程不会    按照申请锁的顺序来获取锁，有的锁 插队，而且插队执行之后，可能会继续再来排队又插队相比其他线程不公平的抢夺cpu资源的。</h5><h5 id="为啥默认是非公平的，以及什么时候用公平什么时候用非公平"><a href="#为啥默认是非公平的，以及什么时候用公平什么时候用非公平" class="headerlink" title="==为啥默认是非公平的，以及什么时候用公平什么时候用非公平=="></a>==为啥默认是非公平的，以及什么时候用公平什么时候用非公平==</h5><h6 id="首先默认使用非公平的时候，系统减少线程切换次数。提高系统的性能，对于何为使用公平和非公平的。那根据具体业务具体分析例如医院挂号的可以使用公平保证没有每个人都被叫到，非公平例如等红绿灯时候主干道的车辆比较多，需要放行车辆次数多，次要干道车流少。甚至没有车。所以使用非公平让交通流畅"><a href="#首先默认使用非公平的时候，系统减少线程切换次数。提高系统的性能，对于何为使用公平和非公平的。那根据具体业务具体分析例如医院挂号的可以使用公平保证没有每个人都被叫到，非公平例如等红绿灯时候主干道的车辆比较多，需要放行车辆次数多，次要干道车流少。甚至没有车。所以使用非公平让交通流畅" class="headerlink" title="首先默认使用非公平的时候，系统减少线程切换次数。提高系统的性能，对于何为使用公平和非公平的。那根据具体业务具体分析例如医院挂号的可以使用公平保证没有每个人都被叫到，非公平例如等红绿灯时候主干道的车辆比较多，需要放行车辆次数多，次要干道车流少。甚至没有车。所以使用非公平让交通流畅"></a>首先默认使用非公平的时候，系统减少线程切换次数。提高系统的性能，对于何为使用公平和非公平的。那根据具体业务具体分析例如医院挂号的可以使用公平保证没有每个人都被叫到，非公平例如等红绿灯时候主干道的车辆比较多，需要放行车辆次数多，次要干道车流少。甚至没有车。所以使用非公平让交通流畅</h6><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="==偏向锁=="></a>==偏向锁==</h4><h5 id="偏向锁-单线程竞争当线程A第一次竞争到锁时，通过操作修改Mark-Word中的偏向线程ID、偏向模式如果不存在其他线程竞争，那么持有偏向锁的线程将永远不需要进行同步。（-减少用户态内核态切换-）"><a href="#偏向锁-单线程竞争当线程A第一次竞争到锁时，通过操作修改Mark-Word中的偏向线程ID、偏向模式如果不存在其他线程竞争，那么持有偏向锁的线程将永远不需要进行同步。（-减少用户态内核态切换-）" class="headerlink" title="偏向锁:单线程竞争当线程A第一次竞争到锁时，通过操作修改Mark Word中的偏向线程ID、偏向模式如果不存在其他线程竞争，那么持有偏向锁的线程将永远不需要进行同步。（==减少用户态内核态切换==）"></a>偏向锁:单线程竞争当线程A第一次竞争到锁时，通过操作修改Mark Word中的偏向线程ID、偏向模式如果不存在其他线程竞争，那么持有偏向锁的线程将永远不需要进行同步。（==减少用户态内核态切换==）</h5><h5 id="作用：-当一段同步代码一直被同一个线程多次访问，由于只有一个线程那幺该线程在后续访问时便会自动获得锁。"><a href="#作用：-当一段同步代码一直被同一个线程多次访问，由于只有一个线程那幺该线程在后续访问时便会自动获得锁。" class="headerlink" title="作用： 当一段同步代码一直被同一个线程多次访问，由于只有一个线程那幺该线程在后续访问时便会自动获得锁。"></a>作用： 当一段同步代码一直被同一个线程多次访问，由于只有一个线程那幺该线程在后续访问时便会自动获得锁。</h5><h5 id="理论落地"><a href="#理论落地" class="headerlink" title="理论落地"></a>理论落地</h5><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">在实际应用运行过程中发现，“锁总是同一个线程持有，很少发生竞争”，也就是说锁总是被第一个占用他的线程拥有，这个线程就是锁的偏向线程。那么只需要在锁第一次被拥有的时候，记录下偏向线程ID。这样偏向线程就一直持有着锁(后续这个线程进入和退出这段加了同步锁的代码块时，不需要再次加锁和释放锁。而是直接会去检查锁的MarkWord里面是不是放的自己的线程ID)。如果相等，表示偏向锁是偏向于当前线程的，就不需要再尝试获得锁了，直到竞争发生才释放锁。以后每次同步，检查锁的偏向线程D与当前线程ID是否一致，如果一致直接进入同步。无需每次加锁解锁都去CAS更新对象头。如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。如果不等，表示发生了竞争，锁已经不是总是偏向于同一个线程了，这个时候会尝试使用CAS来替换MarkWord里面的线程ID为新线程的ID，竞争成功，表示之前的线程不存在了， Markword里面的线程ID为新线程的ID，锁不会升级，仍然为偏向锁，竞争失败，这时候可能需要升级变为轻量级锁，才能保证线程间公平竞争锁。注意，偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。技术实现:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="技术实现："><a href="#技术实现：" class="headerlink" title="技术实现："></a>技术实现：</h5><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">一个synchronized方法被一个线程抢到了锁时，那这个方法所在的对象就会在其所在的Mak Word中将偏向锁修改状态位，同时还会有占用前54位来存储线程指针作为标识。若该线程再次访问同一个synchronized方法时，该线程只需去对象头的Mark Word 中去判断一下是否有偏向锁指向本身的ID，无需再进入 Monitor 去竞争对象了。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="轻量锁"><a href="#轻量锁" class="headerlink" title="==轻量锁=="></a>==轻量锁==</h4><h5 id="定义：多线程竞争，但是任意时刻最多只有一个线程竞争，即不存在锁竞争太过激烈的情况，也就没有线程阻寨。"><a href="#定义：多线程竞争，但是任意时刻最多只有一个线程竞争，即不存在锁竞争太过激烈的情况，也就没有线程阻寨。" class="headerlink" title="定义：多线程竞争，但是任意时刻最多只有一个线程竞争，即不存在锁竞争太过激烈的情况，也就没有线程阻寨。"></a>定义：多线程竞争，但是任意时刻最多只有一个线程竞争，即不存在锁竞争太过激烈的情况，也就没有线程阻寨。</h5><h5 id="作用：有线程来参与锁的竞争，但是获取锁的冲突时间极短本质就是自旋锁CAS"><a href="#作用：有线程来参与锁的竞争，但是获取锁的冲突时间极短本质就是自旋锁CAS" class="headerlink" title="作用：有线程来参与锁的竞争，但是获取锁的冲突时间极短本质就是自旋锁CAS"></a>作用：有线程来参与锁的竞争，但是获取锁的冲突时间极短本质就是自旋锁CAS</h5><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="==重量级锁=="></a>==重量级锁==</h4><h5 id="重量级锁原理"><a href="#重量级锁原理" class="headerlink" title="重量级锁原理"></a>重量级锁原理</h5><h6 id="指向互斥量-重量级锁-的指针"><a href="#指向互斥量-重量级锁-的指针" class="headerlink" title="指向互斥量 (重量级锁)的指针"></a>指向互斥量 (重量级锁)的指针</h6><p>Java中synchronized的重量级锁，是基于进入和退出Monitor对象实现的。在编译时会将同步块的开始位置插入monitor enter指令，在结束位置插入monitor exit指令。<br>当线程执行到monitor enter指令时，会尝试获取对象所对应的Monitor所有权，如果获取到了，即获取到了锁，会在Monitor的owner中存放当前线程的id，这样它将处于锁定状态，除非退出同步块，否则其他线程无法获取到这个Monitor。</p><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="==自旋锁=="></a>==自旋锁==</h4><h5 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁 (spinlock)"></a>自旋锁 (spinlock)</h5><h5 id="CAS-是实现自旋锁的基础，CAS-利用-CPU-指令保证了操作的原子性，以达到锁的效果，至于自旋呢，看字面意思也很明白，自己旋转。是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取。这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU"><a href="#CAS-是实现自旋锁的基础，CAS-利用-CPU-指令保证了操作的原子性，以达到锁的效果，至于自旋呢，看字面意思也很明白，自己旋转。是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取。这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU" class="headerlink" title="CAS 是实现自旋锁的基础，CAS 利用 CPU 指令保证了操作的原子性，以达到锁的效果，至于自旋呢，看字面意思也很明白，自己旋转。是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取。这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU"></a>CAS 是实现自旋锁的基础，CAS 利用 CPU 指令保证了操作的原子性，以达到锁的效果，至于自旋呢，看字面意思也很明白，自己旋转。是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取。这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</h5><h5 id="CAS-是实现自旋锁的基础，自旋翻译成人话就是循环，一般是用一个无限循环实现。这样一来，一个无限循环中，执行一个CAS-操作，"><a href="#CAS-是实现自旋锁的基础，自旋翻译成人话就是循环，一般是用一个无限循环实现。这样一来，一个无限循环中，执行一个CAS-操作，" class="headerlink" title="CAS 是实现自旋锁的基础，自旋翻译成人话就是循环，一般是用一个无限循环实现。这样一来，一个无限循环中，执行一个CAS 操作，"></a>CAS 是实现自旋锁的基础，自旋翻译成人话就是循环，一般是用一个无限循环实现。这样一来，一个无限循环中，执行一个CAS 操作，</h5><p>当操作成功返回 true 时，循环结束;<br>当返回 false 时，接着执行循环，继续尝试 CAS 操作，直到返回 true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** * 实现一个自旋锁，复习CAS思想 * 自旋锁好处: 循坏比较获取没有类似wait的阻塞 * 水 * 通过CAS操作完成自旋锁，A线程先进来调用myLock方法自己持有锁5秒钟，B随后进来后发现￥当前有线程持有锁，所以只能通过自旋等待，直到A释放锁后B随后抢到。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSprnk</span> <span class="token punctuation">{</span>    <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> atomicReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义类的原子引用</span>    <span class="token comment">/**     * 加锁方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockAtmot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" come  in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断 是否有线程，没有就把当前放进去</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解锁方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unLockAtomit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自旋看是否当前线程  是置空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"解锁成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LockSprnk</span> lockSprnk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockSprnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>            lockSprnk<span class="token punctuation">.</span><span class="token function">lockAtmot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//休眠5毫秒</span>            <span class="token keyword">try</span><span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            lockSprnk<span class="token punctuation">.</span><span class="token function">unLockAtomit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//暂停5秒</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>            lockSprnk<span class="token punctuation">.</span><span class="token function">lockAtmot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lockSprnk<span class="token punctuation">.</span><span class="token function">unLockAtomit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="CAS-的缺点：CPU的空转-以及-ABA-的问题（这又会引出时间戳的原子类）"><a href="#CAS-的缺点：CPU的空转-以及-ABA-的问题（这又会引出时间戳的原子类）" class="headerlink" title="CAS 的缺点：CPU的空转 以及 ABA 的问题（这又会引出时间戳的原子类）"></a>CAS 的缺点：CPU的空转 以及 ABA 的问题（这又会引出时间戳的原子类）</h6><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="==读写锁=="></a>==读写锁==</h4><h5 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h5><h5 id="读写锁定义为-一个资源能够被多个读线程访问，或者被一个写线程访问，但是不能同时存在读写线程。（读写互斥，读读共享，读是独占锁读未完成写锁抢不到）"><a href="#读写锁定义为-一个资源能够被多个读线程访问，或者被一个写线程访问，但是不能同时存在读写线程。（读写互斥，读读共享，读是独占锁读未完成写锁抢不到）" class="headerlink" title="读写锁定义为:一个资源能够被多个读线程访问，或者被一个写线程访问，但是不能同时存在读写线程。（读写互斥，读读共享，读是独占锁读未完成写锁抢不到）"></a>读写锁定义为:一个资源能够被多个读线程访问，或者被一个写线程访问，但是不能同时存在读写线程。（读写互斥，读读共享，读是独占锁读未完成写锁抢不到）</h5><h4 id="邮戳锁"><a href="#邮戳锁" class="headerlink" title="==邮戳锁=="></a>==邮戳锁==</h4><h5 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h5><h6 id="ReentrantReadWriteLock的读锁被占用的时候，其他线程尝试获取写锁的时候会被阻塞。但是，StampedLock采取乐观获取后，其他线程尝试获取写锁时不会被阻塞，这其实是对读锁的优化，所以，在获取乐观读锁后，还需要对结果进行校验。"><a href="#ReentrantReadWriteLock的读锁被占用的时候，其他线程尝试获取写锁的时候会被阻塞。但是，StampedLock采取乐观获取后，其他线程尝试获取写锁时不会被阻塞，这其实是对读锁的优化，所以，在获取乐观读锁后，还需要对结果进行校验。" class="headerlink" title="ReentrantReadWriteLock的读锁被占用的时候，其他线程尝试获取写锁的时候会被阻塞。但是，StampedLock采取乐观获取后，其他线程尝试获取写锁时不会被阻塞，这其实是对读锁的优化，所以，在获取乐观读锁后，还需要对结果进行校验。"></a>ReentrantReadWriteLock的读锁被占用的时候，其他线程尝试获取写锁的时候会被阻塞。但是，StampedLock采取乐观获取后，其他线程尝试获取写锁时不会被阻塞，这其实是对读锁的优化，所以，在获取乐观读锁后，还需要对结果进行校验。</h6><h4 id="锁的降级"><a href="#锁的降级" class="headerlink" title="==锁的降级=="></a>==锁的降级==</h4><h5 id="写锁的降级，降级成为了读锁"><a href="#写锁的降级，降级成为了读锁" class="headerlink" title="写锁的降级，降级成为了读锁"></a>写锁的降级，降级成为了读锁</h5><ul><li>1 如果同一个线程持有了写锁，在没有释放写锁的情况下，它还可以继续获得读锁。这就是写锁的降级，降级成为了读锁。</li><li>2 规则惯例，先获取写锁，然后获取读锁，再释放写锁的 次序</li><li> 3 如果释放了写锁，那么就完全转换为读锁。</li></ul><h4 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="==可重入锁（递归锁）=="></a>==可重入锁（递归锁）==</h4><h5 id="指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。（前提获得同一把锁）"><a href="#指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。（前提获得同一把锁）" class="headerlink" title="指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。（前提获得同一把锁）"></a>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。（前提获得同一把锁）</h5><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E9%80%92%E5%BD%92%E9%94%81.png" alt="递归锁"></p><h5 id="可重入锁-分为隐式锁-和-显示锁-：-sychronized-关键字-使用的锁-默认可重入锁，显示锁-reentrLock-的lock-和unlock-锁的要成对出现，不然导致不能有效释放锁以至于线程被阻塞。"><a href="#可重入锁-分为隐式锁-和-显示锁-：-sychronized-关键字-使用的锁-默认可重入锁，显示锁-reentrLock-的lock-和unlock-锁的要成对出现，不然导致不能有效释放锁以至于线程被阻塞。" class="headerlink" title="可重入锁  分为隐式锁 和 显示锁 ： sychronized 关键字 使用的锁 默认可重入锁，显示锁      reentrLock   的lock 和unlock 锁的要成对出现，不然导致不能有效释放锁以至于线程被阻塞。"></a>可重入锁  分为隐式锁 和 显示锁 ： sychronized 关键字 使用的锁 默认可重入锁，显示锁      reentrLock   的lock 和unlock 锁的要成对出现，不然导致不能有效释放锁以至于线程被阻塞。</h5><h4 id="死锁"><a href="#死锁" class="headerlink" title="==死锁=="></a>==死锁==</h4><h5 id="死锁的概念：两个或两个的线程争夺资源，而造成的相互等待"><a href="#死锁的概念：两个或两个的线程争夺资源，而造成的相互等待" class="headerlink" title="死锁的概念：两个或两个的线程争夺资源，而造成的相互等待"></a>死锁的概念：两个或两个的线程争夺资源，而造成的相互等待</h5><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E6%AD%BB%E9%94%81%E7%8E%B0%E8%B1%A1.png" alt="死锁现象"></p><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Object</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span>  <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" A想想拿到b锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" B想拿到A锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span>  <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" B想想拿到A锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" A想拿到B锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="死锁的诊断-JPS-l-列所有的线程id-再根据-jstack-线程id好诊断"><a href="#死锁的诊断-JPS-l-列所有的线程id-再根据-jstack-线程id好诊断" class="headerlink" title="死锁的诊断 JPS  -l  列所有的线程id    再根据 jstack  线程id好诊断"></a>死锁的诊断 JPS  -l  列所有的线程id    再根据 jstack  线程id好诊断</h5><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E6%AD%BB%E9%94%81%E8%AF%8A%E6%96%AD.png" alt="死锁图例1"></p><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E6%AD%BB%E9%94%812.png" alt="死锁图例2"></p><h5 id="图形化诊断-死锁"><a href="#图形化诊断-死锁" class="headerlink" title="图形化诊断 死锁"></a>图形化诊断 死锁</h5><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%AD%BB%E9%94%811.png" alt="图形化死锁1"></p><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%AD%BB%E9%94%812.png" alt="图形化死锁2"></p><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%AD%BB%E9%94%814.png" alt="图形化死锁4"></p><h3 id="线程中断机制"><a href="#线程中断机制" class="headerlink" title="线程中断机制"></a>线程中断机制</h3><h5 id="考点：线程如何中断运行-请用简单的code-编写。当调用-interrupt-是否马上停止线程呢-，对比一下isinterrupt和静态interrupt他们的方法有什么区别"><a href="#考点：线程如何中断运行-请用简单的code-编写。当调用-interrupt-是否马上停止线程呢-，对比一下isinterrupt和静态interrupt他们的方法有什么区别" class="headerlink" title="==考点：线程如何中断运行 ,请用简单的code 编写。当调用  interrupt()是否马上停止线程呢   ，对比一下isinterrupt和静态interrupt他们的方法有什么区别=="></a>==考点：线程如何中断运行 ,请用简单的code 编写。当调用  interrupt()是否马上停止线程呢   ，对比一下isinterrupt和静态interrupt他们的方法有什么区别==</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//是否中断</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程+"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//睡眠中断异常的 导致死循环 一定要再调用一次，把标志位改过程（重点）原因是把t2中断标志位给清除了，只有InterruptedException 异常就会中断标志位标识</span>              <span class="token punctuation">}</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程没有停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// System.out.println(Thread.currentThread().isInterrupted());</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>          <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MICROSECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token punctuation">{</span>          t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//中断 调用这个方法 变更中断的标志位（中断是一种协商机制，不是立即停止线程的活得，而是被中断的线程自己停止）</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="中断的总结-具体来说，当对一个线程，调用-interrupt-时"><a href="#中断的总结-具体来说，当对一个线程，调用-interrupt-时" class="headerlink" title="中断的总结:具体来说，当对一个线程，调用 interrupt() 时:"></a>中断的总结:具体来说，当对一个线程，调用 interrupt() 时:</h6><p>1如果线程处于正常活动状态，那么会将该线程的中断标志设置为 true，仅此而已。被设置中断标志的线程将继续正常运行，不受影响。所以，interrupt() 并不能真正的中断线程，需要被调用的线程自己进行配合才行<br>2如果线程处于被阻塞状态(例如处于sleep,wait, join 等状态)，在别的线程中调用当前线程对象的interrupt方法,那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。</p><h6 id="中断interrupt-的静态-方法他-会中两个事情，一个测试当前线程是否被中断了，还有一个是将当前线程中断把标志位改为false-。清除线程的中断状态-，实例方法isterrup-和interrup-它们底层都是调用的-相同的方法，只不过静态方法主动清除标志位。"><a href="#中断interrupt-的静态-方法他-会中两个事情，一个测试当前线程是否被中断了，还有一个是将当前线程中断把标志位改为false-。清除线程的中断状态-，实例方法isterrup-和interrup-它们底层都是调用的-相同的方法，只不过静态方法主动清除标志位。" class="headerlink" title="中断interrupt 的静态 方法他 会中两个事情，一个测试当前线程是否被中断了，还有一个是将当前线程中断把标志位改为false 。清除线程的中断状态 ，实例方法isterrup  和interrup 它们底层都是调用的 相同的方法，只不过静态方法主动清除标志位。"></a>中断interrupt 的静态 方法他 会中两个事情，一个测试当前线程是否被中断了，还有一个是将当前线程中断把标志位改为false 。清除线程的中断状态 ，实例方法isterrup  和interrup 它们底层都是调用的 相同的方法，只不过静态方法主动清除标志位。</h6><h3 id="LockSuppot"><a href="#LockSuppot" class="headerlink" title="LockSuppot"></a>LockSuppot</h3><h4 id="LockSupport-是前面的对线程的等待和唤醒-的优化，前面Object自带的-wait-和notfiy-Lock中的-await-和signal"><a href="#LockSupport-是前面的对线程的等待和唤醒-的优化，前面Object自带的-wait-和notfiy-Lock中的-await-和signal" class="headerlink" title="LockSupport 是前面的对线程的等待和唤醒 的优化，前面Object自带的 wait 和notfiy      Lock中的 await 和signal"></a>LockSupport 是前面的对线程的等待和唤醒 的优化，前面Object自带的 wait 和notfiy      Lock中的 await 和signal</h4><h4 id="sychorizied-里面-wait-notfiy-需要成对出现，并且放在同步sychcorized-修饰的代码块里面。否则也会报异常。condition-中-lock-await-和signal-也是一样要-lock-unlock-里面的-顺序也不能调换。由此优化的LockSupport-背景。"><a href="#sychorizied-里面-wait-notfiy-需要成对出现，并且放在同步sychcorized-修饰的代码块里面。否则也会报异常。condition-中-lock-await-和signal-也是一样要-lock-unlock-里面的-顺序也不能调换。由此优化的LockSupport-背景。" class="headerlink" title="sychorizied    里面 wait  notfiy  需要成对出现，并且放在同步sychcorized 修饰的代码块里面。否则也会报异常。condition 中 lock await 和signal 也是一样要 lock   unlock 里面的 顺序也不能调换。由此优化的LockSupport  背景。"></a>sychorizied    里面 wait  notfiy  需要成对出现，并且放在同步sychcorized 修饰的代码块里面。否则也会报异常。condition 中 lock await 和signal 也是一样要 lock   unlock 里面的 顺序也不能调换。由此优化的LockSupport  背景。</h4><h5 id="LockSupport是用来创建锁和其他同步类的基本线程阻寒原语。一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结-ockSupport是LockSupport调用的Unsafe中的native代码。"><a href="#LockSupport是用来创建锁和其他同步类的基本线程阻寒原语。一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结-ockSupport是LockSupport调用的Unsafe中的native代码。" class="headerlink" title="LockSupport是用来创建锁和其他同步类的基本线程阻寒原语。一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结_ockSupport是LockSupport调用的Unsafe中的native代码。"></a>LockSupport是用来创建锁和其他同步类的基本线程阻寒原语。一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结_ockSupport是LockSupport调用的Unsafe中的native代码。</h5><h5 id="ockSupport-提供park-和unpark-方法实现阻塞线程和解除线程阻塞的过程ockSupport和每个使用它的线程都有一个许可-permit-关联。每个线程都有一个相关的permit-permit最多只有一个，重复调用unpark也不会积累凭证。"><a href="#ockSupport-提供park-和unpark-方法实现阻塞线程和解除线程阻塞的过程ockSupport和每个使用它的线程都有一个许可-permit-关联。每个线程都有一个相关的permit-permit最多只有一个，重复调用unpark也不会积累凭证。" class="headerlink" title="_ockSupport 提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程ockSupport和每个使用它的线程都有一个许可(permit)关联。每个线程都有一个相关的permit, permit最多只有一个，重复调用unpark也不会积累凭证。"></a>_ockSupport 提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程ockSupport和每个使用它的线程都有一个许可(permit)关联。每个线程都有一个相关的permit, permit最多只有一个，重复调用unpark也不会积累凭证。</h5><h5 id="形象的理解"><a href="#形象的理解" class="headerlink" title="形象的理解"></a>形象的理解</h5><h5 id="线程阻塞需要消耗凭证-permit-，这个凭证最多只有1个。当调用-park方法时-如果有凭证，则会直接消耗掉这个凭证然后正常退出"><a href="#线程阻塞需要消耗凭证-permit-，这个凭证最多只有1个。当调用-park方法时-如果有凭证，则会直接消耗掉这个凭证然后正常退出" class="headerlink" title="线程阻塞需要消耗凭证(permit)，这个凭证最多只有1个。当调用 park方法时 如果有凭证，则会直接消耗掉这个凭证然后正常退出;"></a>线程阻塞需要消耗凭证(permit)，这个凭证最多只有1个。当调用 park方法时 如果有凭证，则会直接消耗掉这个凭证然后正常退出;</h5><h5 id="如果无凭证，就必须阻寒等待凭证可用"><a href="#如果无凭证，就必须阻寒等待凭证可用" class="headerlink" title="如果无凭证，就必须阻寒等待凭证可用;"></a>如果无凭证，就必须阻寒等待凭证可用;</h5><h5 id="而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。"><a href="#而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。" class="headerlink" title="而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。"></a>而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。</h5><h5 id="考点-为什么可以突破wait-notify的原有调用顺序-为什么唤醒两次后阻塞两次"><a href="#考点-为什么可以突破wait-notify的原有调用顺序-为什么唤醒两次后阻塞两次" class="headerlink" title="==考点 为什么可以突破wait/notify的原有调用顺序? 为什么唤醒两次后阻塞两次=="></a>==考点 为什么可以突破wait/notify的原有调用顺序? 为什么唤醒两次后阻塞两次==</h5><h6 id="为什么可以突破wait-notify的原有调用顺序"><a href="#为什么可以突破wait-notify的原有调用顺序" class="headerlink" title="为什么可以突破wait/notify的原有调用顺序?"></a>为什么可以突破wait/notify的原有调用顺序?</h6><h6 id="因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。"><a href="#因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。" class="headerlink" title="因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。"></a>因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。</h6><h6 id="先发放了凭证后续可以畅通无阻。"><a href="#先发放了凭证后续可以畅通无阻。" class="headerlink" title="先发放了凭证后续可以畅通无阻。"></a>先发放了凭证后续可以畅通无阻。</h6><h6 id="为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程-因为凭证的数量最多为-1，连续调用两次-unpark-和-调用一次-unpark-效果一样，只会增加一个凭"><a href="#为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程-因为凭证的数量最多为-1，连续调用两次-unpark-和-调用一次-unpark-效果一样，只会增加一个凭" class="headerlink" title="为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程?因为凭证的数量最多为 1，连续调用两次 unpark 和 调用一次 unpark 效果一样，只会增加一个凭"></a>为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程?因为凭证的数量最多为 1，连续调用两次 unpark 和 调用一次 unpark 效果一样，只会增加一个凭</h6><h6 id="证-而调用两次-park却需要消费两个凭证，证不够，不能放行。"><a href="#证-而调用两次-park却需要消费两个凭证，证不够，不能放行。" class="headerlink" title="证:而调用两次 park却需要消费两个凭证，证不够，不能放行。"></a>证:而调用两次 park却需要消费两个凭证，证不够，不能放行。</h6><h5 id="为什么wait必须写在同步代码块中？"><a href="#为什么wait必须写在同步代码块中？" class="headerlink" title="==为什么wait必须写在同步代码块中？=="></a>==为什么wait必须写在同步代码块中？==</h5><h6 id="避免-CPU-切换到其他程，而其他线程又提前执行了-notify-方法，那这样就达不到我们的预期（先-wait-再由其他程来唤醒），所以需要一个同步锁来保护"><a href="#避免-CPU-切换到其他程，而其他线程又提前执行了-notify-方法，那这样就达不到我们的预期（先-wait-再由其他程来唤醒），所以需要一个同步锁来保护" class="headerlink" title="避免 CPU 切换到其他程，而其他线程又提前执行了 notify 方法，那这样就达不到我们的预期（先 wait 再由其他程来唤醒），所以需要一个同步锁来保护"></a>避免 CPU 切换到其他程，而其他线程又提前执行了 notify 方法，那这样就达不到我们的预期（先 wait 再由其他程来唤醒），所以需要一个同步锁来保护</h6><h5 id="sleep-与wait-的区别？"><a href="#sleep-与wait-的区别？" class="headerlink" title="==sleep()与wait()的区别？=="></a>==sleep()与wait()的区别？==</h5><h6 id="主要有四个方面区别"><a href="#主要有四个方面区别" class="headerlink" title="主要有四个方面区别"></a>主要有四个方面区别</h6><ul><li>sleep() 属于Thread类，wait() 属于Object类</li><li>sleep() 不会释放对象锁，wait() 会释放对象锁</li><li>sleep() 必须指定时间，wait() 可指定也可以不指定</li><li>sleep() 可以使用在任何代码块，wait() 必须在同步方法或同步代码块中使用</li></ul><h5 id="为什么wait要定义在Object中而不定义在Thread中？"><a href="#为什么wait要定义在Object中而不定义在Thread中？" class="headerlink" title="==为什么wait要定义在Object中而不定义在Thread中？=="></a>==为什么wait要定义在Object中而不定义在Thread中？==</h5><h6 id="Java的锁是对象级别的，不是线程级别的"><a href="#Java的锁是对象级别的，不是线程级别的" class="headerlink" title="Java的锁是对象级别的，不是线程级别的"></a>Java的锁是对象级别的，不是线程级别的</h6><h6 id="sleep-休眠指的就是线程休眠，所以在Thread类"><a href="#sleep-休眠指的就是线程休眠，所以在Thread类" class="headerlink" title="sleep() 休眠指的就是线程休眠，所以在Thread类"></a>sleep() 休眠指的就是线程休眠，所以在Thread类</h6><h5 id="Sychronized和lock有什么区别？用新的Lock有什么好处？举例说说"><a href="#Sychronized和lock有什么区别？用新的Lock有什么好处？举例说说" class="headerlink" title="==Sychronized和lock有什么区别？用新的Lock有什么好处？举例说说=="></a>==Sychronized和lock有什么区别？用新的Lock有什么好处？举例说说==</h5><ul><li><p>原始构成：</p><ul><li><p>Synchronized是关键字属于JVM层面monitorenter (底层是通过monitor对象来完成，其实和wait/notify等方法也依赖于monitor对象只有在同步块或者方法中才能调用wait/notify等方法)monitorExit(有两个，一个是正常退出一个是异常退出)</p></li><li><p>Lock是具体类 (java.utilconcurrentlocks.Lock) 是api层面的锁</p></li></ul></li><li><p>使用方法：</p><ul><li>synchronized不需要用户去手动释放锁，当synchronized代码执行完成后系统会自动让线程释放对锁的占用</li><li>ReentrantLock则需要用户去手动释放锁，若没有主动释放锁，就有可能导致出现死锁现象需要lock()和unlock()方法配合try/finally语句块来完成</li></ul></li><li><p>等待是否可中断</p><ul><li>Synchronized不可中断，除非抛出异常或者正常运行完成</li><li>除非抛出异常或者正常运行完成</li><li>设置超时方法tryLock(long timeoutTimeUnit unit)</li><li>lockInterruptibly()放代码块中，调用interrupt0)方法可中断</li></ul></li><li><p>锁绑定多个条件Condition</p><ul><li>synchronized没有</li><li>ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized要么随机唤醒一个先后曾要么唤醒全部线程。</li></ul></li></ul><h3 id="java内存模型-之-jMM"><a href="#java内存模型-之-jMM" class="headerlink" title="java内存模型 之 jMM"></a>java内存模型 之 jMM</h3><h4 id="因为有这么多级的缓存-cpu和物理主内存的速度不一致的-CPU的运行并不是直接操作内存而是先把内存里边的数据读到缓存，而内存的读和写操作的时候就会造成不一致的问题"><a href="#因为有这么多级的缓存-cpu和物理主内存的速度不一致的-CPU的运行并不是直接操作内存而是先把内存里边的数据读到缓存，而内存的读和写操作的时候就会造成不一致的问题" class="headerlink" title="因为有这么多级的缓存(cpu和物理主内存的速度不一致的).CPU的运行并不是直接操作内存而是先把内存里边的数据读到缓存，而内存的读和写操作的时候就会造成不一致的问题"></a>因为有这么多级的缓存(cpu和物理主内存的速度不一致的).CPU的运行并不是直接操作内存而是先把内存里边的数据读到缓存，而内存的读和写操作的时候就会造成不一致的问题</h4><h4 id="jVM规范中试图定义一种Java内存模型-java-Memory-Model，简称JMM-来屏蔽掉各种硬件和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。所以，推导出我们需要知道JMM"><a href="#jVM规范中试图定义一种Java内存模型-java-Memory-Model，简称JMM-来屏蔽掉各种硬件和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。所以，推导出我们需要知道JMM" class="headerlink" title="jVM规范中试图定义一种Java内存模型 java Memory Model，简称JMM)来屏蔽掉各种硬件和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。所以，推导出我们需要知道JMM"></a>jVM规范中试图定义一种Java内存模型 java Memory Model，简称JMM)来屏蔽掉各种硬件和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。所以，推导出我们需要知道JMM</h4><h4 id="JMM-Java内存模型Java-Memory-Mode，简称JMM-本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组现范定义了程序中-尤其是多线程-各人变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关建技术点都是围绕多线程的原子性、可见性和有序性展开的。"><a href="#JMM-Java内存模型Java-Memory-Mode，简称JMM-本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组现范定义了程序中-尤其是多线程-各人变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关建技术点都是围绕多线程的原子性、可见性和有序性展开的。" class="headerlink" title="JMM(Java内存模型Java Memory Mode，简称JMM)本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组现范定义了程序中(尤其是多线程)各人变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关建技术点都是围绕多线程的原子性、可见性和有序性展开的。"></a>JMM(Java内存模型Java Memory Mode，简称JMM)本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组现范定义了程序中(尤其是多线程)各人变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关建技术点都是围绕多线程的原子性、可见性和有序性展开的。</h4><h4 id="原则"><a href="#原则" class="headerlink" title="原则:"></a>原则:</h4><h5 id="JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的"><a href="#JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的" class="headerlink" title="JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的"></a>JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的</h5><h4 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛?"></a>能干嘛?</h4><h4 id="通过JMM来实现线程和主内存之间的抽象关系。屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。"><a href="#通过JMM来实现线程和主内存之间的抽象关系。屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。" class="headerlink" title="通过JMM来实现线程和主内存之间的抽象关系。屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。"></a>通过JMM来实现线程和主内存之间的抽象关系。屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果。</h4><h5 id="考点-JMM-的三大特性是什么请对这三大特性-做一个说明吧"><a href="#考点-JMM-的三大特性是什么请对这三大特性-做一个说明吧" class="headerlink" title="考点==JMM 的三大特性是什么请对这三大特性 做一个说明吧=="></a>考点==JMM 的三大特性是什么请对这三大特性 做一个说明吧==</h5><h6 id="1-可见性-：当一个线程更改了共享变量的值，其他线程能否立即知道共享变量发生了变更。JMM规定了共享变量存储在主内存中。系统主内存中共享变量被写入的时机不确定，多线程的环境下容易产生脏读。每个线程都有自己的工作内存，工作内存中保存了该线程使用变量的主内存副本拷贝，每个线程只能操作自己工作内存中的变量，不能直接读取主内存中的变量。不同线程不能直接访问对方工作内存中的变量，线程变量值的传递需要通过主内存来完成"><a href="#1-可见性-：当一个线程更改了共享变量的值，其他线程能否立即知道共享变量发生了变更。JMM规定了共享变量存储在主内存中。系统主内存中共享变量被写入的时机不确定，多线程的环境下容易产生脏读。每个线程都有自己的工作内存，工作内存中保存了该线程使用变量的主内存副本拷贝，每个线程只能操作自己工作内存中的变量，不能直接读取主内存中的变量。不同线程不能直接访问对方工作内存中的变量，线程变量值的传递需要通过主内存来完成" class="headerlink" title="1. ==可见性 ：当一个线程更改了共享变量的值，其他线程能否立即知道共享变量发生了变更。JMM规定了共享变量存储在主内存中。系统主内存中共享变量被写入的时机不确定，多线程的环境下容易产生脏读。每个线程都有自己的工作内存，工作内存中保存了该线程使用变量的主内存副本拷贝，每个线程只能操作自己工作内存中的变量，不能直接读取主内存中的变量。不同线程不能直接访问对方工作内存中的变量，线程变量值的传递需要通过主内存来完成=="></a>1. ==可见性 ：当一个线程更改了共享变量的值，其他线程能否立即知道共享变量发生了变更。JMM规定了共享变量存储在主内存中。系统主内存中共享变量被写入的时机不确定，多线程的环境下容易产生脏读。每个线程都有自己的工作内存，工作内存中保存了该线程使用变量的主内存副本拷贝，每个线程只能操作自己工作内存中的变量，不能直接读取主内存中的变量。不同线程不能直接访问对方工作内存中的变量，线程变量值的传递需要通过主内存来完成==</h6><h6 id="2-原子性-：指同一个操作不能被打断，多线程的环境下，操作不能被其他线程干扰"><a href="#2-原子性-：指同一个操作不能被打断，多线程的环境下，操作不能被其他线程干扰" class="headerlink" title="2. ==原子性 ：指同一个操作不能被打断，多线程的环境下，操作不能被其他线程干扰=="></a>2. ==原子性 ：指同一个操作不能被打断，多线程的环境下，操作不能被其他线程干扰==</h6><h6 id="3-有序性-：JAVA规范规定的JVM线程内部维持的顺序化语序，如果代码执行的最终结果与顺序执行的结果一致，那么指令执行的顺序与代码执行的顺序不一致-即指令重新排序"><a href="#3-有序性-：JAVA规范规定的JVM线程内部维持的顺序化语序，如果代码执行的最终结果与顺序执行的结果一致，那么指令执行的顺序与代码执行的顺序不一致-即指令重新排序" class="headerlink" title="3. ==有序性 ：JAVA规范规定的JVM线程内部维持的顺序化语序，如果代码执行的最终结果与顺序执行的结果一致，那么指令执行的顺序与代码执行的顺序不一致 即指令重新排序=="></a>3. ==有序性 ：JAVA规范规定的JVM线程内部维持的顺序化语序，如果代码执行的最终结果与顺序执行的结果一致，那么指令执行的顺序与代码执行的顺序不一致 即指令重新排序==</h6><h6 id="优点-JVM-根据处理器特性对机器指令重排-使机器指令更符合CPU的执行顺序-，最大限度的发挥了机器性能"><a href="#优点-JVM-根据处理器特性对机器指令重排-使机器指令更符合CPU的执行顺序-，最大限度的发挥了机器性能" class="headerlink" title="==优点: JVM 根据处理器特性对机器指令重排 使机器指令更符合CPU的执行顺序 ，最大限度的发挥了机器性能=="></a>==优点: JVM 根据处理器特性对机器指令重排 使机器指令更符合CPU的执行顺序 ，最大限度的发挥了机器性能==</h6><h6 id="缺点：指令重排可以保证串行语义的一致，但不能保证多线程语义也一致"><a href="#缺点：指令重排可以保证串行语义的一致，但不能保证多线程语义也一致" class="headerlink" title="==缺点：指令重排可以保证串行语义的一致，但不能保证多线程语义也一致=="></a>==缺点：指令重排可以保证串行语义的一致，但不能保证多线程语义也一致==</h6><p> <img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/jMM%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="JMM原理图"></p><h4 id="考点happens-before总原则理解"><a href="#考点happens-before总原则理解" class="headerlink" title="==考点happens-before总原则理解=="></a>==考点happens-before总原则理解==</h4><h6 id="如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见而且第一个操作的执行顺序排在第二个操作之前。"><a href="#如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见而且第一个操作的执行顺序排在第二个操作之前。" class="headerlink" title="如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见而且第一个操作的执行顺序排在第二个操作之前。"></a>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见而且第一个操作的执行顺序排在第二个操作之前。</h6><h6 id="两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。"><a href="#两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。" class="headerlink" title="两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。"></a>两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。</h6><h5 id="happens-before-原则具体版"><a href="#happens-before-原则具体版" class="headerlink" title="happens-before 原则具体版"></a>happens-before 原则具体版</h5><ul><li>.1次序规则: 一个线程内，按照代码顺序，写在前面的操作先行发生于写在后面的操作; 前一个操作的结果可以被后续的操作获取<br>讲直白点就是前面一个操作把变量X赋值为1，那后面一个操作肯定能知道X已经变成了1</li><li>2.锁定规则: 个unLock操作先行发生于后面((这里的“后面”是指时间上的先后))对同一个锁的lock操作;</li><li>3.volatile变量规则:对一个volatile变量的写操作先行发生于后面对这个变量的读操作，前面的写对后面的读是可见的，这里的“后面”同样是指时间上的先后</li><li>4.传递规则:如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li><li>5.线程启动规则(Thread Start Rule):Thread对象的start()方法先行发生于此线程的每一个动作</li><li>6.线程中断规则(Thread Interruption Rule): 对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生;可以通过Thread.interrupted()检测到是否发生中断也就是说你要先调用interrupt()方法设置过中断标志位，我才能检测到中断发生</li><li>7.线程终止规则(Thread Termination Rule): 线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过isAlive()等手段检测线程是否已经终止执行</li><li>8.对象终结规则(Finalizer Rule): 对象没有完成初始化之前，是不能调用finalized0)方法的</li></ul><h3 id="volatile-和-JMM"><a href="#volatile-和-JMM" class="headerlink" title="volatile  和  JMM"></a>volatile  和  JMM</h3><h5 id="考点被volatile修饰的变量有什么特点-：可见性-有序性"><a href="#考点被volatile修饰的变量有什么特点-：可见性-有序性" class="headerlink" title="==考点被volatile修饰的变量有什么特点 ：可见性 有序性=="></a>==考点被volatile修饰的变量有什么特点 ：可见性 有序性==</h5><h5 id="volatile的内存语义（作用）：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取"><a href="#volatile的内存语义（作用）：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取" class="headerlink" title="volatile的内存语义（作用）：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取"></a>volatile的内存语义（作用）：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取</h5><h5 id="考点的通过什么方式保证可以见性和有序性：是通过内存屏障"><a href="#考点的通过什么方式保证可以见性和有序性：是通过内存屏障" class="headerlink" title="==考点的通过什么方式保证可以见性和有序性：是通过内存屏障=="></a>==考点的通过什么方式保证可以见性和有序性：是通过内存屏障==</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h5 id="说说内存屏障原理（-重点-）"><a href="#说说内存屏障原理（-重点-）" class="headerlink" title="说说内存屏障原理（==重点==）"></a>说说内存屏障原理（==重点==）</h5><h6 id="再说内存屏障之前，先看看对于有序性的理解"><a href="#再说内存屏障之前，先看看对于有序性的理解" class="headerlink" title="再说内存屏障之前，先看看对于有序性的理解"></a>再说内存屏障之前，先看看对于有序性的理解</h6><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">有序(禁重排)重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段，有时候会改变程序语句的先后顺序不存在数据依赖关系，可以重排序;存在数据依赖关系，禁止重排序但重排后的指令绝对不能改变原有的串行语义!这点在并发设计中必须要重点考虑!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="内存屏障的分类"><a href="#内存屏障的分类" class="headerlink" title="内存屏障的分类"></a>内存屏障的分类</h6><ul><li><p>粗分两种：读屏障 （在读指令之前插入读屏障，让工作内存或CPU高速缓存当中的缓存数据失效，重新回到主内存中获取最新数据）和写的屏障（在写指令之后插入写屏障，强制把写缓冲区的数据刷回到主内存中）</p></li><li><p>细分有四种：</p></li></ul><table><thead><tr><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad</td><td>Load1;LoadLoad;Load2</td><td>保证load1的读取操作在load2及后续读取操作之前执行</td></tr><tr><td>StoreStore</td><td>Store1; StoreStore; Store2</td><td>在store2及其后的写操作执行前，保证store1的写操作已刷新到主内存</td></tr><tr><td>LoadStore</td><td>Load1: LoadStore: Store2</td><td>在stroe2及其后的写操作执行前，保证load1的读操作已读取结束</td></tr><tr><td>StoreLoad</td><td>Store1: Storeload: Load2</td><td>保证store1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td></tr></tbody></table><h4 id="Happens-before之volatile-的规则-策略"><a href="#Happens-before之volatile-的规则-策略" class="headerlink" title="Happens-before之volatile 的规则 策略"></a>Happens-before之volatile 的规则 策略</h4><table><thead><tr><th>第一个操作</th><th>第二个操作: 普通读写</th><th>第二个操作: volatile读</th><th>第二个操作: volatile读</th></tr></thead><tbody><tr><td>普通读写</td><td>普通读写</td><td>普通读写</td><td>不可以重排</td></tr><tr><td>volatile读</td><td>不可以重排</td><td>不可以重排</td><td>不可以重排</td></tr><tr><td>volatile写</td><td>可以重排</td><td>不可以重排</td><td>不可以重排</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h6 id="策略的记忆口诀"><a href="#策略的记忆口诀" class="headerlink" title="策略的记忆口诀"></a>策略的记忆口诀</h6><ul><li><p>当第一个操作为volatle读时，不论第二个操作是什么，都不能重排序。这个操作保证了volatle读之后的操作不会被重排到volatile读之前。</p></li><li><p>当第二个操作为volatile写时，不论第一个操作是什么，都不能重排序。这个操作保证了volatile写之前的操作不会被重排到volatile写之后。</p></li><li><p>当第一个操作为volatile写时，第二个操作为volatile读时，不能重排。</p></li></ul><h6 id="读屏障的示意图"><a href="#读屏障的示意图" class="headerlink" title="读屏障的示意图"></a>读屏障的示意图</h6><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="内存屏障的理解图"></p><h6 id="写屏障的示意图"><a href="#写屏障的示意图" class="headerlink" title="写屏障的示意图"></a>写屏障的示意图</h6><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%86%99%E5%B1%8F%E9%9A%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="写屏障的示意图"></p><h5 id="volatie-变量写过程的"><a href="#volatie-变量写过程的" class="headerlink" title="volatie 变量写过程的"></a>volatie 变量写过程的</h5><ul><li><p>read: 作用于主内存，将变量的值从主内存传输到工作内存，主内存到工作内存</p></li><li><p>load: 作用于工作内存，将read从主内存传输的变量值放入工作内存变量副本中，即数据加载</p></li><li><p>use: 作用于工作内存，将工作内存变量副本的值传递给执行引擎，每当JVM遇到需要该变量的字节码指令时会执行该操作</p></li><li><p>assign: 作用于工作内存，将从执行引警接收到的值赋值给工作内存变量，每当JVM遇到一个给变量赋值字节码指令时会执行该操作</p></li><li><p>store: 作用于工作内存，将赋值完毕的工作变量的值写回给主内存</p></li><li><p>write:作用于主内存，将store传输过来的变量值赋值给主内存中的变量</p></li><li><p>==由于上述6条只能保证单条指令的原子性，针对多条指令的组合性原子保证，没有大面积加锁，所以，JVM提供了另外两个原子指令==</p><ul><li><p>lock: 作用于主内存，将一个变量标记为一个线程独占的状态，只是写时候加锁，就只是锁了写变量的过程。</p></li><li><p>unlock: 作用于主内存，把一个处于锁定状态的变量释放，然后才能被其他线程占用</p></li></ul></li></ul><h5 id="考点volatile-的使用场景"><a href="#考点volatile-的使用场景" class="headerlink" title="==考点volatile 的使用场景=="></a>==考点volatile 的使用场景==</h5><ul><li><p>单一赋值可以，but含复合运算赋值不可以(i++之类)</p></li><li><p>状态标志，判断业务是否结束  （变量可以用volatile 修饰）</p></li><li><p>开销较低的读，写锁策略  （再写使用sychornized 修饰  读的变量的使用volatile 修饰）</p></li><li><p>AtomicIntegerFieldUpdater，AtomicLongFieldUpdater，AtomicReferenceFieldUpdater 更新的对象属性必须使用 public volatile 修饰符</p></li><li><p>DCL双端锁的发布 （单例模式的中双重检查）</p></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>itdachang</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SafeDoubleCheckSingleton</span> singleton<span class="token punctuation">;</span>    <span class="token comment">//私育化构造方法</span><span class="token keyword">private</span> <span class="token class-name">SafeDoubleChecksingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//双重锁没计</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span>  <span class="token class-name">SafeDoubleCheckSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> nu11<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.多线程并发创建对象时，会通过加锁保证只有一个线程能创建对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> nu11<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//隐患，多线程环境下，由于重排序，该对象可能还未完成初始化就被其他线程读职</span>                singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//2.对象创建完毕，执行getInstance()特不需要获职锁，直接返回创建对象</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="面试volatile-的时候，从这个点法上面区表述"><a href="#面试volatile-的时候，从这个点法上面区表述" class="headerlink" title="面试volatile 的时候，从这个点法上面区表述"></a>面试volatile 的时候，从这个点法上面区表述</h5><table><thead><tr><th>volatile关键字保证可见性:</th><th>对一个被volatile关键字修改的变量</th></tr></thead><tbody><tr><td></td><td>写操作的话，这个变量的最新值会立即刷新回到主内存中</td></tr><tr><td></td><td>读操作的话，总是能够读取到这个变量的最新值，也就是这个变量最后被修改的值</td></tr><tr><td></td><td>当某个线程收到通知，去读取volatile修饰的变量的值的时候，线程私有工作内存的数据失效，需要重新回到主内存中去读取最新的数据。</td></tr><tr><td>没有原子性</td><td>：结合线程当操作复合运算++ i 的问题上，他们的步骤不是原子性，被其他线程修改</td></tr><tr><td>禁止重排序（有序性）</td><td></td></tr><tr><td>==凭啥就给我们volatile就会加内存屏障==</td><td>底层看volatile 修饰就添加 ACC_VOLATILE  程序就会按照这个加内存屏障</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">compare and swap的缩写，中文翻译成比较并交换,实现并发算法时常用到的一种技术。它包含三个操作数一一内存位置、预期原值及更新值。执行CAS操作的时候，将内存位置的值与预期原值比较:如果相匹配，那么处理器会自动将该位置值更新为新值如果不匹配，处理器不做任何操作，多个线程同时执行CAS操作只有一个会成功。CAS有3个操作数，位置内存值V，旧的预期值A，要修改的更新值B当且仅当旧的预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做或重来当它重来重试的这种行为成为----自旋! !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/CAS%E5%9B%BE%E4%BE%8B%E8%AF%B4%E6%98%8E.png" alt="CAS的图例"></p><h5 id="认识CAS-要对底层的unsafa-核心类的了解"><a href="#认识CAS-要对底层的unsafa-核心类的了解" class="headerlink" title="认识CAS 要对底层的unsafa 核心类的了解"></a>认识CAS 要对底层的unsafa 核心类的了解</h5><h6 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h6><p>是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地(native) 方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。</p><p><strong><em>注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的法都直接调用操作系统底层资源执行相应作务</em></strong></p><p><strong>CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的核心方法。==调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题==。</strong></p><h6 id="JUC-下的并发包的原子类"><a href="#JUC-下的并发包的原子类" class="headerlink" title="JUC 下的并发包的原子类"></a>JUC 下的并发包的原子类</h6><h5 id="volatile-解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。"><a href="#volatile-解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。" class="headerlink" title="volatile 解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。"></a>volatile 解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</h5><h5 id="说明-如果是-count-操作，使用如下类实现"><a href="#说明-如果是-count-操作，使用如下类实现" class="headerlink" title="说明: 如果是 count+ +操作，使用如下类实现:"></a>说明: 如果是 count+ +操作，使用如下类实现:</h5><p>AtomicInteger count = new AtomicInteger();<br>count.addAndGet(1):</p><h5 id="如果是JDK8，-推荐使用-LongAdder-对象，比-AtomicLong-性能更好-减少乐观锁的重试次数"><a href="#如果是JDK8，-推荐使用-LongAdder-对象，比-AtomicLong-性能更好-减少乐观锁的重试次数" class="headerlink" title="如果是JDK8，==推荐使用 LongAdder 对象，比 AtomicLong 性能更好==(减少乐观锁的重试次数)"></a>如果是JDK8，==推荐使用 LongAdder 对象，比 AtomicLong 性能更好==(减少乐观锁的重试次数)</h5><h6 id="在LongAdder-和AtomicLong-它们在并发量低的时候，性能差不了多少。但在高并发的时候，LongAdder的基本思路就是分散热点，将value值分散到一个Ce数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。（内部一个base-变量，一个-cell-数组-：base-是在低并发情况下，做CAS累加。如果一直自旋失败的话，那么就直接-创建Cell数组-来分担压力。每个cell的元素都存放不同不同线程的累加。最终把各个cell-数组元素的里面的值和base-相加。效率会一个base-处理数据快）"><a href="#在LongAdder-和AtomicLong-它们在并发量低的时候，性能差不了多少。但在高并发的时候，LongAdder的基本思路就是分散热点，将value值分散到一个Ce数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。（内部一个base-变量，一个-cell-数组-：base-是在低并发情况下，做CAS累加。如果一直自旋失败的话，那么就直接-创建Cell数组-来分担压力。每个cell的元素都存放不同不同线程的累加。最终把各个cell-数组元素的里面的值和base-相加。效率会一个base-处理数据快）" class="headerlink" title="在LongAdder 和AtomicLong  它们在并发量低的时候，性能差不了多少。但在高并发的时候，LongAdder的基本思路就是分散热点，将value值分散到一个Ce数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。（内部一个base  变量，一个 cell[] 数组   ：base 是在低并发情况下，做CAS累加。如果一直自旋失败的话，那么就直接 创建Cell数组 来分担压力。每个cell的元素都存放不同不同线程的累加。最终把各个cell 数组元素的里面的值和base 相加。效率会一个base 处理数据快）"></a>在LongAdder 和AtomicLong  它们在并发量低的时候，性能差不了多少。但在高并发的时候，LongAdder的基本思路就是分散热点，将value值分散到一个Ce数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。（内部一个base  变量，一个 cell[] 数组   ：base 是在低并发情况下，做CAS累加。如果一直自旋失败的话，那么就直接 创建Cell数组 来分担压力。每个cell的元素都存放不同不同线程的累加。最终把各个cell 数组元素的里面的值和base 相加。效率会一个base 处理数据快）</h6><h5 id="说说AtomicStampedReference-和-AtomicMarkableReference-的区别"><a href="#说说AtomicStampedReference-和-AtomicMarkableReference-的区别" class="headerlink" title="说说AtomicStampedReference  和 AtomicMarkableReference 的区别"></a>说说AtomicStampedReference  和 AtomicMarkableReference 的区别</h5><ul><li><p>AtomicStampedReference  解决修改状态戳原 修改多次的原子更新</p></li><li><p>AtomicMarkableReference 解决一次的状态的修改的原子更新</p></li></ul><h3 id="TheadLocadl"><a href="#TheadLocadl" class="headerlink" title="TheadLocadl"></a>TheadLocadl</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><h5 id="ThreadLocal提供线程局部变量。这些变量与正常的变量不同，因为每一个线程在访问ThreadLocal实例的时候-通过其get或set方法-都有自己的、独立初始化的变量副本。ThreadLocal实例通常是类中的私有静态字段，使用它的目的是希望将状态-例如，用户ID或事务1D-与线程关联起来。"><a href="#ThreadLocal提供线程局部变量。这些变量与正常的变量不同，因为每一个线程在访问ThreadLocal实例的时候-通过其get或set方法-都有自己的、独立初始化的变量副本。ThreadLocal实例通常是类中的私有静态字段，使用它的目的是希望将状态-例如，用户ID或事务1D-与线程关联起来。" class="headerlink" title="ThreadLocal提供线程局部变量。这些变量与正常的变量不同，因为每一个线程在访问ThreadLocal实例的时候(通过其get或set方法)都有自己的、独立初始化的变量副本。ThreadLocal实例通常是类中的私有静态字段，使用它的目的是希望将状态(例如，用户ID或事务1D)与线程关联起来。"></a>ThreadLocal提供线程局部变量。这些变量与正常的变量不同，因为每一个线程在访问ThreadLocal实例的时候(通过其get或set方法)都有自己的、独立初始化的变量副本。ThreadLocal实例通常是类中的私有静态字段，使用它的目的是希望将状态(例如，用户ID或事务1D)与线程关联起来。</h5><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><h5 id="实现每一个线程都有自己专属的本地变量副本-自己用自己的变量不麻烦别人，不和其他人共享，人人有份，人各一份-主要解决了让每个线程绑定自己的值，通过使用get0和set方法，获取默认值或将其值更改为当前线程所存的副本的值从而避免了线程安全问"><a href="#实现每一个线程都有自己专属的本地变量副本-自己用自己的变量不麻烦别人，不和其他人共享，人人有份，人各一份-主要解决了让每个线程绑定自己的值，通过使用get0和set方法，获取默认值或将其值更改为当前线程所存的副本的值从而避免了线程安全问" class="headerlink" title="实现每一个线程都有自己专属的本地变量副本(自己用自己的变量不麻烦别人，不和其他人共享，人人有份，人各一份), 主要解决了让每个线程绑定自己的值，通过使用get0和set方法，获取默认值或将其值更改为当前线程所存的副本的值从而避免了线程安全问"></a>实现每一个线程都有自己专属的本地变量副本(自己用自己的变量不麻烦别人，不和其他人共享，人人有份，人各一份), 主要解决了让每个线程绑定自己的值，通过使用get0和set方法，获取默认值或将其值更改为当前线程所存的副本的值从而避免了线程安全问</h5><p>题，比如我们之前讲解的8锁案例，资源类是使用同一部手机，多个线程抢夺同一部手机使用，假如人手一份是不是天下太平??</p><h5 id="ThreadLocal考点"><a href="#ThreadLocal考点" class="headerlink" title="==ThreadLocal考点=="></a>==ThreadLocal考点==</h5><h6 id="ThreadLocal中ThreadLocalMap的数据结构和关系"><a href="#ThreadLocal中ThreadLocalMap的数据结构和关系" class="headerlink" title="ThreadLocal中ThreadLocalMap的数据结构和关系?"></a>ThreadLocal中ThreadLocalMap的数据结构和关系?</h6><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Thread 里面的包含一个ThreadLocal 引用  而ThreadLocal 里面有一个静态内部类TheadLocadlMap。 ThreadLocal为key 存放在value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="ThreadLocal的key是弱引用，这是为什么"><a href="#ThreadLocal的key是弱引用，这是为什么" class="headerlink" title="ThreadLocal的key是弱引用，这是为什么?"></a>ThreadLocal的key是弱引用，这是为什么?</h6><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">弱引用相较于前面的强引用和软引用的的话，jvm 更会主动去回收ThreadLocalMap 的key 这样的不会到导致内存泄漏。当function1方法执行完毕后，栈销毁强引用 tl 也就没有了。但此时线程的ThreadLocalMap里某个entry的key引用还指向这个对象若这个key引用是强引用，就会导致key指向的ThreadLocal对象及v指向的对象不能被gc回收，造成内存泄漏;若这个key引用是弱引用就大概率会减少内存泄漏的问题(还有一个key为nul的雷，第2个坑后面讲)。使用弱引用（合理），就可以使ThreadLocal对象在方法执行完毕后顺利被回收且Entry的key引用指向为null.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    </p><h6 id="ThreadLocal内存泄露问题你知道吗-threadLocal中最后为什么要加remove方法"><a href="#ThreadLocal内存泄露问题你知道吗-threadLocal中最后为什么要加remove方法" class="headerlink" title="ThreadLocal内存泄露问题你知道吗? threadLocal中最后为什么要加remove方法?"></a>ThreadLocal内存泄露问题你知道吗? threadLocal中最后为什么要加remove方法?</h6><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ThreadLocal自定义的变量用完需要remove 掉  ，减少线程的负担。特别线程池的复用导致线程内存泄漏 使用中 try -finally块回收。使用弱引用的不能避免百分百，因为当ThreadLocal 的被回收之后，线程里面还有当key 为null 的value。而这些value一直ThraeadLocalmap强引用，这样的jvm 不能回收。如果在线程池复用的导内存泄漏。当使用 set 方法和get 以及 remove 方法 .都会先去判断key 是否为null ,如果是的就会把 key为null的value 给回收。避免内存泄漏和复用导致bug 手动remove　　有必要的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="对象内存布局之对象头"><a href="#对象内存布局之对象头" class="headerlink" title="对象内存布局之对象头"></a>对象内存布局之对象头</h3><h4 id="对象头的构成"><a href="#对象头的构成" class="headerlink" title="对象头的构成"></a>对象头的构成</h4><h5 id="运行时元数据-Mark-Word"><a href="#运行时元数据-Mark-Word" class="headerlink" title="运行时元数据 (Mark Word)"></a>运行时元数据 (Mark Word)</h5><h6 id="哈希值-HashCode"><a href="#哈希值-HashCode" class="headerlink" title="哈希值 (HashCode)"></a>哈希值 (HashCode)</h6><h6 id="GC分代年龄"><a href="#GC分代年龄" class="headerlink" title="GC分代年龄"></a>GC分代年龄</h6><h6 id="锁状态标志"><a href="#锁状态标志" class="headerlink" title="锁状态标志"></a>锁状态标志</h6><h6 id="线程持有的锁"><a href="#线程持有的锁" class="headerlink" title="线程持有的锁"></a>线程持有的锁</h6><h6 id="偏向线程ID"><a href="#偏向线程ID" class="headerlink" title="偏向线程ID"></a>偏向线程ID</h6><h6 id="偏向时间戳"><a href="#偏向时间戳" class="headerlink" title="偏向时间戳"></a>偏向时间戳</h6><h5 id="类型指针一一指向类元数据InstanceClass，确定该对象所属的类型"><a href="#类型指针一一指向类元数据InstanceClass，确定该对象所属的类型" class="headerlink" title="类型指针一一指向类元数据InstanceClass，确定该对象所属的类型"></a>类型指针一一指向类元数据InstanceClass，确定该对象所属的类型</h5><h4 id="实例数据-Instance-Data-它是对急真正存储的有效信息，包括程序代码中定义的各种类型的字段-包括从父类继承下来的和本身拥有的字段"><a href="#实例数据-Instance-Data-它是对急真正存储的有效信息，包括程序代码中定义的各种类型的字段-包括从父类继承下来的和本身拥有的字段" class="headerlink" title="实例数据 (Instance Data) :它是对急真正存储的有效信息，包括程序代码中定义的各种类型的字段(包括从父类继承下来的和本身拥有的字段)"></a>实例数据 (Instance Data) :它是对急真正存储的有效信息，包括程序代码中定义的各种类型的字段(包括从父类继承下来的和本身拥有的字段)</h4><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" alt="对象头布局"></p><h3 id="锁的升级"><a href="#锁的升级" class="headerlink" title="锁的升级"></a>锁的升级</h3><h4 id="sychcornized锁-由对象头中的Mark-Word根据锁标志位的不同而被复用及锁升级策略"><a href="#sychcornized锁-由对象头中的Mark-Word根据锁标志位的不同而被复用及锁升级策略" class="headerlink" title="sychcornized锁:由对象头中的Mark Word根据锁标志位的不同而被复用及锁升级策略"></a>sychcornized锁:由对象头中的Mark Word根据锁标志位的不同而被复用及锁升级策略</h4><h4 id="锁升级的背景"><a href="#锁升级的背景" class="headerlink" title="锁升级的背景"></a>锁升级的背景</h4><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">java的线程是映射到操作系统原生线程之上的，如果要阳塞或唤醒一个线程就需要换作系统介入，需要在户态与核心态之间切换，这种切换会消料大量的系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等，用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁 (monitor)是依赖于底层的操作系统的Mutex Lock(系统互斥量)来实现的，挂起线程和恢复线程都需要转入内核态去完成，阳寒或唤醒一个Jaa线程需要换作系统切换CPU状态来完成，这种状态切换需要耗费处理器时间，如果同步代码块中内容过于简单，这种切换的时间可能比用户代码执行的时间还长”，时间成本相对较高，这也是为什么早期的synchronized效率低的原因Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁.Monitor可以理解为一种同步工具，也可理解为一种同步机制，常常被描述为一价Java对象。Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，因为在Jva的设计中，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。Monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的转换，成本非常高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="锁的指向"><a href="#锁的指向" class="headerlink" title="锁的指向"></a>锁的指向</h4><h5 id="偏向锁-MarkWord存储的是偏向的线程ID"><a href="#偏向锁-MarkWord存储的是偏向的线程ID" class="headerlink" title="偏向锁: MarkWord存储的是偏向的线程ID;"></a>偏向锁: MarkWord存储的是偏向的线程ID;</h5><h5 id="轻量锁-MarkWord存储的是指向线程栈中Lock-Record的指针"><a href="#轻量锁-MarkWord存储的是指向线程栈中Lock-Record的指针" class="headerlink" title="轻量锁: MarkWord存储的是指向线程栈中Lock Record的指针;"></a>轻量锁: MarkWord存储的是指向线程栈中Lock Record的指针;</h5><h5 id="重量锁-MarkWord存储的是指向堆中的monitor对象的指针"><a href="#重量锁-MarkWord存储的是指向堆中的monitor对象的指针" class="headerlink" title="重量锁: MarkWord存储的是指向堆中的monitor对象的指针;"></a>重量锁: MarkWord存储的是指向堆中的monitor对象的指针;</h5><h4 id="偏向锁的撤销"><a href="#偏向锁的撤销" class="headerlink" title="偏向锁的撤销"></a>偏向锁的撤销</h4><h5 id="当有另外线程逐步来竞争锁的时候，就不能再使用偏向锁了，要升级为轻量级锁"><a href="#当有另外线程逐步来竞争锁的时候，就不能再使用偏向锁了，要升级为轻量级锁" class="headerlink" title="当有另外线程逐步来竞争锁的时候，就不能再使用偏向锁了，要升级为轻量级锁"></a>当有另外线程逐步来竞争锁的时候，就不能再使用偏向锁了，要升级为轻量级锁</h5><h5 id="竞争线程尝试CAS更新对象头失败，会等待到全局安全点《此时不会执行任何代码-撤销偏向锁。"><a href="#竞争线程尝试CAS更新对象头失败，会等待到全局安全点《此时不会执行任何代码-撤销偏向锁。" class="headerlink" title="竞争线程尝试CAS更新对象头失败，会等待到全局安全点《此时不会执行任何代码) 撤销偏向锁。"></a>竞争线程尝试CAS更新对象头失败，会等待到全局安全点《此时不会执行任何代码) 撤销偏向锁。</h5><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">偏向锁的撤销()偏向锁使用一种等到竞争出现才释放锁的机制，只有当其他线程竞争锁时，持有偏向锁的原来线程才会被撤销撤销需要等待全局安全点(该时间点上没有字节码正在执行)，同时检查持有偏向锁的线程是否还在执行:1第一个线程正在执行synchronized方法(处于同步块)，它还没有执行完，其它线程来抢夺，该偏向锁会被取消掉并出现锁升级此时轻量级锁由原持有偏向锁的线程持有，继续执行其同步代码，而正在竞争的线程会进入自旋等待获得该轻量级锁。2第一个线程执行完成synchronized方法(退出同步块)，则将对象头设置成无锁状态并撤销偏向锁，重新偏向。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="轻量锁-1"><a href="#轻量锁-1" class="headerlink" title="轻量锁"></a>轻量锁</h4><h5 id="轻量级锁的加锁"><a href="#轻量级锁的加锁" class="headerlink" title="轻量级锁的加锁"></a>轻量级锁的加锁</h5><h6 id="JVM会为每个线程在当前线程的龙中创律用千存储锁记录的空间，官方成为Displaced-Mark-wrd。若一个线程获得锁时发现是量级锁，会把锁的MarkWord复制到自己的Displaced-Mark-Word里面。然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的针。如果成功，当前线程获得锁，如果失败，表示Mark-Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，当前程就尝试使用自旋来获取锁。"><a href="#JVM会为每个线程在当前线程的龙中创律用千存储锁记录的空间，官方成为Displaced-Mark-wrd。若一个线程获得锁时发现是量级锁，会把锁的MarkWord复制到自己的Displaced-Mark-Word里面。然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的针。如果成功，当前线程获得锁，如果失败，表示Mark-Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，当前程就尝试使用自旋来获取锁。" class="headerlink" title="JVM会为每个线程在当前线程的龙中创律用千存储锁记录的空间，官方成为Displaced Mark wrd。若一个线程获得锁时发现是量级锁，会把锁的MarkWord复制到自己的Displaced Mark Word里面。然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的针。如果成功，当前线程获得锁，如果失败，表示Mark Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，当前程就尝试使用自旋来获取锁。"></a>JVM会为每个线程在当前线程的龙中创律用千存储锁记录的空间，官方成为Displaced Mark wrd。若一个线程获得锁时发现是量级锁，会把锁的MarkWord复制到自己的Displaced Mark Word里面。然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的针。如果成功，当前线程获得锁，如果失败，表示Mark Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，当前程就尝试使用自旋来获取锁。</h6><h6 id="自旋CAS-不断尝试去获取锁，能不升级就不往上捅，尽量不要阻塞"><a href="#自旋CAS-不断尝试去获取锁，能不升级就不往上捅，尽量不要阻塞" class="headerlink" title="自旋CAS:不断尝试去获取锁，能不升级就不往上捅，尽量不要阻塞"></a>自旋CAS:不断尝试去获取锁，能不升级就不往上捅，尽量不要阻塞</h6><h5 id="轻量级锁的释放"><a href="#轻量级锁的释放" class="headerlink" title="轻量级锁的释放"></a>轻量级锁的释放</h5><h6 id="在释放锁时，当前线程会使用CAS操作将Displaced-Mak-Word的内容复制回锁的Mark-Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为白旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阳的线程。"><a href="#在释放锁时，当前线程会使用CAS操作将Displaced-Mak-Word的内容复制回锁的Mark-Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为白旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阳的线程。" class="headerlink" title="在释放锁时，当前线程会使用CAS操作将Displaced Mak Word的内容复制回锁的Mark Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为白旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阳的线程。"></a>在释放锁时，当前线程会使用CAS操作将Displaced Mak Word的内容复制回锁的Mark Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为白旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阳的线程。</h6><h4 id="重量级锁-1"><a href="#重量级锁-1" class="headerlink" title="重量级锁"></a>重量级锁</h4><h5 id="重量级锁原理-1"><a href="#重量级锁原理-1" class="headerlink" title="重量级锁原理"></a>重量级锁原理</h5><h6 id="指向互斥量-重量级锁-的指针-1"><a href="#指向互斥量-重量级锁-的指针-1" class="headerlink" title="指向互斥量 (重量级锁)的指针"></a>指向互斥量 (重量级锁)的指针</h6><p>Java中synchronized的重量级锁，是基于进入和退出Monitor对象实现的。在编译时会将同步块的开始位置插入monitor enter指令，在结束位置插入monitor exit指令。<br>当线程执行到monitor enter指令时，会尝试获取对象所对应的Monitor所有权，如果获取到了，即获取到了锁，会在Monitor的owner中存放当前线程的id，这样它将处于锁定状态，除非退出同步块，否则其他线程无法获取到这个Monitor。</p><h4 id="锁升级的总结"><a href="#锁升级的总结" class="headerlink" title="锁升级的总结"></a>锁升级的总结</h4><ul><li>==在无锁状态下==，Mark Word中可以存储对象的identity hash code值。当对象的hashCode0)方法第一次被调用时，JVM会生成对应的dentity hash code值并将该值存储到Mark Word中。</li><li>==对干偏白锁==，在线程获取偏向锁时，会用Thread ID和epoch值覆盖identity hash code所在的位置。如果一个对象的hashCode0)方法已经被调用过一次之后，这个对象不能被设置偏向锁。因为如果可以的化，那Mark Word中的identity hash code必然会被偏向线程id给覆盖，这就会造成同一个对象前后两次调用hashCode()方法得到的结果不一致。</li><li>==升级为轻量级锁时==，JVM会在当前线程的栈顺中创律一个锁记录Lock Record)空间，用于存储锁对象的Mark Word拷贝，该据贝中可以包含identity hash code，所以轻量级锁可以和identity hash code共存，哈希码和GC年龄自然保存在此，释放锁后会将这些信息写回到对象头。</li><li>==升级为重量级锁后==，Mark Word保存的重量级锁指针，代表重量级锁的bjectMonitor类里有字段记录非加锁状态下的Mark Word，锁释放后也会将信息写回到对象头。</li></ul><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢?<br>如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS同步队列的抽象表现。它将要请求共享资源的线程及自身的等待状态封装成队列的结点对象(Node)，通过<br>CAS、自旋以及LockSupport.park0)的方式，维护tate变量的状态，使并发达到同步的效果。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><h5 id="AQS使用一个volatie的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对State值的修改"><a href="#AQS使用一个volatie的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对State值的修改" class="headerlink" title="AQS使用一个volatie的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对State值的修改"></a>AQS使用一个volatie的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对State值的修改</h5><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="类的关系"></p><p><img src="https://v1.mykkto.cn/image/blog/2023/specialcolumn/yjc/reentranLock%E6%BA%90%E7%A0%81%E4%B9%8BAQS.png"></p><p>AQS(AbstractQueuedSynchronizer)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>         <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span><span class="token comment">//非公平</span>         <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span>   <span class="token comment">//公平</span>                      <span class="token comment">//以非公平为例子跟踪</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//自旋修改状态</span>                     <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把当前锁的持有则</span>            <span class="token keyword">else</span>                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>第一部分<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">/** 1尝试加锁 2加锁失败线程入队3线程入队后，线程进入阻塞*/</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//具体的子类实现NonfairSync</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment">/***情况一 查看当前状态是否等于0，如果是就进入自旋尝试修改状态，并把当前线程 设置锁的拥有者。返回true,当前线程的是否和锁的持有者一同一线程，是就更改锁的状态，*/</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span> <span class="token comment">//更新锁的状态</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>第二部分<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">//加入对象等</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>        <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//不是第一创建队列，后续的节点进来直接就添加的双端队列的末尾</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//入队，队列初始化</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//  第一进入队列的</span> <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Must initialize</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//创建一个新的节点首尾相连  //自旋</span>                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// //自旋</span>                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token comment">//把刚进来的节点加入到队列</span>                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//尝试获得锁，没有获得就阻塞等待唤醒</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                    failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//等待唤醒之前修改节点的等待状态</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>                       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">do</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//线程阻塞 中断机制</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//中断标志获得锁的线程标志，协商。需要获得锁自行决定是否是否</span>    <span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>第三部分<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>    <span class="token comment">/***    取消等待        */</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Ignore if node doesn't exist</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span> pred <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span> <span class="token comment">//移除节点</span>        <span class="token class-name">Node</span> predNext <span class="token operator">=</span> pred<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//尝试修改当前的的尾部</span>            <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                   <span class="token keyword">int</span> ws<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL <span class="token operator">||</span>                 <span class="token punctuation">(</span>ws <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">//修改 前面节点唤醒状态</span>                pred<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Node</span> next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得释放锁并改变status 的状态</span>            <span class="token punctuation">}</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// help GC</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//CAS 修改值</span>               <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore-CountDownLatch）"><a href="#AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore-CountDownLatch）" class="headerlink" title="AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）"></a>AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）</h4><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="transient-volatile-Node-head"><a href="#transient-volatile-Node-head" class="headerlink" title="transient volatile Node head"></a>transient volatile Node head</h5><h6 id="waiter队列的头，刚开始时是一个啥都没有的结点，后面解锁一个去掉一个"><a href="#waiter队列的头，刚开始时是一个啥都没有的结点，后面解锁一个去掉一个" class="headerlink" title="waiter队列的头，刚开始时是一个啥都没有的结点，后面解锁一个去掉一个"></a>waiter队列的头，刚开始时是一个啥都没有的结点，后面解锁一个去掉一个</h6><h5 id="transient-volatile-Node-tail"><a href="#transient-volatile-Node-tail" class="headerlink" title="transient volatile Node tail"></a>transient volatile Node tail</h5><h6 id="waiter队列的尾，第一次上锁没锁上的往后边插，每当一个倒霉蛋没有获得锁，就加入队列"><a href="#waiter队列的尾，第一次上锁没锁上的往后边插，每当一个倒霉蛋没有获得锁，就加入队列" class="headerlink" title="waiter队列的尾，第一次上锁没锁上的往后边插，每当一个倒霉蛋没有获得锁，就加入队列"></a>waiter队列的尾，第一次上锁没锁上的往后边插，每当一个倒霉蛋没有获得锁，就加入队列</h6><h5 id="volatile-int-state"><a href="#volatile-int-state" class="headerlink" title="volatile int state"></a>volatile int state</h5><h6 id="不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可"><a href="#不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可" class="headerlink" title="不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可"></a>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可</h6><h4 id="方法-未具体实现，只抛异常"><a href="#方法-未具体实现，只抛异常" class="headerlink" title="方法(未具体实现，只抛异常)"></a>方法(未具体实现，只抛异常)</h4><h5 id="tryAcquire-int-：独占方式。尝试获取资源，成功则返回true，失败则返回false"><a href="#tryAcquire-int-：独占方式。尝试获取资源，成功则返回true，失败则返回false" class="headerlink" title="tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false"></a>tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false</h5><h5 id="tryRelease-int-：独占方式。尝试释放资源，成功则返回true，失败则返回false"><a href="#tryRelease-int-：独占方式。尝试释放资源，成功则返回true，失败则返回false" class="headerlink" title="tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false"></a>tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false</h5><h5 id="tryAcquireShared-int-：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源"><a href="#tryAcquireShared-int-：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源" class="headerlink" title="tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源"></a>tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源</h5><h5 id="tryReleaseShared-int-：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false"><a href="#tryReleaseShared-int-：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false" class="headerlink" title="tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false"></a>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false</h5><h4 id="方法（已实现）"><a href="#方法（已实现）" class="headerlink" title="方法（已实现）"></a>方法（已实现）</h4><h5 id="acquire-int"><a href="#acquire-int" class="headerlink" title="acquire(int)"></a>acquire(int)</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tryAcquire-尝试直接去获取资源，如果成功则直接返回（这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待）；"><a href="#tryAcquire-尝试直接去获取资源，如果成功则直接返回（这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待）；" class="headerlink" title="tryAcquire()尝试直接去获取资源，如果成功则直接返回（这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待）；"></a>tryAcquire()尝试直接去获取资源，如果成功则直接返回（这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待）；</h5><h5 id="addWaiter-将该线程加入等待队列的尾部，并标记为独占模式；"><a href="#addWaiter-将该线程加入等待队列的尾部，并标记为独占模式；" class="headerlink" title="addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；"></a>addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；</h5><h5 id="acquireQueued-使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。-自旋"><a href="#acquireQueued-使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。-自旋" class="headerlink" title="acquireQueued()使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。(自旋)"></a>acquireQueued()使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。(自旋)</h5><h5 id="如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt-，将中断补上。"><a href="#如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt-，将中断补上。" class="headerlink" title="如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。"></a>如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。</h5><h5 id="release-int"><a href="#release-int" class="headerlink" title="release(int)"></a>release(int)</h5><h6 id="tryRelease-int-，tryRelease-都会成功的，因为这是独占模式，该线程来释放资源，那么它肯定已经拿到独占资源了，直接减掉相应量的资源即可-state-arg-，也不需要考虑线程安全的问题。release是根据tryRelease-的返回值来判断线程是否已经完成资源释放。所以实现时，-state-0-，要返回true，否则返回false。"><a href="#tryRelease-int-，tryRelease-都会成功的，因为这是独占模式，该线程来释放资源，那么它肯定已经拿到独占资源了，直接减掉相应量的资源即可-state-arg-，也不需要考虑线程安全的问题。release是根据tryRelease-的返回值来判断线程是否已经完成资源释放。所以实现时，-state-0-，要返回true，否则返回false。" class="headerlink" title="tryRelease(int)，tryRelease()都会成功的，因为这是独占模式，该线程来释放资源，那么它肯定已经拿到独占资源了，直接减掉相应量的资源即可(state-=arg)，也不需要考虑线程安全的问题。release是根据tryRelease()的返回值来判断线程是否已经完成资源释放。所以实现时，(state=0)，要返回true，否则返回false。"></a>tryRelease(int)，tryRelease()都会成功的，因为这是独占模式，该线程来释放资源，那么它肯定已经拿到独占资源了，直接减掉相应量的资源即可(state-=arg)，也不需要考虑线程安全的问题。release是根据tryRelease()的返回值来判断线程是否已经完成资源释放。所以实现时，(state=0)，要返回true，否则返回false。</h6><h6 id="unparkSuccessor-Node-用LockSupport-unpark-方法唤醒队列中最欠扁的那个未放弃的线程。一般来说当前结点的后一个结点就是下一个，但是也可能后面的结点放弃了，这时从尾巴一直往前找，找到第一个能跑的就让他跑"><a href="#unparkSuccessor-Node-用LockSupport-unpark-方法唤醒队列中最欠扁的那个未放弃的线程。一般来说当前结点的后一个结点就是下一个，但是也可能后面的结点放弃了，这时从尾巴一直往前找，找到第一个能跑的就让他跑" class="headerlink" title="unparkSuccessor(Node)  用LockSupport.unpark()方法唤醒队列中最欠扁的那个未放弃的线程。一般来说当前结点的后一个结点就是下一个，但是也可能后面的结点放弃了，这时从尾巴一直往前找，找到第一个能跑的就让他跑"></a>unparkSuccessor(Node)  用LockSupport.unpark()方法唤醒队列中最欠扁的那个未放弃的线程。一般来说当前结点的后一个结点就是下一个，但是也可能后面的结点放弃了，这时从尾巴一直往前找，找到第一个能跑的就让他跑</h6><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><h5 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h5><h6 id="volatile-Node-prev-前驱"><a href="#volatile-Node-prev-前驱" class="headerlink" title="volatile Node prev 前驱"></a>volatile Node prev 前驱</h6><h6 id="volatile-Node-next-后继"><a href="#volatile-Node-next-后继" class="headerlink" title="volatile Node next 后继"></a>volatile Node next 后继</h6><h6 id="volatile-int-waitStatus"><a href="#volatile-int-waitStatus" class="headerlink" title="volatile int waitStatus"></a>volatile int waitStatus</h6><ul><li>CANCELLED = 1：表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。</li><li>默认值0 新节点入队时默认状态</li><li>SIGNAL  = -1后继结点在等待当前结点唤醒，后记结点入队时，会将前驱结点更新未SIGNAL</li><li>CONDITION = -2表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁</li><li>PROPAGATE = -3共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。</li></ul><h6 id="Node-nextWaiter"><a href="#Node-nextWaiter" class="headerlink" title="Node nextWaiter"></a>Node nextWaiter</h6><h6 id="volatile-Thread-thread"><a href="#volatile-Thread-thread" class="headerlink" title="volatile Thread thread"></a>volatile Thread thread</h6><p>+抢锁的线程</p><h5 id="ConditionObject"><a href="#ConditionObject" class="headerlink" title="ConditionObject"></a>ConditionObject</h5><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程池用过吗？ThreadPoolExecutor谈谈你的理解"><a href="#线程池用过吗？ThreadPoolExecutor谈谈你的理解" class="headerlink" title="==线程池用过吗？ThreadPoolExecutor谈谈你的理解=="></a>==线程池用过吗？ThreadPoolExecutor谈谈你的理解==</h4><h5 id="线程-优势"><a href="#线程-优势" class="headerlink" title="线程==优势=="></a>线程==优势==</h5><ul><li>线程池做的工作主要是控制运行的线程的数量.处理过程中将任务放入队列.然后在线程创建后启动这些任务如果线程数量超过了最大数量超出数量的线程排队等候,等其它线程执行完毕,再从队列中取出任务来执行。</li><li>它的主要特点为:线程复用;控制最大并发数:;管理线程</li><li>第一:降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗</li><li>第二:提高响应速度。当任务到达时,任务可以不需要的等到线程创建就能立即执行</li><li>第三:提高线程的可管理性。线程是稀缺资源如果无限制的创建,不仅会消耗系统资源还会降低系统的稳定性使用线程池可以进行统一的分配调优和监控</li></ul><h4 id="线程池如何使用"><a href="#线程池如何使用" class="headerlink" title="线程池如何使用"></a>线程池如何使用</h4><h5 id="Executors-newScheduledThreadPool"><a href="#Executors-newScheduledThreadPool" class="headerlink" title="Executors.newScheduledThreadPool()"></a>Executors.newScheduledThreadPool()</h5><h5 id="JDK1-8-Executors-newScheduledThreadPool-int"><a href="#JDK1-8-Executors-newScheduledThreadPool-int" class="headerlink" title="JDK1.8  Executors.newScheduledThreadPool(int)"></a>JDK1.8  Executors.newScheduledThreadPool(int)</h5><h5 id="Executors-newFixedThreadPool-integer"><a href="#Executors-newFixedThreadPool-integer" class="headerlink" title="Executors.newFixedThreadPool(integer);"></a>Executors.newFixedThreadPool(integer);</h5><ul><li><p>场景：执行长期的任务，性能好很多</p></li><li><p>主要的特点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads，nThreads<span class="token punctuation">,</span>keepAliveTime<span class="token operator">:</span><span class="token number">0L</span>，<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token class-name">MILLISECONDSnew</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                               <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>创建一个定长线程池可控制线程最大并发数超出的线程会在队列中等待。</li><li>newFixedThreadPool创建的线程池 corePoolsize和 maximumPoolsize值是相等的它使用的 LinkedBlockingQueue</li></ul><h5 id="xecutors-newSingleThreadExecutor"><a href="#xecutors-newSingleThreadExecutor" class="headerlink" title="xecutors.newSingleThreadExecutor();"></a>xecutors.newSingleThreadExecutor();</h5><ul><li><p>一个任务一个任务执行的场景</p></li><li><p>主要的特点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> corePoolSize<span class="token operator">:</span> <span class="token number">1</span>，maxmumPoolSize<span class="token operator">:</span> <span class="token number">1</span>keepAliveTime<span class="token operator">:</span> <span class="token number">0L</span>TimeUnit<span class="token punctuation">.</span><span class="token class-name">MILLISECONDSnew</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建一个单线程化的线程池,它只会用唯一的工作线程来执行任务,保证所有任务按照指定顺序执行。</li><li>newSingleThreadExecutor将 corePoolsize和 maximumPoolsize都设置为1它使用的LinkedBlockingQueue</li></ul></li></ul><h5 id="Executors-newCachedThreadPool"><a href="#Executors-newCachedThreadPool" class="headerlink" title="Executors.newCachedThreadPool()"></a>Executors.newCachedThreadPool()</h5><ul><li><p>适用：执行很多短期异步的小程序或者负载比较轻的服务器</p></li><li><p>主要的特点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> corePoolSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token class-name">MAX</span> VALUE<span class="token punctuation">,</span>keepAliveTime<span class="token operator">:</span> <span class="token number">60L</span>，<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token class-name">SECONDSnew</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>创建一个可缓存线程池,如果线程池长度超过处理需要,可灵活回收空闲线程,若无可回收,则新建线程。</p></li><li><p> newCachedThreadPool将 corePoolsize设置为0,将 maximumPoolsize设置为Integer.MAXVALUE使用的synchronousQueue,也就是说来了任务就创建线程运行当线程空闲超过60秒就销毁线程</p></li></ul></li></ul><h4 id="线程池的几个重要参数介绍？"><a href="#线程池的几个重要参数介绍？" class="headerlink" title="==线程池的几个重要参数介绍？=="></a>==线程池的几个重要参数介绍？==</h4><h5 id="7大参数"><a href="#7大参数" class="headerlink" title="7大参数"></a>7大参数</h5><h6 id="int-corePoolSize"><a href="#int-corePoolSize" class="headerlink" title="int corePoolSize"></a>int corePoolSize</h6><ul><li>线程池中的常驻核心线程数</li></ul><h6 id="int-maximumPoolSize"><a href="#int-maximumPoolSize" class="headerlink" title="int maximumPoolSize"></a>int maximumPoolSize</h6><ul><li>线程池能够容纳同时执行的最大线程数,此值必须大于等于1</li></ul><h6 id="long-keepAliveTime"><a href="#long-keepAliveTime" class="headerlink" title="long keepAliveTime"></a>long keepAliveTime</h6><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">在创建了线程池后,当有请求任务来之后,就会安排池中的线程去执行请求任务,近似理解为今日当值线程,当线程池中的线程数目达到 core PoolSize后就会把到达的任务放到缓有队列中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>多余的空闲线程的存活时间。线程池数量超过 core poolsize时,当空闲时间达到 keepAliveTime值时</li><li>多余空闲线程会被销毁直到只剩下 core Poolsize个线程为止</li></ul><h6 id="TimeUnit-unit"><a href="#TimeUnit-unit" class="headerlink" title="TimeUnit unit"></a>TimeUnit unit</h6><ul><li>keepAliveTime的单位</li></ul><h6 id="BlockingQueue-workQueue"><a href="#BlockingQueue-workQueue" class="headerlink" title="BlockingQueue workQueue"></a>BlockingQueue<runnable> workQueue</runnable></h6><ul><li>任务队列,被提交但尚未被执行的任务。</li></ul><h6 id="ThreadFactory-threadFactory"><a href="#ThreadFactory-threadFactory" class="headerlink" title="ThreadFactory threadFactory"></a>ThreadFactory threadFactory</h6><ul><li>生成线程池中工作线程的线程工厂,用于创建线程<strong>一般用默认的即可</strong></li></ul><h6 id="RejectedExecutionHandler-handler"><a href="#RejectedExecutionHandler-handler" class="headerlink" title="RejectedExecutionHandler handler"></a>RejectedExecutionHandler handler</h6><ul><li>拒绝策略,表示当队列满了并且工作线程大于等于线程池的最大线程数(maximumpoolsize)时拒绝请求执行的策略</li></ul><h4 id="考点线程池底层原理"><a href="#考点线程池底层原理" class="headerlink" title="==考点线程池底层原理=="></a>==考点线程池底层原理==</h4><ul><li><p>在创建了线程池后等待提交过来的任务请求</p></li><li><p>2当调用execute(方法添加一个请求任务时线程池会做如下判断</p></li><li><p>2.1如果正在运行的线程数量小于corePoolsize,那么马上创建线程运行这个任务</p></li><li><p>2.2如果正在运行的线程数量大于或等于corePoolsize那么将这个任务放入队列</p></li><li><p>2.3如果这时候队列满了且正在运行的线程数量还小于 maximumPoolsize那么还是要创建非核心线程立刻运行这个任务,</p></li><li><p>2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolsize那么线程池会启动饱和拒绝策略来执行。</p></li><li><p>3当一个线程完成任务时,它会从队列中取下一个任务来执行</p></li><li><p>4当一个线程无事可做超过一定的时间( keepAliveTime)时线程池会==判断==</p><ul><li>如果当前运行的线程数大于corePoolsize那么这个线程就被停掉所以线程池的所有任务完成后它最终会收缩到corePoolsize的大小</li></ul></li></ul><h4 id="生产上你如何设置合理参数？"><a href="#生产上你如何设置合理参数？" class="headerlink" title="==生产上你如何设置合理参数？=="></a>==生产上你如何设置合理参数？==</h4><h5 id="线程池的拒绝策略你谈谈"><a href="#线程池的拒绝策略你谈谈" class="headerlink" title="线程池的拒绝策略你谈谈"></a>线程池的拒绝策略你谈谈</h5><h6 id="什么是拒绝策略"><a href="#什么是拒绝策略" class="headerlink" title="什么是拒绝策略"></a>什么是拒绝策略</h6><ul><li>等待队列也已经排满了,再也塞不下新任务了同时，线程池中的max线程也达到了,无法继续为新任务服务</li><li>这时候我们就需要==拒绝策略机制合理==的处理这个问题</li></ul><h6 id="JDK内置的拒绝策略"><a href="#JDK内置的拒绝策略" class="headerlink" title="JDK内置的拒绝策略"></a>JDK内置的拒绝策略</h6><ul><li><p>AbortPolicyl(默认):直接抛出 Rejected Execution Exception异常阻止系统正常运行。</p></li><li><p>CallerRunsPolicy:”调用者运行”一种调节机制,该策略傚不会抛弃任务,也不会抛出异常,而是将某些任务回退到调用者，从而降低新任务的流量</p></li><li><p>Discardoldest polic:抛弃队列中等待最久的任务,然后把当前任务加入队中尝试再次提交当前仼务。</p></li><li><p>DiscardPolicy:直接丢弃任务,不予任何处理也不抛出异常。如果允许任务丢失,这是最好的一种方案。</p></li><li><p>以上内置拒绝策略均实现了RejectedExecutionHandler接口</p></li></ul><h5 id="考点：你在工作中单一的-固定数的可变的三种创建线程池的方法-你用那个多"><a href="#考点：你在工作中单一的-固定数的可变的三种创建线程池的方法-你用那个多" class="headerlink" title="==考点：你在工作中单一的/固定数的可变的三种创建线程池的方法,你用那个多?=="></a>==考点：你在工作中单一的/固定数的可变的三种创建线程池的方法,你用那个多?==</h5><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">一个都不用，我们生产上只能使用自定义的Executors中JDK已经给你提供了，为什么不用?来自阿里巴巴开发规范手册[强制]**线程池不允许使用Executors 去创建，而是通过ThreadPoolExecutor 的方式，这样规避资源耗尽的风险。的处理方式让写的同学更加明确线程池的运行规则，*说明:Executors 返回的线程池对象的弊端如下:1)FixedThreadPool和 SingleThreadPool允许的请求队列长度为lntegerMAXVALUE，可能会堆积大量的请求，从而导致00M。2)CachedThreadPool 和 ScheduledThreadPoo1:允许的创建线程数量为Integer.MAXVALUE，可能会创建大量的线程，从而导致 OOM。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在工作中是如何使用线程池的-是否自定义过线程池使用"><a href="#在工作中是如何使用线程池的-是否自定义过线程池使用" class="headerlink" title="==在工作中是如何使用线程池的,是否自定义过线程池使用=="></a>==在工作中是如何使用线程池的,是否自定义过线程池使用==</h5><ul><li>按照Executors中的照猫画虎就好了，就是最大线程数不要用Integer.MaxValue</li></ul><h5 id="合理配置线程池你是如何考虑的"><a href="#合理配置线程池你是如何考虑的" class="headerlink" title="==合理配置线程池你是如何考虑的?=="></a>==合理配置线程池你是如何考虑的?==</h5><ul><li><p>CPU密集型</p><ul><li><pre><code class="txt">CPU密集的意思是该任务需要大量的运算而没有阻塞CPU一直全速运行CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程)，而在单核CPU上(悲剧吧? = =!)无论你开几个模拟的多线程该任务都不可能得到加速因为CPU总的运算能力就那些。CPU密集型任务配置尽可能少的线程数量一般公式:CPU核数+1个线程的线程池</code></pre></li></ul></li></ul><ul><li>IO密集型（1O蜜集型即该任务需要大量的IO 即大量的阻塞。）<ul><li>由于10密集型任务线程并不是一直在执行任务则应配置尽可能多的线程如cPU核数”2</li><li>在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待所以在I0密集型任务中使用多线程可以大大的加速程序运行即使在单核CPU上这种加速主要就是利用了被浪费掉的阻塞时间</li><li>IO密集型时,大部分线程都阻塞故需要多配置线程数参考公式:CPU核数/1-阳塞系数<br>阻塞系数在0.8~09之间<br>比如8核CPU:8/(1-09)=80个线程数</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="专刊篇" scheme="https://mykkto.github.io/categories/%E4%B8%93%E5%88%8A%E7%AF%87/"/>
    
    
    <category term="juc" scheme="https://mykkto.github.io/tags/juc/"/>
    
    <category term="面试题" scheme="https://mykkto.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>灰度发布方案</title>
    <link href="https://mykkto.github.io/posts/f83c265d.html"/>
    <id>https://mykkto.github.io/posts/f83c265d.html</id>
    <published>2022-11-27T05:22:33.000Z</published>
    <updated>2022-12-12T13:20:39.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p><a href="https://gitee.com/TK_LIMR/springcloud2021To2021.git">https://gitee.com/TK_LIMR/springcloud2021To2021.git</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202212042121559.png"></p><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><p>一、gateway</p><ul><li>前置知识</li><li>什么是灰度发布</li><li>灰度发布落地方案</li><li>原理图</li><li>案例： <ul><li>服务注册</li><li>构建网关</li><li>编写灰度用户</li></ul></li></ul><p>二、openresty</p><ul><li></li></ul><h2 id="Ⅰ、gateway-灰度"><a href="#Ⅰ、gateway-灰度" class="headerlink" title="Ⅰ、gateway 灰度"></a>Ⅰ、gateway 灰度</h2><h3 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h3><p>1.nacos 服务注册与发现</p><p>2.本地负载均衡器算法</p><p>3.gateway 网关</p><p>4.ThreadLocal</p><p>1.什么是灰度发布？<br>2.什么是灰度策略?<br>3.灰度发布落地方案有哪些<br>4.灰度发布架构设计原理 nginx+lua？<br>5.如何基于GateWay+Nacos构建灰度环境<br>6.GateWay负载均衡路由算法原理——改写<br>7.如何重写本地负载均衡器，走灰度环境<br>8.为何不基于nginx+lua实现？而使用GateWay<br>9.代码落地实战：构建微服务灰度发布环境</p><h3 id="二、什么是灰度发布"><a href="#二、什么是灰度发布" class="headerlink" title="二、什么是灰度发布"></a>二、什么是灰度发布</h3><p>灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p><p>灰度期：灰度发布开始到结束期间的这一段时间，称为灰度期。</p><p>灰度发布能及早获得用户的意见反馈，完善产品功能，提升产品质量，让用户参与产品测试，加强与用户互动，降低产品升级所影响的用户范围。</p><p>整合服务注册中心</p><h3 id="三、灰度发布落地方案"><a href="#三、灰度发布落地方案" class="headerlink" title="三、灰度发布落地方案"></a>三、灰度发布落地方案</h3><p>1.nginx+lua+nacos 实现（需要懂lua脚本），通过nginx实现效率高【本bolg 有 lua 教程】</p><p>2.gateway+nacos+重写本地负载均衡器 （java实现）—java程序员推荐 性能没有直接</p><h3 id="四、原理图"><a href="#四、原理图" class="headerlink" title="四、原理图"></a>四、原理图</h3><h3 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h3><h2 id="Ⅱ、nginx-灰度"><a href="#Ⅱ、nginx-灰度" class="headerlink" title="Ⅱ、nginx 灰度"></a>Ⅱ、nginx 灰度</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><h2 id="参考文章-↓"><a href="#参考文章-↓" class="headerlink" title="参考文章 ↓"></a>参考文章 ↓</h2><p>docker-nacos单体（快速）</p><p><a href="https://www.jb51.net/article/248585.htm">https://www.jb51.net/article/248585.htm</a></p><p>gatway:</p><p><a href="https://blog.csdn.net/u014001523/article/details/125400266">https://blog.csdn.net/u014001523/article/details/125400266</a></p><p><a href="https://blog.csdn.net/qq_43692950/article/details/125226460?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-125226460-blog-125400266.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-125226460-blog-125400266.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=2">https://blog.csdn.net/qq_43692950/article/details/125226460?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-125226460-blog-125400266.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-125226460-blog-125400266.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=2</a></p><p>openresty:<a href="https://blog.csdn.net/u014001523/article/details/125400318">https://blog.csdn.net/u014001523/article/details/125400318</a></p><p>openfeign重写：<a href="https://www.itmuch.com/spring-cloud-sum/hystrix-threadlocal/">https://www.itmuch.com/spring-cloud-sum/hystrix-threadlocal/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式技术栈" scheme="https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="gateway" scheme="https://mykkto.github.io/tags/gateway/"/>
    
    <category term="灰度发布" scheme="https://mykkto.github.io/tags/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
    <category term="nginx" scheme="https://mykkto.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>面试题-01</title>
    <link href="https://mykkto.github.io/posts/726c3129.html"/>
    <id>https://mykkto.github.io/posts/726c3129.html</id>
    <published>2022-10-22T08:16:56.000Z</published>
    <updated>2023-01-02T12:57:46.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li>Spring-tx 事务失效场景<ul><li>检查异常</li><li>错误的 try-catch</li><li>切面顺序</li><li>非public场景</li><li>父子容器</li><li>本类方法调用</li><li>原子性（锁失效）</li></ul></li><li>数据库索引失效场景</li><li></li></ul><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p><a href="https://gitee.com/TK_LIMR/springcloud2021To2021">https://gitee.com/TK_LIMR/springcloud2021To2021</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231430708.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="一、Spring-tx-事务失效场景"><a href="#一、Spring-tx-事务失效场景" class="headerlink" title="一、Spring-tx 事务失效场景"></a>一、Spring-tx 事务失效场景</h3><h3 id="1、检查异常"><a href="#1、检查异常" class="headerlink" title="1、检查异常"></a>1、检查异常</h3><h4 id="1、失效场景"><a href="#1、失效场景" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>这边构造一个不存在的文件流，造成异常模拟</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231431260.png"></p><p>数据库情况</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231432351.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231432321.png"></p><p>很明显事务失效了</p><h4 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>加上注解，实现有感知回滚</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231450351.png"></p><h3 id="2、错误的-try-catch"><a href="#2、错误的-try-catch" class="headerlink" title="2、错误的 try-catch"></a>2、错误的 try-catch</h3><h4 id="1、失效场景-1"><a href="#1、失效场景-1" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>自己try 后，外部调用的方法，无感知，则提交了没有回滚</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231457909.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231457334.png"></p><h4 id="2、解决方案-1"><a href="#2、解决方案-1" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p><strong>方法一：</strong></p><p>当用 try-catch 出现异常的时候，显示的往上抛，让上层调用者感知</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231459121.png"></p><p><strong>方法二：</strong></p><p>调用事务方法，回滚功能，可以显示的提交或者回滚，回滚效果和向上抛异常时一样的</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231503903.png"></p><h3 id="3、切面顺序"><a href="#3、切面顺序" class="headerlink" title="3、切面顺序"></a>3、切面顺序</h3><h4 id="1、失效场景-2"><a href="#1、失效场景-2" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>基于检查异常+try-catch的处理后，使用了后置通知发现依然回滚失败</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231534763.png"></p><p><strong>原因</strong></p><p>主要因为先进入事务，然后进入后置(有异常)，在进入目标方法，此时后置并没有往事务上抛，所以无感知</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231637927.png"></p><h4 id="2、解决方案（不推荐）"><a href="#2、解决方案（不推荐）" class="headerlink" title="2、解决方案（不推荐）"></a>2、解决方案（不推荐）</h4><p>设置后置的优先级高于事务，这样事务在后面运行，既可以感知到异常</p><p><strong>方法一</strong></p><p>在切面 catch 时候采用 检查异常 或者 try-catch 上面两种方法在 切面方法改动</p><p><strong>方法二</strong></p><p>设置优先级高于事务</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231650943.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231654793.png"></p><h3 id="4、非public场景"><a href="#4、非public场景" class="headerlink" title="4、非public场景"></a>4、非public场景</h3><h4 id="1、失效场景-3"><a href="#1、失效场景-3" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>方法设置为默认 非public ，事务失效</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231701980.png"></p><h4 id="2、解决方案（不推荐）-1"><a href="#2、解决方案（不推荐）-1" class="headerlink" title="2、解决方案（不推荐）"></a>2、解决方案（不推荐）</h4><p>修改默认配置，默认true 只对 public 方法生效</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231703269.png"></p><h3 id="5、父子容器"><a href="#5、父子容器" class="headerlink" title="5、父子容器"></a>5、父子容器</h3><h4 id="1、失效场景-4"><a href="#1、失效场景-4" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>简单来说就是放在 controller 上调用 service，也是开发中常见的场景</p><p>原因：子容器扫描范围过大，把未加事务配置的 service 扫描进来</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210231942105.png"></p><h4 id="2、解决方案-2"><a href="#2、解决方案-2" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>在springboot遇不到，因为只有一个容器。通常出现在传统项目（spring+MVC整合的时候），会遇到扫描父子容器。Spring扫spring,MVC扫mvc自己的包，就不会出现这个问题，而不是直接扫整个上层包</p><h3 id="6、本类方法调用"><a href="#6、本类方法调用" class="headerlink" title="6、本类方法调用"></a>6、本类方法调用</h3><h4 id="1、失效场景-5"><a href="#1、失效场景-5" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>本类两个方法相互调用</p><p><strong>原因</strong></p><p>本类调用，不经过代理，因此无法增强，导致两个事务公用一个</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232034376.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232038217.png"></p><h4 id="2、解决方案-3"><a href="#2、解决方案-3" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p><strong>方法一</strong></p><p>自己注入自己</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232037056.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232037020.png"></p><p><strong>方法二</strong></p><p>从 Aop中代理调用</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232044254.png"></p><h3 id="7、原子性（锁失效）"><a href="#7、原子性（锁失效）" class="headerlink" title="7、原子性（锁失效）"></a>7、原子性（锁失效）</h3><h4 id="1、失效场景-6"><a href="#1、失效场景-6" class="headerlink" title="1、失效场景"></a>1、失效场景</h4><p>Jmeter 模拟100个线程每秒</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232143042.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232142003.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232141576.png"></p><h4 id="2、解决方案-4"><a href="#2、解决方案-4" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>用 synchronize 能解决？？</p><p>答案：不能</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232147419.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232147341.png"></p><p><strong>@Transactional 没有保证原子的原因</strong>：</p><p>事务的原子性仅覆盖 inset,update,delete ；select 语句不覆盖，select 方法不阻塞</p><p><strong>@Transactional 导致 synchronize 失效的原因</strong>：</p><p>synchronize 仅保证目标方法的原子性，环绕方法的还有 commit (事务提交)等操作，他们并未处于 sync 同步块中</p><p><strong>方案1：（不推荐）</strong></p><p>修改 synchronize 位置范围扩大至代理方法调用(上层并发接口位置)</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202210232230437.png"></p><p><strong>方案2：（推荐）</strong></p><p>修改 SQL 语句 把 select 替换成 select …for update</p><h3 id="二、数据库索引失效场景"><a href="#二、数据库索引失效场景" class="headerlink" title="二、数据库索引失效场景"></a>二、数据库索引失效场景</h3><p><strong>1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效</strong></p><p><strong>2、or语句前后没有同时使用索引</strong></p><p>当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效</p><p><strong>3、组合索引，不是使用第一列索引，索引失效</strong></p><p><strong>4、如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不使用索引</strong></p><p>数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</p><p><strong>5、在索引字段上使用not，&lt;&gt;，!=</strong></p><p>不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p><p><strong>6、对索引字段进行计算操作 或者 字段上使用函数。</strong></p><p><strong>7、当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效</strong></p><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><h4 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h4><h4 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h4><h4 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h4><h2 id="参考-↓"><a href="#参考-↓" class="headerlink" title="参考 ↓"></a>参考 ↓</h2><p>springboot 配置 jdbctemplate :<a href="https://blog.csdn.net/u014553029/article/details/101130291">https://blog.csdn.net/u014553029/article/details/101130291</a></p><p>事务失效完整场景：<a href="https://www.csdn.net/tags/MtTagg3sMjU0NTEtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/MtTagg3sMjU0NTEtYmxvZwO0O0OO0O0O.html</a></p><p>索引失效：<a href="https://m.php.cn/article/487049.html">https://m.php.cn/article/487049.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试题" scheme="https://mykkto.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试" scheme="https://mykkto.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="事务" scheme="https://mykkto.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="spring-tx" scheme="https://mykkto.github.io/tags/spring-tx/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ-入门+实战篇</title>
    <link href="https://mykkto.github.io/posts/faf1dfc8.html"/>
    <id>https://mykkto.github.io/posts/faf1dfc8.html</id>
    <published>2022-10-08T15:21:32.000Z</published>
    <updated>2022-11-12T15:07:08.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="源代码位置"><a href="#源代码位置" class="headerlink" title="源代码位置"></a>源代码位置</h2><p><a href="https://gitee.com/TK_LIMR/springcloud2021To2021">https://gitee.com/TK_LIMR/springcloud2021To2021</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210082337634.png"></p><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li><p>入门</p><ul><li>概述</li><li>快速入门案例</li><li>工作模式案例</li><li>整合Spring</li><li>整合SpringBoot</li></ul></li><li><p>实战</p><ul><li>高级特性<ul><li>消息可靠性投递（生产者 -&gt; MQ）</li><li>Consumer ACK (MQ -&gt; 消费者)</li><li>消费端限流</li><li>TTL 过期时间</li><li>死信队列</li><li>★ 延迟队列 </li><li>X 日志与监控（了解）</li><li>X 消息可靠性分析与追踪（慎用）</li><li>X 管理</li></ul></li><li>应用问题<ul><li>消息可靠性保障<ul><li>消息补偿机制</li></ul></li><li>消息幂等性处理<ul><li>乐观锁解决方案</li></ul></li></ul></li><li>高可用集群搭建</li></ul></li></ul><h2 id="Ⅰ、入门篇"><a href="#Ⅰ、入门篇" class="headerlink" title="Ⅰ、入门篇"></a>Ⅰ、入门篇</h2><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、MQ概述"><a href="#1、MQ概述" class="headerlink" title="1、MQ概述"></a>1、MQ概述</h3><h4 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h4><p>MQ全称 Message Queue（消息队列），是在消息的传输过程中保存消息的容器。多用于分布式系统之间进行通信</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092134272.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092134946.png"></p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ul><li>MQ，消息队列，存储消息的中间件 </li><li>分布式系统通信两种方式：直接远程调用 和 借助第三方 完成间接通信 </li><li>发送方称为生产者，接收方称为消费者</li></ul><h3 id="2、MQ优势和劣势"><a href="#2、MQ优势和劣势" class="headerlink" title="2、MQ优势和劣势"></a>2、MQ优势和劣势</h3><h4 id="1、优势"><a href="#1、优势" class="headerlink" title="1、优势"></a>1、优势</h4><ul><li>应用解耦</li><li>异步提速</li><li>削峰填谷</li></ul><h4 id="1-1、应用解耦"><a href="#1-1、应用解耦" class="headerlink" title="1-1、应用解耦"></a>1-1、应用解耦</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092141083.png"></p><p>传统方式，订单系统要发送指定系统，或者打断指定系统的发送需要修改订单系统代码</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092143705.png"></p><p>引入 mq，发送给mq即可，选择或者打断指定系统发送只需要控制 topic规则即可，使得应用解耦，提升容错性和可维护性</p><h4 id="1-2、异步提速"><a href="#1-2、异步提速" class="headerlink" title="1-2、异步提速"></a>1-2、异步提速</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092147654.png"></p><p>一个下单操作耗时：20 + 300 + 300 + 300 = 920ms ，用户点击完下单按钮后，需要等待920ms才能得到下单响应，太慢！ </p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092148893.png"></p><p>用户点击完下单按钮后，只需等待25ms就能得到下单响应 (20 + 5 = 25ms)。 </p><p>提升用户体验和系统吞吐量（单位时间内处理请求的数目）</p><h4 id="1-3、削峰填谷"><a href="#1-3、削峰填谷" class="headerlink" title="1-3、削峰填谷"></a>1-3、削峰填谷</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092150352.png"></p><p>传统模式当大量并发来临，可能将系统冲垮</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092150963.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092200717.png"></p><p>使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰 </p><p>就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做“填谷”。 </p><h4 id="1-4、小结"><a href="#1-4、小结" class="headerlink" title="1-4、小结"></a>1-4、小结</h4><ul><li>应用解耦：提高系统容错性和可维护性</li><li>异步提速：提升用户体验和系统吞吐量</li><li>削峰填谷：提高系统稳定性</li></ul><h4 id="2、劣势"><a href="#2、劣势" class="headerlink" title="2、劣势"></a>2、劣势</h4><ul><li>系统可用性降低</li><li>系统复杂度变高</li><li>一致性问题</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092203294.png"></p><h4 id="2-1、系统可用性降低"><a href="#2-1、系统可用性降低" class="headerlink" title="2-1、系统可用性降低"></a>2-1、系统可用性降低</h4><p>系统引入的外部依赖越多，系统稳定性越差，需要保证可用的越多；一旦MQ宕机，就会对业务影响（如何保证高可用？？  集群）</p><h4 id="2-2、系统复杂度提高"><a href="#2-2、系统复杂度提高" class="headerlink" title="2-2、系统复杂度提高"></a>2-2、系统复杂度提高</h4><p>传统的系统是同步调用，现在通过MQ异步调用（如何保证消息没有重复消费，怎么处理消息丢失问题，以及消息的有序性）</p><h4 id="2-3、一致性问题"><a href="#2-3、一致性问题" class="headerlink" title="2-3、一致性问题"></a>2-3、一致性问题</h4><p>A系统处理完业务，通过MQ给 B,C,D 三个系统发送消息，如果B,C成功、D失败，如何保证消息数据的一致性？</p><h4 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2-4、小结"></a>2-4、小结</h4><p>既然 MQ 有优势也有劣势，那么使用 MQ 需要满足什么条件呢？</p><ul><li>生产者不需要从消费者处获取反馈；上层不需要等待下层回调处理，才能让异步成为可能</li><li>容许短暂的不一致性</li><li>在解耦、提速、削峰方面的收益，大于管理MQ的成本</li></ul><h3 id="3、常见MQ对比"><a href="#3、常见MQ对比" class="headerlink" title="3、常见MQ对比"></a>3、常见MQ对比</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092229549.png"></p><h3 id="4、RabbitMQ简介"><a href="#4、RabbitMQ简介" class="headerlink" title="4、RabbitMQ简介"></a>4、RabbitMQ简介</h3><h4 id="1、架构图"><a href="#1、架构图" class="headerlink" title="1、架构图"></a>1、架构图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092235471.png"></p><h4 id="2、组件说明（↑）"><a href="#2、组件说明（↑）" class="headerlink" title="2、组件说明（↑）"></a>2、组件说明（↑）</h4><ul><li>Broker：接收和分发消息的应用，RabbitMQ Server就是 Message Broker</li><li>Virtual host：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网 络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多 个vhost，每个用户在自己的 vhost 创建 exchange／queue 等 </li><li>Connection：publisher／consumer 和 broker 之间的 TCP 连接</li><li>Channel：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线 程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection  极大减少了操作系统建立 TCP connection 的开销</li><li>Exchange：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到  queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</li><li>Queue：消息最终被送到这里等待 consumer 取走</li><li>Binding：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</li></ul><h4 id="3、RabbitMQ-6中工作模式"><a href="#3、RabbitMQ-6中工作模式" class="headerlink" title="3、RabbitMQ 6中工作模式"></a>3、RabbitMQ 6中工作模式</h4><p>简单模式、work queues、Publish/Subscribe 发布与订阅模式、Routing </p><p>路由模式、Topics 主题模式、RPC 远程调用模式（远程调用，不太算 MQ；不作介绍）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092247367.png"></p><h4 id="4、JMS"><a href="#4、JMS" class="headerlink" title="4、JMS"></a>4、<strong>JMS</strong></h4><ul><li>JMS 即   Java 平台中关于面向消息中间件的API </li><li>JMS 是 JavaEE 规范中的一种，类比JDBC</li><li>很多消息中间件都实现了JMS规范，例如：ActiveMQ。RabbitMQ 官方没有提供 JMS 的实现包，但是开源社区有</li></ul><h4 id="5、RabbitMQ小结"><a href="#5、RabbitMQ小结" class="headerlink" title="5、RabbitMQ小结"></a>5、RabbitMQ小结</h4><ul><li>RabbitMQ 是基于 AMQP 协议使用 Erlang 语言开发的一款消息队列产品</li><li>RabbitMQ提供了6种工作模式，我们学习5种</li><li>AMQP 是协议，类比HTTP</li><li>JMS 是 API 规范接口，类比 JDBC</li></ul><h2 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h2><h3 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h3><p>使用简单模式完成消息传递：</p><p>① 创建工程（生成者、消费者） </p><p>② 分别添加依赖 </p><p>③ 编写生产者发送消息 </p><p>④ 编写消费者接收消息</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092257321.png"></p><h3 id="2、小结"><a href="#2、小结" class="headerlink" title="2、小结"></a>2、小结</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210092258177.png"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序 </li><li>C：消费者：消息的接收者，会一直等待消息到来（线程一直在监听）</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li></ul><h2 id="三、工作模式"><a href="#三、工作模式" class="headerlink" title="三、工作模式"></a>三、工作模式</h2><h3 id="1、Work-queues-工作队列模式"><a href="#1、Work-queues-工作队列模式" class="headerlink" title="1、Work queues 工作队列模式"></a>1、<strong>Work queues 工作队列模式</strong></h3><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210102229031.png"></p><h4 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h4><ul><li><strong>Work Queues：</strong>与入门程序的简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息</li><li><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</li></ul><h4 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210102236513.png"></p><h4 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。 </li><li>Work Queues  对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。例如：短信服务部署多个，只需要有一个节点成功发送即可。</li></ul><h3 id="2、Pub-Sub-订阅模式"><a href="#2、Pub-Sub-订阅模式" class="headerlink" title="2、Pub/Sub 订阅模式"></a>2、<strong>Pub/Sub 订阅模式</strong></h3><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210102249529.png"></p><p>在订阅模型中，多了一个 Exchange 角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接收者，会一直等待消息到来</li><li>Queue：消息队列，接收消息、缓存消息</li><li>X：Exchange：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式）的队列</li></ul></li></ul><p><strong>Exchange</strong>（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210102309609.png"></p><p>小结：</p><ul><li>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到</li><li>发布订阅模式与工作队列模式的区别：<ul><li>工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机</li><li>发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机) </li><li>发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑定到默认的交换机</li></ul></li></ul><h3 id="3、Routing-路由模式"><a href="#3、Routing-路由模式" class="headerlink" title="3、Routing 路由模式"></a>3、<strong>Routing 路由模式</strong></h3><h4 id="1、模式说明"><a href="#1、模式说明" class="headerlink" title="1、模式说明"></a>1、模式说明</h4><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 RoutingKey（路由key） </li><li>消息的发送方在向 Exchange 发送消息给 Consumer 时，也必须指定消息的 RoutingKey</li><li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 Routing Key 进行判断，只有队列的 Routingkey 与消息的 Routing key 完全一致，才会接收到消息</li></ul><h4 id="2、图解"><a href="#2、图解" class="headerlink" title="2、图解"></a>2、图解</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210102333166.png"></p><ul><li>P：生产者，向 Exchange 发送消息，发送消息时，会指定一个routing key</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给与 routing key 完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要 routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要 routing key 为 info、error、warning 的消息</li></ul><h4 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210111953871.png"></p><h4 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h4><p><strong>Routing</strong> 模式要求队列在绑定交换机时要指定 <strong>routing key</strong>，消息会转发到符合 routing key 的队列。</p><h3 id="4、Topics-通配符模式"><a href="#4、Topics-通配符模式" class="headerlink" title="4、Topics 通配符模式"></a>4、<strong>Topics 通配符模式</strong></h3><h4 id="1、说明-1"><a href="#1、说明-1" class="headerlink" title="1、说明"></a>1、说明</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210111955491.png"></p><p>Q1 Queue：绑定的是 usa.# ，因此凡是以 usa. 开头的 routing key 都会被匹配到</p><p>Q2 Queue：绑定的是 #.news ，因此凡是以 .news 结尾的 routing key 都会被匹配</p><h4 id="2、代码-1"><a href="#2、代码-1" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210112101689.png"></p><h4 id="3、小结-1"><a href="#3、小结-1" class="headerlink" title="3、小结"></a>3、小结</h4><p>Topic 主题模式可以实现 Pub/Sub 发布与订阅模式和 Routing 路由模式的功能，只是 Topic 在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h3 id="5、工作模式总结"><a href="#5、工作模式总结" class="headerlink" title="5、工作模式总结"></a>5、工作模式总结</h3><ol><li><p>简单模式 HelloWorld ：一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。 </p></li><li><p>工作队列模式 Work Queue ：一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。 </p></li><li><p>发布订阅模式 Publish/subscribe ：需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。 </p></li><li><p>路由模式 Routing ：需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。 </p></li><li><p>通配符模式 Topic ：需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</p></li></ol><h2 id="四、Spring-整合-RabbitMQ"><a href="#四、Spring-整合-RabbitMQ" class="headerlink" title="四、Spring 整合 RabbitMQ"></a>四、Spring 整合 RabbitMQ</h2><h3 id="1、代码"><a href="#1、代码" class="headerlink" title="1、代码"></a>1、代码</h3><h4 id="1-1、生产者"><a href="#1-1、生产者" class="headerlink" title="1-1、生产者"></a>1-1、生产者</h4><p>① 创建生产者工程 </p><p>② 添加依赖 </p><p>③ 配置整合 </p><p>④ 编写代码发送消息 </p><h4 id="1-2、消费者"><a href="#1-2、消费者" class="headerlink" title="1-2、消费者"></a>1-2、消费者</h4><p>① 创建生产者工程 </p><p>② 添加依赖 </p><p>③ 配置整合 </p><p>④ 编写消息监听器</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210112244387.png"></p><h3 id="2、小结-1"><a href="#2、小结-1" class="headerlink" title="2、小结"></a>2、小结</h3><ul><li>使用 Spring 整合 RabbitMQ 将组件全部使用配置方式实现，简化编码 </li><li>Spring 提供 RabbitTemplate 简化发送消息 API </li><li>使用监听机制简化消费者编码</li></ul><h2 id="五、SpringBoot-整合-RabbitMQ"><a href="#五、SpringBoot-整合-RabbitMQ" class="headerlink" title="五、SpringBoot 整合 RabbitMQ"></a>五、SpringBoot 整合 RabbitMQ</h2><h3 id="1、代码-1"><a href="#1、代码-1" class="headerlink" title="1、代码"></a>1、代码</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210112252668.png"></p><h2 id="Ⅱ、实战篇"><a href="#Ⅱ、实战篇" class="headerlink" title="Ⅱ、实战篇"></a>Ⅱ、实战篇</h2><h2 id="一、高级特性"><a href="#一、高级特性" class="headerlink" title="一、高级特性"></a>一、高级特性</h2><h3 id="1、消息可靠性投递（生产者-gt-MQ）"><a href="#1、消息可靠性投递（生产者-gt-MQ）" class="headerlink" title="1、消息可靠性投递（生产者  ->  MQ）"></a>1、消息可靠性投递（生产者  -&gt;  MQ）</h3><hr><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。 </p><ul><li>确认模式</li><li>回退模式</li></ul><p><strong>rabbitmq 整个消息投递的路径为：</strong></p><p>producer  —&gt; rabbitmq broker —&gt; exchange —&gt; queue —&gt; consumer</p><ul><li>消息从 producer 到 exchange 则会返回一个 confirmCallback 的回调</li><li>消息从 exchange 到 queue 投递失败则返回一个 returnCallback 回调</li></ul><p>我们可以利用这两个 callback 回调 控制消息的可靠性投递</p><h4 id="2、代码-2"><a href="#2、代码-2" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210162224718.png"></p><h4 id="3、小结-2"><a href="#3、小结-2" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li><p>设置ConnectionFactory的publisher-confirms=”true” 开启 确认模式</p></li><li><p>使用rabbitTemplate.setConfirmCallback设置回调函数。当消息发送到exchange后回 </p><p>调confirm方法。在方法中判断ack，如果为true，则发送成功，如果为false，则发 </p><p>送失败，需要处理</p></li><li><p>设置ConnectionFactory的publisher-returns=”true” 开启 退回模式</p></li><li><p>使用rabbitTemplate.setReturnCallback设置退回函数，当消息从exchange路由到 </p><p>queue失败后，如果设置了rabbitTemplate.setMandatory(true)参数，则会将消息退 </p><p>回给producer。并执行回调函数returnedMessage</p></li><li><p>在RabbitMQ中也提供了事务机制，但是性能较差，此处不做讲解。 </p><p>使用channel下列方法，完成事务控制： </p><p>txSelect(), 用于将当前channel设置成transaction模式 </p><p>txCommit()，用于提交事务 </p><p>txRollback(),用于回滚事务</p></li></ul><h3 id="2、Consumer-Ack"><a href="#2、Consumer-Ack" class="headerlink" title="2、Consumer Ack"></a>2、<strong>Consumer Ack</strong></h3><p><strong>MQ -&gt; 消费者</strong></p><h4 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h4><p>ack指Acknowledge，确认。 表示消费端收到消息后的确认方式。 </p><p>有三种确认方式： </p><p>• 自动确认：acknowledge=”none” </p><p>• 手动确认：acknowledge=”manual” </p><p>• 根据异常情况确认：acknowledge=”auto”，（这种方式使用麻烦，不作讲解）</p><p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。</p><h4 id="2、代码-3"><a href="#2、代码-3" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210201914384.png"></p><h4 id="3、小结-3"><a href="#3、小结-3" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>在rabbit:listener-container标签中设置acknowledge属性，设置ack方式 <ul><li>none：自动确认，</li><li>manual：手动确认 </li></ul></li><li>如果在消费端没有出现异常，则调用channel.basicAck(deliveryTag,false);方法确认签收消息 </li><li>如果出现异常，则在catch中调用 basicNack或 basicReject，拒绝消息，让MQ重新发送消息。</li></ul><h3 id="3、消息可靠性总结"><a href="#3、消息可靠性总结" class="headerlink" title="3、消息可靠性总结"></a>3、消息可靠性总结</h3><ul><li><p>持久化 </p><ul><li>exchange要持久化 </li><li>queue要持久化 </li><li>message要持久化 </li></ul></li><li><p>生产方确认Confirm </p></li><li><p>消费方确认Ack</p></li><li><p>Broker高可用</p></li></ul><h3 id="4、消费端限流"><a href="#4、消费端限流" class="headerlink" title="4、消费端限流"></a>4、消费端限流</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202118692.png"></p><h4 id="2、代码-4"><a href="#2、代码-4" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210162342353.png"></p><h4 id="3、小结-4"><a href="#3、小结-4" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>在<a href="rabbit:listener-container">rabbit:listener-container</a> 中配置 prefetch属性设置消费端一次拉取多少消息 </li><li>消费端的确认模式一定为手动确认。acknowledge=”manual”</li></ul><h3 id="5、TTL-过期时间"><a href="#5、TTL-过期时间" class="headerlink" title="5、TTL 过期时间"></a>5、TTL 过期时间</h3><h4 id="1、概述-2"><a href="#1、概述-2" class="headerlink" title="1、概述"></a>1、概述</h4><ul><li>TTL 全称 Time To Live（存活时间/过期时间）</li><li>当消息到达存活时间后，还没有被消费，会被自动清除</li><li>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202120659.png"></p><h4 id="2、代码-5"><a href="#2、代码-5" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202131038.png"></p><h4 id="3、小结-5"><a href="#3、小结-5" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>设置队列过期时间使用参数：x-message-ttl，单位：ms(毫秒)，会对整个队列消息统一过期</li><li>设置消息过期时间使用参数：expiration。单位：ms(毫秒)，当该消息在队列头部时（消费时），会单独判断这一消息是否过期</li><li>如果两者都进行了设置，以时间短的为准</li></ul><h3 id="6、死信队列"><a href="#6、死信队列" class="headerlink" title="6、死信队列"></a>6、死信队<strong>列</strong></h3><h4 id="1、概述-3"><a href="#1、概述-3" class="headerlink" title="1、概述"></a>1、概述</h4><p><strong>死信队列其实说的就是私信交换机</strong></p><p>死信队列，英文缩写：DLX 。Dead Letter Exchange（死信交换机），当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202139176.png"></p><p><strong>消息成为死信的三种情况：</strong> </p><ol><li><p>队列消息长度到达限制； （能放10条，放了11条，1条超过被成为死信），可以设置队列存放的数量</p></li><li><p>消费者拒接消费消息，basicNack/basicReject；并且不把消息重新放入原目标队列,requeue=false； </p></li><li><p>原队列存在消息过期设置，消息到达超时时间未被消费；</p></li></ol><p><strong>队列绑定死信交换机</strong></p><p>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202143643.png"></p><h4 id="2、代码-6"><a href="#2、代码-6" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202224114.png"></p><h4 id="3、小结-6"><a href="#3、小结-6" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>死信交换机和死信队列和普通的没有区别</li><li>当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</li><li>消息成为死信的三种情况<ul><li>队列消息长度到达限制</li><li>消费者拒接消费消息，并且不重回队列</li><li>原队列存在消息过期设置，消息到达超时时间未被消费</li></ul></li></ul><h3 id="7、延迟队列"><a href="#7、延迟队列" class="headerlink" title="7、延迟队列"></a>7、延迟队列</h3><h4 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h4><p>延迟队列，即消息进入队列后不会立即被消费，只有到达指定时间后，才会被消费</p><p><strong>需求：</strong></p><ul><li>下单后，30分钟未支付，取消订单，回滚库存</li><li>新用户注册成功7天后，发送短信问候</li></ul><p><strong>实现方式：</strong></p><ul><li>定时器</li><li>延迟队列</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202243511.png"></p><p>很可惜，在RabbitMQ中并未提供延迟队列功能。 </p><p>但是可以使用：TTL+死信队列 组合实现延迟队列的效果</p><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202245709.png"></p><h4 id="2、代码-7"><a href="#2、代码-7" class="headerlink" title="2、代码"></a>2、代码</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/mq/rabbitmq/202210202245024.png"></p><h4 id="3、小结-7"><a href="#3、小结-7" class="headerlink" title="3、小结"></a>3、小结</h4><ul><li>延迟队列 指消息进入队列后，可以被延迟一定时间，再进行消费</li><li>RabbitMQ没有提供延迟队列功能，但是可以使用 ： TTL + DLX 来实现延迟队列效果</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="二、应用问题"><a href="#二、应用问题" class="headerlink" title="二、应用问题"></a>二、应用问题</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><h2 id="参考文献-↓"><a href="#参考文献-↓" class="headerlink" title="参考文献 ↓"></a>参考文献 ↓</h2><p>windown安装 rabbitmq ：<a href="https://blog.csdn.net/qq_25919879/article/details/113055350">https://blog.csdn.net/qq_25919879/article/details/113055350</a></p><p>docker 安装 rabbitmq：<a href="https://www.jb51.net/article/233585.htm">https://www.jb51.net/article/233585.htm</a> </p><p>docker 安装后 界面端功能缺失问题：<a href="https://blog.csdn.net/qq_45369827/article/details/115921401">https://blog.csdn.net/qq_45369827/article/details/115921401</a></p><p>springboot-rabbitmq 确认模式弃用配置：<a href="https://blog.csdn.net/z69183787/article/details/109371628">https://blog.csdn.net/z69183787/article/details/109371628</a></p><p>单元测试，发布确认回调 ack 总是 false：<a href="https://blog.csdn.net/dh554112075/article/details/90137869">https://blog.csdn.net/dh554112075/article/details/90137869</a></p><p>spring-boot 死信队列：<a href="https://blog.csdn.net/weixin_52062043/article/details/127077941">https://blog.csdn.net/weixin_52062043/article/details/127077941</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="消息中间件" scheme="https://mykkto.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="amqp" scheme="https://mykkto.github.io/tags/amqp/"/>
    
    <category term="rabbitmq" scheme="https://mykkto.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Netty-实用篇</title>
    <link href="https://mykkto.github.io/posts/bb8f1edf.html"/>
    <id>https://mykkto.github.io/posts/bb8f1edf.html</id>
    <published>2022-08-21T05:22:33.000Z</published>
    <updated>2022-11-12T15:07:08.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="源代码位置"><a href="#源代码位置" class="headerlink" title="源代码位置"></a>源代码位置</h2><p><a href="https://gitee.com/TK_LIMR/springcloud2021To2021">https://gitee.com/TK_LIMR/springcloud2021To2021</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201706838.png"></p><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><ul><li>网络编程<ul><li>三次握手</li><li>基础后面会在其他文章更新</li></ul></li><li>nio<ul><li>三大组件</li><li>ByteBuffer详解</li><li>文件编程</li><li>网络编程</li><li>nio vs bio vs aio</li></ul></li><li>netty<ul><li>入门</li><li>进阶</li><li>优化</li><li>实战</li><li>源码</li></ul></li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202208201259923.png"></p><h2 id="Ⅰ、NIO"><a href="#Ⅰ、NIO" class="headerlink" title="Ⅰ、NIO"></a>Ⅰ、NIO</h2><h2 id="一、三大组件"><a href="#一、三大组件" class="headerlink" title="一、三大组件"></a>一、三大组件</h2><h3 id="1、Channel-amp-Buffer"><a href="#1、Channel-amp-Buffer" class="headerlink" title="1、Channel &amp; Buffer"></a>1、Channel &amp; Buffer</h3><p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202208201612733.png"></p><p>常见的 Channel 有</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>buffer 则用来缓冲读写数据，常见的 buffer 有</p><ul><li>ByteBuffer<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul><h3 id="2、Selector"><a href="#2、Selector" class="headerlink" title="2、Selector"></a>2、Selector</h3><p>selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途</p><h4 id="2-1、多线程版设计"><a href="#2-1、多线程版设计" class="headerlink" title="2-1、多线程版设计"></a>2-1、多线程版设计</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202208201636971.png"></p><h5 id="⚠️-多线程版缺点"><a href="#⚠️-多线程版缺点" class="headerlink" title="⚠️ 多线程版缺点"></a>⚠️ 多线程版缺点</h5><ul><li>内存占用高</li><li>线程上下文切换成本高</li><li>只适合连接数少的场景</li></ul><h4 id="2-2、线程池版设计"><a href="#2-2、线程池版设计" class="headerlink" title="2-2、线程池版设计"></a>2-2、线程池版设计</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202208201639068.png"></p><h5 id="⚠️-线程池版缺点"><a href="#⚠️-线程池版缺点" class="headerlink" title="⚠️ 线程池版缺点"></a>⚠️ 线程池版缺点</h5><ul><li>阻塞模式下，线程仅能处理一个 socket 连接</li><li>仅适合短连接场景</li></ul><h4 id="2-3、selector-版设计"><a href="#2-3、selector-版设计" class="headerlink" title="2-3、selector 版设计"></a>2-3、selector 版设计</h4><p>selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201647534.png"></p><p>调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理</p><h2 id="二、ByteBuffer详解"><a href="#二、ByteBuffer详解" class="headerlink" title="二、ByteBuffer详解"></a>二、ByteBuffer详解</h2><p>有一普通文本文件 data.txt，内容为</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1234567890abcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 FileChannel 来读取文件内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">FileChannel</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelDemo1</span> <span class="token punctuation">{</span>    <span class="token comment">// </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * try () 1.7的语法糖，方便关闭 RandomAccessFile 资源         * FileChannel         * 1、输入输出流，RandomAccessFile         */</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span> <span class="token punctuation">(</span><span class="token string">"boot_netty/helloword/data.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> file<span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token comment">// 准备缓冲区，向 buffer 写入</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"读到字节数：{}"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 没有内容了</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 切换 buffer 读模式</span>                <span class="token comment">// 翻转缓冲区，为写做准备</span>                buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>hasRemaining <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 是否还有剩余未读数据</span>                    <span class="token keyword">byte</span> b <span class="token operator">=</span> buffer<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 切换 buffer 写模式</span>                <span class="token comment">// 清楚缓冲区，为读做准备</span>                buffer<span class="token punctuation">.</span>clear <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>19:02:52.712 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 读到字节数：10<br>19:02:52.717 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 1<br>19:02:52.717 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 2<br>19:02:52.717 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 3<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 4<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 5<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 6<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 7<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 8<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 9<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 0<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 读到字节数：6<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - a<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - b<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - c<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - d<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 -<br>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - </p><br><p>19:02:52.718 [main] DEBUG com.kk.netty.nio.ChannelDemo1 - 读到字节数：-1</p></blockquote><h3 id="1、ByteBuffer-步骤"><a href="#1、ByteBuffer-步骤" class="headerlink" title="1、ByteBuffer 步骤"></a>1、ByteBuffer 步骤</h3><ol><li>向 buffer 写入数据，例如调用 channel.read(buffer)</li><li>调用 flip() 切换至<strong>读模式</strong></li><li>从 buffer 读取数据，例如调用 buffer.get()</li><li>调用 clear() 或 compact() 切换至<strong>写模式</strong></li><li>重复 1~4 步骤</li></ol><h3 id="2、ByteBuffer-结构"><a href="#2、ByteBuffer-结构" class="headerlink" title="2、ByteBuffer 结构"></a>2、ByteBuffer 结构</h3><p>ByteBuffer 有以下重要属性</p><ul><li>capacity 容量</li><li>position 写入位置，移动的游标</li><li>limit  写入或者读取限制（根据读写模式切换决定）</li></ul><h5 id="1、开始"><a href="#1、开始" class="headerlink" title="1、开始"></a>1、开始</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201929345.png"></p><h5 id="2、写模式下，position-是写入位置，limit-等于容量，下图表示写入了-4-个字节后的状态"><a href="#2、写模式下，position-是写入位置，limit-等于容量，下图表示写入了-4-个字节后的状态" class="headerlink" title="2、写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态"></a>2、写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201933170.png"></p><h5 id="3、flip-动作发生后，position-切换为读取位置，limit-切换为读取限制"><a href="#3、flip-动作发生后，position-切换为读取位置，limit-切换为读取限制" class="headerlink" title="3、flip 动作发生后，position 切换为读取位置，limit 切换为读取限制"></a>3、flip 动作发生后，position 切换为读取位置，limit 切换为读取限制</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201934450.png"></p><h5 id="4、读取-4-个字节后，状态"><a href="#4、读取-4-个字节后，状态" class="headerlink" title="4、读取 4 个字节后，状态"></a>4、读取 4 个字节后，状态</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201937372.png"></p><h5 id="5、clear-动作发生后，状态"><a href="#5、clear-动作发生后，状态" class="headerlink" title="5、clear 动作发生后，状态"></a>5、clear 动作发生后，状态</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201937628.png"></p><h5 id="6、compact-方法，是把未读完的部分向前压缩，然后切换至写模式"><a href="#6、compact-方法，是把未读完的部分向前压缩，然后切换至写模式" class="headerlink" title="6、compact 方法，是把未读完的部分向前压缩，然后切换至写模式"></a>6、compact 方法，是把未读完的部分向前压缩，然后切换至写模式</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208201938152.png"></p><h4 id="💡-调试工具类"><a href="#💡-调试工具类" class="headerlink" title="💡 调试工具类"></a>💡 调试工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">MathUtil</span><span class="token punctuation">.</span>isOutOfBounds<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span>NEWLINE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBufferUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> BYTE2CHAR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> HEXDUMP_TABLE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">256</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> HEXPADDING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> HEXDUMP_ROWPREFIXES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">65536</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> BYTE2HEX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> BYTEPADDING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DIGITS <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">.</span>toCharArray <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HEXDUMP_TABLE<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> DIGITS<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            HEXDUMP_TABLE<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> DIGITS<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token comment">// Generate the lookup table for hex dump paddings</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HEXPADDING<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> padding <span class="token operator">=</span> HEXPADDING<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span>padding <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> padding<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buf<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            HEXPADDING<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HEXDUMP_ROWPREFIXES<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span>append <span class="token punctuation">(</span>NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>toHexString <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">0</span>xFFFFFFFFL <span class="token operator">|</span> <span class="token number">0</span>x100000000L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span>setCharAt <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HEXDUMP_ROWPREFIXES<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Generate the lookup table for byte-to-hex-dump conversion</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BYTE2HEX<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BYTE2HEX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span>byteToHexStringPadded <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Generate the lookup table for byte dump paddings</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BYTEPADDING<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> padding <span class="token operator">=</span> BYTEPADDING<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> padding<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buf<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            BYTEPADDING<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Generate the lookup table for byte-to-char conversion</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BYTE2CHAR<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">0x1f</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BYTE2CHAR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                BYTE2CHAR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印所有内容     *     * @param buffer     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debugAll</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldlimit <span class="token operator">=</span> buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>capacity <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appendPrettyHexDump <span class="token punctuation">(</span>origin<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>capacity <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"+--------+-------------------- all ------------------------+----------------+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>printf <span class="token punctuation">(</span><span class="token string">"position: [%d], limit: [%d]\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> oldlimit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span>oldlimit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印可读取内容     *     * @param buffer     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debugRead</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appendPrettyHexDump <span class="token punctuation">(</span>builder<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">-</span> buffer<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"+--------+-------------------- read -----------------------+----------------+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>printf <span class="token punctuation">(</span><span class="token string">"position: [%d], limit: [%d]\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">appendPrettyHexDump</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> dump<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOutOfBounds <span class="token punctuation">(</span>offset<span class="token punctuation">,</span> length<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>capacity <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span> <span class="token punctuation">(</span>                    <span class="token string">"expected: "</span> <span class="token operator">+</span> <span class="token string">"0 &lt;= offset("</span> <span class="token operator">+</span> offset <span class="token operator">+</span> <span class="token string">") &lt;= offset + length("</span> <span class="token operator">+</span> length                            <span class="token operator">+</span> <span class="token string">") &lt;= "</span> <span class="token operator">+</span> <span class="token string">"buf.capacity("</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span>capacity <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>                <span class="token string">"         +-------------------------------------------------+"</span> <span class="token operator">+</span>                        NEWLINE <span class="token operator">+</span> <span class="token string">"         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |"</span> <span class="token operator">+</span>                        NEWLINE <span class="token operator">+</span> <span class="token string">"+--------+-------------------------------------------------+----------------+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> startIndex <span class="token operator">=</span> offset<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> fullRows <span class="token operator">=</span> length <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> remainder <span class="token operator">=</span> length <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">;</span>        <span class="token comment">// Dump the rows which have 16 bytes.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> fullRows<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rowStartIndex <span class="token operator">=</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> startIndex<span class="token punctuation">;</span>            <span class="token comment">// Per-row prefix.</span>            appendHexDumpRowPrefix <span class="token punctuation">(</span>dump<span class="token punctuation">,</span> row<span class="token punctuation">,</span> rowStartIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Hex dump</span>            <span class="token keyword">int</span> rowEndIndex <span class="token operator">=</span> rowStartIndex <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rowStartIndex<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rowEndIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>BYTE2HEX<span class="token punctuation">[</span>getUnsignedByte <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">" |"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ASCII dump</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rowStartIndex<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rowEndIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>BYTE2CHAR<span class="token punctuation">[</span>getUnsignedByte <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Dump the last row which has less than 16 bytes.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> rowStartIndex <span class="token operator">=</span> <span class="token punctuation">(</span>fullRows <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> startIndex<span class="token punctuation">;</span>            appendHexDumpRowPrefix <span class="token punctuation">(</span>dump<span class="token punctuation">,</span> fullRows<span class="token punctuation">,</span> rowStartIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Hex dump</span>            <span class="token keyword">int</span> rowEndIndex <span class="token operator">=</span> rowStartIndex <span class="token operator">+</span> remainder<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rowStartIndex<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rowEndIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>BYTE2HEX<span class="token punctuation">[</span>getUnsignedByte <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>HEXPADDING<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">" |"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Ascii dump</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> rowStartIndex<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rowEndIndex<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>BYTE2CHAR<span class="token punctuation">[</span>getUnsignedByte <span class="token punctuation">(</span>buf<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>BYTEPADDING<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>NEWLINE <span class="token operator">+</span>                <span class="token string">"+--------+-------------------------------------------------+----------------+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">appendHexDumpRowPrefix</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> dump<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> rowStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> HEXDUMP_ROWPREFIXES<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>HEXDUMP_ROWPREFIXES<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span>NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>toHexString <span class="token punctuation">(</span>rowStartIndex <span class="token operator">&amp;</span> <span class="token number">0</span>xFFFFFFFFL <span class="token operator">|</span> <span class="token number">0</span>x100000000L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dump<span class="token punctuation">.</span>setCharAt <span class="token punctuation">(</span>dump<span class="token punctuation">.</span>length <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dump<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">getUnsignedByte</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>get <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用案例"><a href="#调用案例" class="headerlink" title="调用案例"></a>调用案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span>debugAll<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestByteBufferReadWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"1、先插入 a ，再插入 b c d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ASCLL码（十进制） 97 = 十六进制 0x61 =  a</span>        buffer<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入一个字符 a</span>        <span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调试打印</span>        buffer<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入字符 b c d</span>        <span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调试打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">" 2、切换 读模式，取一个字符"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在没有切换为 读 模式的时候，直接拿是拿不到的</span>        <span class="token comment">//System.out.println (buffer.get ( ));</span>        buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换读模式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出一个，还剩3个</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出一个，还剩2个</span>        <span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调试打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"3、未读取的往前移(压缩),第3、4位会遗留二个63、64是因为没有清零，然后后面插入不影响，会从已有的后面插入"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span>compact <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调试打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"4、插入两个字符，从已有的后面插入"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调试打印</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、ByteBuffer-常见-API"><a href="#3、ByteBuffer-常见-API" class="headerlink" title="3、ByteBuffer 常见 API"></a>3、ByteBuffer 常见 API</h3><ul><li>分配空间</li><li>向 buffer 写入数据</li><li>从 buffer 读取数据</li><li>mark 和 reset</li><li>字符串与 ByteBuffer 互转</li><li>Buffer 的线程安全</li></ul><h4 id="3-1、分配空间"><a href="#3-1、分配空间" class="headerlink" title="3-1、分配空间"></a>3-1、分配空间</h4><p>可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法</p><blockquote><p>Bytebuffer buf = ByteBuffer.allocate(16);</p></blockquote><h4 id="3-2、buffer-写入数据"><a href="#3-2、buffer-写入数据" class="headerlink" title="3-2、buffer 写入数据"></a>3-2、buffer 写入数据</h4><p>有两种办法</p><ul><li>调用 channel 的 read 方法</li><li>调用 buffer 自己的 put 方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> readBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3、buffer-读取数据"><a href="#3-3、buffer-读取数据" class="headerlink" title="3-3、buffer 读取数据"></a>3-3、buffer 读取数据</h4><p>同样有两种办法</p><ul><li>调用 channel 的 write 方法</li><li>调用 buffer 自己的 get 方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> writeBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get 方法会让 position 读指针向后走，如果想重复读取数据</p><ul><li>可以调用 rewind 方法将 position 重新置为 0</li><li>或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针</li></ul><h4 id="3-4、mark-和-reset"><a href="#3-4、mark-和-reset" class="headerlink" title="3-4、mark 和 reset"></a>3-4、mark 和 reset</h4><p>mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置</p><blockquote><p><strong>注意</strong></p><p>rewind 和 flip 都会清除 mark 位置</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="3-5、字符串与-ByteBuffer-互转"><a href="#3-5、字符串与-ByteBuffer-互转" class="headerlink" title="3-5、字符串与 ByteBuffer 互转"></a>3-5、字符串与 ByteBuffer 互转</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">CharBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span>debugAll<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestButeBufferApi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer1 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBuffer</span> buffer2 <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span>forName <span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        debugAll <span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        debugAll <span class="token punctuation">(</span>buffer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CharBuffer</span> buffer3 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span>decode <span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>buffer3<span class="token punctuation">.</span>getClass <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>buffer3<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">         +-------------------------------------------------+         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |+--------+-------------------------------------------------+----------------+|00000000| e4 bd a0 e5 a5 bd                               |......          |+--------+-------------------------------------------------+----------------+         +-------------------------------------------------+         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |+--------+-------------------------------------------------+----------------+|00000000| e4 bd a0 e5 a5 bd                               |......          |+--------+-------------------------------------------------+----------------+class java.nio.HeapCharBuffer你好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6、Buffer-的线程安全"><a href="#3-6、Buffer-的线程安全" class="headerlink" title="3-6、Buffer 的线程安全"></a>3-6、Buffer 的线程安全</h4><blockquote><p>Buffer 是<strong>非线程安全的</strong></p></blockquote><h3 id="4、Scattering-Reads"><a href="#4、Scattering-Reads" class="headerlink" title="4、Scattering Reads"></a>4、Scattering Reads</h3><h4 id="1、分散集中读"><a href="#1、分散集中读" class="headerlink" title="1、分散集中读"></a>1、分散集中读</h4><p>分散读取，有一个文本文件 3parts.txt</p><pre class="line-numbers language-none"><code class="language-none">onetwothree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用如下方式读取，可以将数据填充至多个 buffer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">FileChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span>debugAll<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScatteringReads</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span> <span class="token punctuation">(</span><span class="token string">"boot_netty/helloword/3parts.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> file<span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> a <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> b <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> c <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            debugAll <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            debugAll <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            debugAll <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">         +-------------------------------------------------+         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |+--------+-------------------------------------------------+----------------+|00000000| 6f 6e 65                                        |one             |+--------+-------------------------------------------------+----------------+         +-------------------------------------------------+         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |+--------+-------------------------------------------------+----------------+|00000000| 74 77 6f                                        |two             |+--------+-------------------------------------------------+----------------+         +-------------------------------------------------+         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |+--------+-------------------------------------------------+----------------+|00000000| 74 68 72 65 65                                  |three           |+--------+-------------------------------------------------+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、分散集中写"><a href="#2、分散集中写" class="headerlink" title="2、分散集中写"></a>2、分散集中写</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">FileChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token comment">/** * 分散集中写 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScatteringWrites</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> b1 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBuffer</span> b2 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBuffer</span> b3 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span> <span class="token punctuation">(</span><span class="token string">"boot_netty/helloword/2parts.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、Gathering-Writes"><a href="#5、Gathering-Writes" class="headerlink" title="5、Gathering Writes"></a>5、Gathering Writes</h3><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m zhangsan\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (黏包，半包)</p><ul><li>Hello,world\nI’m zhangsan\nHo</li><li>w are you?\n</li></ul><p>现在要求你编写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span>debugAll<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGatheringWrites</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> source <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//                     11            24</span>        source<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token string">"Hello,world\nI'm zhangsan\nHo"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        split <span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token string">"w are you?\nhaha!\n"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        split <span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        source<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// source.limit ( ) 缓冲区容量长度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>limit <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 找到一条完整信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>get <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 计算每个 \n 词组的长度（换行符号 +1 - 游标起始位置）</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> source<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将这条完整信息存入新的 bytebuffer</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 从 source 读，向 target 写</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    target<span class="token punctuation">.</span>put <span class="token punctuation">(</span>source<span class="token punctuation">.</span>get <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                debugAll <span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 未读的往前移动</span>        source<span class="token punctuation">.</span>compact <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、文件编程"><a href="#三、文件编程" class="headerlink" title="三、文件编程"></a>三、文件编程</h2><h3 id="1、FileChannel"><a href="#1、FileChannel" class="headerlink" title="1、FileChannel"></a>1、FileChannel</h3><h4 id="1、⚠️-FileChannel-工作模式"><a href="#1、⚠️-FileChannel-工作模式" class="headerlink" title="1、⚠️ FileChannel 工作模式"></a>1、⚠️ FileChannel 工作模式</h4><blockquote><p>FileChannel 只能工作在阻塞模式下</p></blockquote><h4 id="2、获取"><a href="#2、获取" class="headerlink" title="2、获取"></a>2、获取</h4><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel 只能读</li><li>通过 FileOutputStream 获取的 channel 只能写</li><li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li></ul><h4 id="3、读取"><a href="#3、读取" class="headerlink" title="3、读取"></a>3、读取</h4><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> readBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、写入"><a href="#4、写入" class="headerlink" title="4、写入"></a>4、写入</h4><p>写入的正确姿势如下， SocketChannel</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存入数据</span>buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 切换读模式</span><span class="token keyword">while</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p><h4 id="5、位置"><a href="#5、位置" class="headerlink" title="5、位置"></a>5、位置</h4><p>获取当前位置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> pos <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置当前位置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> newPos <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>newPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1 </li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li></ul><h4 id="6、大小"><a href="#6、大小" class="headerlink" title="6、大小"></a>6、大小</h4><p>使用 size 方法获取文件的大小</p><h4 id="7、强制写入"><a href="#7、强制写入" class="headerlink" title="7、强制写入"></a>7、强制写入</h4><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h3 id="2、两个-Channel-传输数据"><a href="#2、两个-Channel-传输数据" class="headerlink" title="2、两个 Channel 传输数据"></a>2、两个 Channel 传输数据</h3><p>基础版：限制2g</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">FileChannel</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFileChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> FROM <span class="token operator">=</span> <span class="token string">"boot_netty/helloword/data.txt"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> TO <span class="token operator">=</span> <span class="token string">"boot_netty/helloword/to.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>nanoTime <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                <span class="token class-name">FileChannel</span> from <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span> <span class="token punctuation">(</span>FROM<span class="token punctuation">)</span><span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">FileChannel</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span> <span class="token punctuation">(</span>TO<span class="token punctuation">)</span><span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 数据 from 传输到  to*（就是一个拷贝过程）</span>            <span class="token comment">// 效率会比传统的原生api 高，底层会用操作系统的零拷贝进行优化</span>            from<span class="token punctuation">.</span>transferTo <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> from<span class="token punctuation">.</span>size <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>nanoTime <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"transferTo 用时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000_000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化版：循环插入，解决2g限制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">FileChannel</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFileChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> FROM <span class="token operator">=</span> <span class="token string">"boot_netty/helloword/data.txt"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> TO <span class="token operator">=</span> <span class="token string">"boot_netty/helloword/to.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>nanoTime <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                <span class="token class-name">FileChannel</span> from <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span> <span class="token punctuation">(</span>FROM<span class="token punctuation">)</span><span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">FileChannel</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span> <span class="token punctuation">(</span>TO<span class="token punctuation">)</span><span class="token punctuation">.</span>getChannel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 数据 from 传输到  to*（就是一个拷贝过程）</span>            <span class="token comment">// 效率会比传统的原生api 高，底层会用操作系统的零拷贝进行优化</span>            <span class="token keyword">long</span> size <span class="token operator">=</span> from<span class="token punctuation">.</span>size <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// left 变量代表还剩余多少字节</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> left <span class="token operator">=</span> size<span class="token punctuation">;</span> left <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"position:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" left:"</span> <span class="token operator">+</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">-=</span> from<span class="token punctuation">.</span>transferTo <span class="token punctuation">(</span>size <span class="token operator">-</span> left<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>nanoTime <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"transferTo 用时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000_000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Path"><a href="#3、Path" class="headerlink" title="3、Path"></a>3、Path</h3><p>jdk7 引入了 Path 和 Paths 类</p><ul><li>Path 用来表示文件路径</li><li>Paths 是工具类，用来获取 Path 实例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 代表了  d:\1.txt</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 同样代表了  d:\1.txt</span><span class="token class-name">Path</span> projects <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data"</span><span class="token punctuation">,</span> <span class="token string">"projects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代表了  d:\data\projects</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>.</code> 代表了当前路径</li><li><code>..</code> 代表了上一级路径</li></ul><p>例如目录结构如下</p><pre class="line-numbers language-none"><code class="language-none">d:|- data|- projects|- a|- b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data\\projects\\a\\..\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常化路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会输出</p><pre class="line-numbers language-none"><code class="language-none">d:\data\projects\a\..\bd:\data\projects\b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、Files"><a href="#4、Files" class="headerlink" title="4、Files"></a>4、Files</h3><h5 id="检查文件是否存在"><a href="#检查文件是否存在" class="headerlink" title="检查文件是否存在"></a>检查文件是否存在</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建一级目录"><a href="#创建一级目录" class="headerlink" title="创建一级目录"></a>创建一级目录</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果目录已存在，会抛异常 FileAlreadyExistsException</li><li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li></ul><h5 id="创建多级目录用"><a href="#创建多级目录用" class="headerlink" title="创建多级目录用"></a>创建多级目录用</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1/d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果文件已存在，会抛异常 FileAlreadyExistsException</li></ul><p>如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>REPLACE_EXISTING<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>ATOMIC_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</li></ul><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果文件不存在，会抛异常 NoSuchFileException</li></ul><h5 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果目录还有内容，会抛异常 DirectoryNotEmptyException</li></ul><h5 id="遍历目录文件"><a href="#遍历目录文件" class="headerlink" title="遍历目录文件"></a>遍历目录文件</h5><p>设计模式：访问者模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 目录个数</span>    <span class="token class-name">AtomicInteger</span> direCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 文件个数</span>    <span class="token class-name">AtomicInteger</span> fileCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 目录对象</span>    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span><span class="token string">"C:\\Program Files\\Java\\jdk1.8.0_202"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设计模式：访问者模式</span>    <span class="token class-name">Files</span><span class="token punctuation">.</span>walkFileTree <span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 获取目录</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">preVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>dir <span class="token punctuation">)</span><span class="token punctuation">;</span>            direCount<span class="token punctuation">.</span>incrementAndGet <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>preVisitDirectory <span class="token punctuation">(</span>dir<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取文件</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>file <span class="token punctuation">)</span><span class="token punctuation">;</span>            fileCount<span class="token punctuation">.</span>incrementAndGet <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>visitFile <span class="token punctuation">(</span>file<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>direCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 133</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1479</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计 jar 的数目</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token comment">// 文件个数</span>       <span class="token class-name">AtomicInteger</span> fileCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 目录对象</span>       <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span><span class="token string">"C:\\Program Files\\Java\\jdk1.8.0_202"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 设计模式：访问者模式</span>       <span class="token class-name">Files</span><span class="token punctuation">.</span>walkFileTree <span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>               <span class="token comment">// 根据文件后缀筛选</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>toFile <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endsWith <span class="token punctuation">(</span><span class="token string">".jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   fileCount<span class="token punctuation">.</span>incrementAndGet <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>visitFile <span class="token punctuation">(</span>file<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 705</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除多级目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRemoveFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span><span class="token string">"j:\\test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span>walkFileTree <span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 先删除文件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">Files</span><span class="token punctuation">.</span>delete <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>visitFile <span class="token punctuation">(</span>file<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 再删除目录</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">postVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">Files</span><span class="token punctuation">.</span>delete <span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>postVisitDirectory <span class="token punctuation">(</span>dir<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⚠️ 删除很危险</p><blockquote><p>删除是危险操作，确保要递归删除的文件夹没有重要内容</p></blockquote><p>拷贝多级目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCopyMultDirectory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> source <span class="token operator">=</span> <span class="token string">"j:\\test"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token string">"j:\\testTemp"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>currentTimeMillis <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span>walk <span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forEach <span class="token punctuation">(</span>path <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> targetName <span class="token operator">=</span> path<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>replace <span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果是目录</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span>isDirectory <span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">Files</span><span class="token punctuation">.</span>createDirectories <span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 如果是文件</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span>isRegularFile <span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">Files</span><span class="token punctuation">.</span>copy <span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token class-name">Paths</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、网络编程"><a href="#四、网络编程" class="headerlink" title="四、网络编程"></a>四、网络编程</h2><h3 id="1、非阻塞-vs-阻塞"><a href="#1、非阻塞-vs-阻塞" class="headerlink" title="1、非阻塞 vs 阻塞"></a>1、非阻塞 vs 阻塞</h3><h4 id="1-1、阻塞"><a href="#1-1、阻塞" class="headerlink" title="1.1、阻塞"></a>1.1、阻塞</h4><ul><li>阻塞模式下，相关方法都会导致线程暂停<ul><li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li><li>SocketChannel.read 会在没有数据可读时让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li><li>但多线程下，有新的问题，体现在以下方面<ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li><li>阻塞在哪里(人话)<ul><li>1、连接的阻塞（accept）</li><li>2、写入数据的阻塞（read）</li><li>3、accept 的时候不能 read ,read 时候不能 accept ，这就是阻塞</li><li>4、一句话：这个线程没有发生，还会就会等待（反之：不会等待则是非阻塞）</li></ul></li></ul><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 nio 来理解阻塞模式，单线程</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1、创建服务端</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、绑定监听端口</span>        ssc<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3、创建连接集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环运行等待</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"connection..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span>            <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞方法，线程停止运行</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"connected... {}"</span><span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>            channels<span class="token punctuation">.</span>add <span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 5、接受客户端发送的数据</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"before read... {}"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>                channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入（阻塞方法，线程停止运行）</span>                buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换为读模式</span>                <span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印可读取的内容</span>                buffer<span class="token punctuation">.</span>clear <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换为写模式</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"after read...{}"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="client"><a href="#client" class="headerlink" title="client"></a>client</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span>connect <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"waiting..."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208212225480.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208212234376.png"></p><h4 id="1-2、非阻塞"><a href="#1-2、非阻塞" class="headerlink" title="1.2、非阻塞"></a>1.2、非阻塞</h4><ul><li>非阻塞模式下，相关方法都会不会让线程暂停<ul><li>在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行</li><li>SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept </li><li>写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去</li></ul></li><li>但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu</li><li>数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）</li></ul><h5 id="server：服务器端，客户端代码不变"><a href="#server：服务器端，客户端代码不变" class="headerlink" title="server：服务器端，客户端代码不变"></a>server：服务器端，客户端代码不变</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlockServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 nio 来理解阻塞模式，单线程</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1、创建服务端</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换为非阻塞模式，默认为阻塞</span>        <span class="token comment">// 2、绑定监听端口</span>        ssc<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3、创建连接集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环运行等待</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"connection..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span>            <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非阻塞方法，线程继续运行</span>            log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"connected... {}"</span><span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>            channels<span class="token punctuation">.</span>add <span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 5、接受客户端发送的数据</span>                <span class="token comment">// 如果没有读到数据，read 返回 0</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入（非阻塞方法，线程继续运行）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"before read... {}"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切换为读模式</span>                    debugRead <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印可读取的内容</span>                    buffer<span class="token punctuation">.</span>clear <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换为写模式</span>                    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"after read...{}"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个客户端调试发现：其实不用的时候还在一直打印，CPU状态是打满的，自然也是性能的消耗</p><h4 id="1-3、多路复用"><a href="#1-3、多路复用" class="headerlink" title="1.3、多路复用"></a>1.3、多路复用</h4><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li><li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入<ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h3 id="2、Selector-1"><a href="#2、Selector-1" class="headerlink" title="2、Selector"></a>2、Selector</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208242246169.png"></p><p>好处</p><ul><li>一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程采取处理。避免非阻塞模式下所做的无用功</li><li>让这个线程能够被充分的利用</li><li>节约了线程的数量</li><li>减少了线程上下文切换</li></ul><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、绑定-Channel-事件"><a href="#2、绑定-Channel-事件" class="headerlink" title="2、绑定 Channel 事件"></a>2、绑定 Channel 事件</h4><p>也称之为注册事件，绑定的事件 selector 才回关心</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据常量值来选择绑定类型 SelectionKey.OP_ACCEPT</span><span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> channel<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> 绑定事件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>channel 必须在非阻塞模式下工作</li><li>FileChannel 没有非阻塞模式，所以不能配合 selector 使用</li><li>绑定的事件类型<ul><li>connect - 客户端连接成功时触发</li><li>accept   - 服务端成功连接时触发</li><li>read      - 数据可读入时触发</li><li>write     -  数据可写入时触发</li></ul></li></ul><h4 id="3、监听-Channel-事件"><a href="#3、监听-Channel-事件" class="headerlink" title="3、监听 Channel 事件"></a>3、监听 Channel 事件</h4><p>可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件。</p><p>方法一：阻塞直到绑定事件发生</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：阻塞直到绑定事件发生，或是超时（时间单位为 ms）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法三：不会阻塞，也就是不管有没有事件发生，就立即返回，自己根据返回值检查当前是否有事件发生。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、💡-select-何时不阻塞"><a href="#4、💡-select-何时不阻塞" class="headerlink" title="4、💡 select 何时不阻塞"></a>4、💡 select 何时不阻塞</h4><blockquote><ul><li>事件发生时<ul><li>客户端发起连接请求，会触发 accept事件</li><li>客户端发送数据过来，客户端正常，或者异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li><li>channel 可写，会触发 write 事件</li><li>在 Linux 下 nio bug 发生时</li></ul></li><li>调用 selector.wakeup()，唤醒</li><li>调用 selector.clone()，关闭</li><li>selector 所在线程 interrupt（打断，阻断，暂定）</li></ul></blockquote><h3 id="3、处理-accept-事件"><a href="#3、处理-accept-事件" class="headerlink" title="3、处理 accept 事件"></a>3、处理 accept 事件</h3><p>主要用于建立连接</p><h5 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>network<span class="token punctuation">.</span>selector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span>getOutputStream <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span>read <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>network<span class="token punctuation">.</span>selector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcceptService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、创建 selector 管理多个 channel</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、建立 selector 和 channel 的联系(注册)</span>        channel<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// SelectionKey 当事件发生后，通过它得到事件类型 和 哪个 channel 发生了该事件</span>        <span class="token class-name">SelectionKey</span> ckey <span class="token operator">=</span> channel<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// key 只关注 accept 事件</span>        <span class="token comment">// interestOps 只关注</span>        ckey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"register key:{}"</span><span class="token punctuation">,</span> ckey<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 3、select 方法，没有事件发生，线程阻塞；有事件，才恢复运行</span>            <span class="token comment">//select 在事件未处理的时候，它不会阻塞；事件发生后，要么处理或者取消，不能置之不理</span>            selector<span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、处理事件，selectedKey 内部包含了所有发生的事件</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历所有事件，逐一处理</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> keys<span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                key<span class="token punctuation">.</span>cancel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="💡-事件发生后能否不处理"><a href="#💡-事件发生后能否不处理" class="headerlink" title="💡 事件发生后能否不处理"></a>💡 事件发生后能否不处理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio底层使用的是水平触发<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、处理-read-事件"><a href="#4、处理-read-事件" class="headerlink" title="4、处理 read 事件"></a>4、处理 read 事件</h3><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>network<span class="token punctuation">.</span>selector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span>debugRead<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadService</span> <span class="token punctuation">{</span>    <span class="token comment">// sscKey 、 scKey 一人一个管理员</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、创建 selector 管理多个 channel</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、建立 selector 和 channel 的联系(注册)</span>        channel<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// SelectionKey 当事件发生后，通过它得到事件类型 和 哪个 channel 发生了该事件</span>        <span class="token class-name">SelectionKey</span> sscKey <span class="token operator">=</span> channel<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// key 只关注 accept 事件</span>        <span class="token comment">// interestOps 只关注</span>        sscKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"register key:{}"</span><span class="token punctuation">,</span> sscKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 3、select 方法，没有事件发生，线程阻塞；有事件，才恢复运行</span>            <span class="token comment">//select 在事件未处理的时候，它不会阻塞；事件发生后，要么处理或者取消，不能置之不理</span>            selector<span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、处理事件，selectedKey 内部包含了所有发生的事件</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历所有事件，逐一处理</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> keys<span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 5、区分事件类型</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isAcceptable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果是 accept</span>                    <span class="token class-name">ServerSocketChannel</span> channelTest1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> channelTest1<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    sc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SelectionKey</span> scKey <span class="token operator">=</span> sc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    scKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isReadable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果是 read</span>                    <span class="token comment">// 拿到触发的事件 channel</span>                    <span class="token class-name">SocketChannel</span> channlTest2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channlTest2<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    debugRead <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// key.cancel ( );</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208292359698.png"></p><p><strong>因为 select 用完 key 没有 remove()</strong></p><h4 id="4-1、为什么要remove"><a href="#4-1、为什么要remove" class="headerlink" title="4.1、为什么要remove"></a>4.1、为什么要remove</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208302330191.png"></p><blockquote><p>因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如</p><ul><li>第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey </li><li>第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常</li></ul></blockquote><h4 id="4-2、remove-代码"><a href="#4-2、remove-代码" class="headerlink" title="4.2、remove 代码"></a>4.2、remove 代码</h4><p>拿到后就删掉，方式重复事件处理（写在后面也可以）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208302331079.png"></p><h4 id="4-3、处理客户端断开"><a href="#4-3、处理客户端断开" class="headerlink" title="4.3、处理客户端断开"></a>4.3、处理客户端断开</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202208312250110.png"></p><h4 id="4-4、不处理边界问题"><a href="#4-4、不处理边界问题" class="headerlink" title="4.4、不处理边界问题"></a>4.4、不处理边界问题</h4><h5 id="以-BIO-为案例代码"><a href="#以-BIO-为案例代码" class="headerlink" title="以 BIO 为案例代码"></a>以 BIO 为案例代码</h5><p><strong>service</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundaryService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span> <span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> socket<span class="token punctuation">.</span>getInputStream <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这里这么写，有没有问题</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> in<span class="token punctuation">.</span>read <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 这里这么写，有没有问题</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>client</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundDaryClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> socket<span class="token punctuation">.</span>getOutputStream <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">.</span>getBytes <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span>close <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出</strong></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">helloworld��好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5、处理消息的边界（容量超出）"><a href="#4-5、处理消息的边界（容量超出）" class="headerlink" title="4.5、处理消息的边界（容量超出）"></a>4.5、处理消息的边界（容量超出）</h4><p><strong>容量超出，就需要考虑扩容问题，这边没去考虑缩容，nettry 会有适配这些问题</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209031033587.png"></p><ul><li>一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽</li><li>另一种思路是按分隔符拆分，缺点是效率低</li><li>TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式</li></ul></li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209031858792.png"></p><p>**这边 service 会用到附件知识，会把 bytebuffer 作为事件注册到 SelectorKey 上 **</p><p>既 ， register（t1,t2,t3）第三个参数上</p><p><strong>service</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// sscKey 、 scKey 一人一个管理员</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1、创建 selector 管理多个 channel</span>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、建立 selector 和 channel 的联系(注册)</span>    ssc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// SelectionKey 当事件发生后，通过它得到事件类型 和 哪个 channel 发生了该事件</span>    <span class="token class-name">SelectionKey</span> sscKey <span class="token operator">=</span> ssc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// key 只关注 accept 事件</span>    <span class="token comment">// interestOps 只关注</span>    sscKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"register key:{}"</span><span class="token punctuation">,</span> sscKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 3、select 方法，没有事件发生，线程阻塞；有事件，才恢复运行</span>        <span class="token comment">//select 在事件未处理的时候，它不会阻塞；事件发生后，要么处理或者取消，不能置之不理</span>        selector<span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4、处理事件，selectedKey 内部包含了所有发生的事件</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历所有事件，逐一处理</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> keys<span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            iter<span class="token punctuation">.</span>remove <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5、区分事件类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isAcceptable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果是 accept</span>                <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> channel<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// attachment</span>                <span class="token comment">// 将一个 byteBuffer 作为附件关联到 selectionKey 上</span>                <span class="token class-name">SelectionKey</span> scKey <span class="token operator">=</span> sc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                scKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isReadable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果是 read</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 拿到触发的事件 channel</span>                    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 获取 selectionKey 上关联的事件</span>                    <span class="token comment">//ByteBuffer buffer = ByteBuffer.allocate (16);</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>attachment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果是正常断开。read 的方法返回值是 -1</span>                    <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        key<span class="token punctuation">.</span>cancel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">// 压缩读取一次，确保数据完整</span>                        split <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果游标的起始相等，说明容量已满，需要扩容</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>position <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span>limit <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 扩容两倍</span>                            <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>capacity <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            newBuffer<span class="token punctuation">.</span>put <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            key<span class="token punctuation">.</span>attach <span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 因为客户端断开了，因此需要将 key 取消（从 selector 得keys 集合中真正删除）</span>                    key<span class="token punctuation">.</span>cancel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>client</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span>  <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sc<span class="token punctuation">.</span>connect <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SocketAddress</span> address <span class="token operator">=</span> sc<span class="token punctuation">.</span>getLocalAddress <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    sc<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span>defaultCharset <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sc<span class="token punctuation">.</span>write <span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span>defaultCharset <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode <span class="token punctuation">(</span><span class="token string">"012345Q\n6789abcdef3333\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6、ByteBuffer-大小分配"><a href="#4-6、ByteBuffer-大小分配" class="headerlink" title="4.6、ByteBuffer 大小分配"></a>4.6、ByteBuffer 大小分配</h4><ul><li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li><li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li><li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li></ul></li></ul><h3 id="5、处理-write-事件"><a href="#5、处理-write-事件" class="headerlink" title="5、处理 write 事件"></a>5、处理 write 事件</h3><h5 id="一次性无法写完的例子"><a href="#一次性无法写完的例子" class="headerlink" title="一次性无法写完的例子"></a>一次性无法写完的例子</h5><ul><li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li><li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul><li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li><li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li><li>如果不取消，会每次可写均会触发 write 事件</li></ul></li></ul><p><strong>service</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span>remove <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isAcceptable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    sc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SelectionKey</span> scKey <span class="token operator">=</span> sc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 1、向客户端发送大量数据</span>                    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sb<span class="token punctuation">.</span>append <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span>defaultCharset <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>encode <span class="token punctuation">(</span>sb<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 2、返回值代表实际写入的字节数</span>                    <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span>write <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 3、判断是否有剩余内容</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>hasRemaining <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 4、关注可写事件(1+4)</span>                        <span class="token comment">// read 1  write 4</span>                        scKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span>scKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 5、把未写完的数据 挂到 scKey上</span>                        scKey<span class="token punctuation">.</span>attach <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isWritable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>attachment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span>write <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span>hasRemaining <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 写完了(切换为读模式)</span>                        key<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span>key<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 需要清除 buffer</span>                        key<span class="token punctuation">.</span>attach <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>client</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span>connect <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收数据</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> sc<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>count <span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span>clear <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="💡-write-为何要取消"><a href="#💡-write-为何要取消" class="headerlink" title="💡 write 为何要取消"></a>💡 write 为何要取消</h5><p>只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发;</p><p>因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注</p><h3 id="6、多线程优化"><a href="#6、多线程优化" class="headerlink" title="6、多线程优化"></a>6、多线程优化</h3><h5 id="1、编码思路"><a href="#1、编码思路" class="headerlink" title="1、编码思路"></a>1、编码思路</h5><ul><li>两个线程之间传递数据，用队列在中间进行传输（这里用安全队列），netty底层也是</li><li>根据处理器数量，轮训（这边1.8的api jvm 有问题，在jdk 10的时候才修复）</li><li>单线程配一个选择器，专门处理 accept 事件</li><li>创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件</li></ul><p><strong>2、如何拿到 cpu 个数</strong></p><blockquote><ul><li>Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数</li><li>这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiThreadServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span>currentThread <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setName <span class="token punctuation">(</span><span class="token string">"boss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Selector</span> boos <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SelectionKey</span> boosKey <span class="token operator">=</span> ssc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>boos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boosKey<span class="token punctuation">.</span>interestOps <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span> <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1、创建固定数量的 worker 并初始化</span>        <span class="token comment">// Runtime.getRuntime ().availableProcessors () 处理器数量</span>        <span class="token class-name">Worker</span><span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">[</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>getRuntime <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>availableProcessors <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span> <span class="token punctuation">(</span><span class="token string">"WORKER-"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            boos<span class="token punctuation">.</span>select <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> boos<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span>remove <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isAcceptable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span>accept <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    sc<span class="token punctuation">.</span>configureBlocking <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"connected...{}"</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 2. 关联 selector</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"before register...{}"</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 轮训</span>                    workers<span class="token punctuation">[</span>index<span class="token punctuation">.</span>getAndIncrement <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>workers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">.</span>register <span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"after register...{}"</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> start <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 还未初始化</span>        <span class="token keyword">private</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 初始化线程 和 selector</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span>start <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 唤醒 select 方法 boos</span>            selector<span class="token punctuation">.</span>wakeup <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// boos</span>            sc<span class="token punctuation">.</span>register <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    selector<span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// worker-0  阻塞</span>                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span>selectedKeys <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>iterator <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        iter<span class="token punctuation">.</span>remove <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>isReadable <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>allocate <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"read...{}"</span><span class="token punctuation">,</span> channel<span class="token punctuation">.</span>getRemoteAddress <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            channel<span class="token punctuation">.</span>read <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            buffer<span class="token punctuation">.</span>flip <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            debugAll <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、UDP"><a href="#7、UDP" class="headerlink" title="7、UDP"></a>7、UDP</h3><ul><li>UDP 是无连接的，client 发送数据不会管 server 是否开启</li><li>server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃</li></ul><h2 id="五、Nio-vs-Bio-or-Aio"><a href="#五、Nio-vs-Bio-or-Aio" class="headerlink" title="五、Nio vs Bio or Aio"></a>五、Nio vs Bio or Aio</h2><h3 id="1、stream-vs-channel"><a href="#1、stream-vs-channel" class="headerlink" title="1、stream vs channel"></a>1、stream vs channel</h3><ul><li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li><li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li><li>二者均为全双工，即读写可以同时进行</li></ul><h3 id="2、IO模型"><a href="#2、IO模型" class="headerlink" title="2、IO模型"></a>2、IO模型</h3><h3 id="3、零拷贝"><a href="#3、零拷贝" class="headerlink" title="3、零拷贝"></a>3、零拷贝</h3><h5 id="3-1、传统IO问题"><a href="#3-1、传统IO问题" class="headerlink" title="3-1、传统IO问题"></a>3-1、传统IO问题</h5><p>传统的 IO 将一个文件通过 socket 写出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RandomAccessFile</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部工作流程是这样的：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209142205360.png"></p><ol><li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p><blockquote><p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p></blockquote></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p></li><li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p></li></ol><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h5 id="3-2、NIO优化"><a href="#3-2、NIO优化" class="headerlink" title="3-2、NIO优化"></a>3-2、NIO优化</h5><p>通过 DirectByteBuf </p><ul><li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li><li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209142208809.png"></p><p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p><ul><li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li></ul><p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209142208773.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>可以看到</p><ul><li>只发生了一次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><p>进一步优化（linux 2.4）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209142209047.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="4、AIO"><a href="#4、AIO" class="headerlink" title="4、AIO"></a>4、AIO</h3><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><blockquote><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP 实现了真正的异步 IO</li><li>Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势</li></ul></blockquote><h3 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h3><h2 id="Ⅱ、Netty"><a href="#Ⅱ、Netty" class="headerlink" title="Ⅱ、Netty"></a>Ⅱ、Netty</h2><h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="1、Nerry是什么"><a href="#1、Nerry是什么" class="headerlink" title="1、Nerry是什么"></a>1、Nerry是什么</h4><p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p><h4 id="2、优势"><a href="#2、优势" class="headerlink" title="2、优势"></a>2、优势</h4><ul><li>Netty vs NIO，工作量大，bug 多<ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>epoll 空轮询导致 CPU 100%</li><li>对 API 进行增强，使之更易用，如 FastThreadLocal =&gt; ThreadLocal，ByteBuff =&gt; ByteBuffer</li></ul></li><li>Netty vs 其它网络应用框架<ul><li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li><li>久经考验，18年，Netty 版本<ul><li>2.x 2004</li><li>3.x 2008</li><li>4.x 2013</li><li>5.x 已废弃（没有明显的性能提升，维护成本高）</li></ul></li></ul></li></ul><h4 id="3、地位"><a href="#3、地位" class="headerlink" title="3、地位"></a>3、地位</h4><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p><p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p><ul><li>Cassandra - nosql 数据库</li><li>Spark - 大数据分布式计算框架</li><li>Hadoop - 大数据分布式存储框架</li><li>RocketMQ - ali 开源的消息队列</li><li>ElasticSearch - 搜索引擎</li><li>gRPC - rpc 框架</li><li>Dubbo - rpc 框架</li><li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li><li>Zookeeper - 分布式协调框架</li></ul><h3 id="2、Hello-World"><a href="#2、Hello-World" class="headerlink" title="2、Hello World"></a>2、Hello World</h3><h4 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h4><p>开发一个简单的服务器端和客户端</p><ul><li>客户端向服务器端发送 hello, world</li><li>服务器仅接收，不返回</li></ul><p>加入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.39.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、服务端"><a href="#2、服务端" class="headerlink" title="2、服务端"></a>2、服务端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>group <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>                <span class="token punctuation">.</span>channel <span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>                <span class="token punctuation">.</span>childHandler <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 3</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span>pipeline <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>addLast <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>                        ch<span class="token punctuation">.</span>pipeline <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>addLast <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 6</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bind <span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> </p></li><li><p>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209152257915.png"></p></li><li><p>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，ServerSocketChannel 绑定的监听端口</p></li><li><p>5 处，SocketChannel 的处理器，解码 ByteBuf =&gt; String</p></li><li><p>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</p></li></ul><h4 id="3、客户端"><a href="#3、客户端" class="headerlink" title="3、客户端"></a>3、客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>group <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>                <span class="token punctuation">.</span>channel <span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>                <span class="token punctuation">.</span>handler <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 3</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span>pipeline <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>addLast <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>connect <span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>                <span class="token punctuation">.</span>sync <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment">// 5</span>                <span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token comment">// 6</span>                <span class="token punctuation">.</span>writeAndFlush <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>1 处，创建 NioEventLoopGroup，同 Server</p></li><li><p>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209152303842.png"></p></li><li><p>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，指定要连接的服务器和端口</p></li><li><p>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</p></li><li><p>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</p></li><li><p>7 处，写入消息并清空缓冲区</p></li><li><p>8 处，消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 发出</p></li><li><p>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</p></li></ul><h4 id="4、梳理流程"><a href="#4、梳理流程" class="headerlink" title="4、梳理流程"></a>4、梳理流程</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209171028505.png"></p><h4 id="5、详细解读"><a href="#5、详细解读" class="headerlink" title="5、详细解读"></a>5、详细解读</h4><blockquote><ul><li>把 channel 理解为数据的通道</li><li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li><li>把 handler 理解为数据的处理工序<ul><li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li><li>handler 分 Inbound 和 Outbound 两类</li></ul></li><li>把 eventLoop 理解为处理数据的工人<ul><li>工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）</li><li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li><li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li></ul></li></ul></blockquote><h3 id="3、组件"><a href="#3、组件" class="headerlink" title="3、组件"></a>3、组件</h3><h4 id="1、EventLoop"><a href="#1、EventLoop" class="headerlink" title="1、EventLoop"></a>1、EventLoop</h4><p>事件循环对象</p><p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p><p>它的继承关系比较复杂</p><ul><li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li><li>另一条线是继承自 netty 自己的 OrderedEventExecutor，<ul><li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li><li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li></ul></li></ul><p>事件循环组</p><p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p><ul><li>继承自 netty 自己的 EventExecutorGroup<ul><li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li><li>另有 next 方法获取集合中下一个 EventLoop</li></ul></li></ul><p>以一个简单的实现为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span><span class="token class-name">DefaultEventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">io.netty.channel.DefaultEventLoop@60f82f98io.netty.channel.DefaultEventLoop@35f983a6io.netty.channel.DefaultEventLoop@60f82f98<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以使用 for 循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventExecutor</span> eventLoop <span class="token operator">:</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">io.netty.channel.DefaultEventLoop@60f82f98io.netty.channel.DefaultEventLoop@35f983a6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">io.netty.channel.DefaultEventLoop@60f82f98io.netty.channel.DefaultEventLoop@35f983a6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="💡-优雅关闭"><a href="#💡-优雅关闭" class="headerlink" title="💡 优雅关闭"></a>💡 优雅关闭</h5><p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p><h5 id="2、NioEventLoop-处理普通任务"><a href="#2、NioEventLoop-处理普通任务" class="headerlink" title="2、NioEventLoop 处理普通任务"></a>2、NioEventLoop 处理普通任务</h5><p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NioEventLoopGroup</span> nioWorkers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"server start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nioWorkers<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"normal task..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">22:30:36 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...22:30:38 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - normal task...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>可以用来执行耗时较长的任务</p></blockquote><h5 id="3、NioEventLoop-处理定时任务"><a href="#3、NioEventLoop-处理定时任务" class="headerlink" title="3、NioEventLoop 处理定时任务"></a>3、NioEventLoop 处理定时任务</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NioEventLoopGroup</span> nioWorkers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"server start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nioWorkers<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">22:35:15 [DEBUG] [main] c.i.o.EventLoopTest2 - server start...22:35:17 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...22:35:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...22:35:19 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running...22:35:20 [DEBUG] [nioEventLoopGroup-2-1] c.i.o.EventLoopTest2 - running......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以用来执行定时任务</p></blockquote><h4 id="2、Channel"><a href="#2、Channel" class="headerlink" title="2、Channel"></a>2、Channel</h4><p>channel 的主要作用</p><ul><li>close() 可以用来关闭 channel</li><li>closeFuture() 用来处理 channel 的关闭<ul><li>sync 方法作用是同步等待 channel 关闭</li><li>而 addListener 方法是异步等待 channel 关闭</li></ul></li><li>pipeline() 方法添加处理器</li><li>write() 方法将数据写入</li><li>writeAndFlush() 方法将数据写入并刷出</li></ul><h4 id="2-1、ChannelFuture"><a href="#2-1、ChannelFuture" class="headerlink" title="2.1、ChannelFuture"></a>2.1、ChannelFuture</h4><p>这时刚才的客户端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在把它拆开来看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>channelFuture<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</li></ul><p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p><p>实验如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>channelFuture<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li><li>执行到 2 时，sync 方法是同步等待连接建立完成</li><li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li></ul><p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>channelFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">)</span> future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li><li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li></ul><h4 id="2-2、CloseFuture"><a href="#2-2、CloseFuture" class="headerlink" title="2.2、CloseFuture"></a>2.2、CloseFuture</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>basice<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">Bootstrap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelFuture</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelFutureTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>group <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>channel <span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>handler <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span>pipeline <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>addLast <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>connect <span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//channelFuture.sync ( ).channel ( ).writeAndFlush (new Date ( ) + "hello!");</span>        channelFuture<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>writeAndFlush <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        channelFuture.sync ();</span><span class="token comment">//        System.out.println (channelFuture.channel () );</span>        channelFuture<span class="token punctuation">.</span>addListener <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">)</span> future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>future<span class="token punctuation">.</span>channel <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="💡-异步提升的是什么"><a href="#💡-异步提升的是什么" class="headerlink" title="💡 异步提升的是什么"></a>💡 异步提升的是什么</h4><ul><li>看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</li><li>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的</li></ul><p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209241222774.png"></p><p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209241221714.png"></p><p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209241221462.png"></p><p>要点</p><ul><li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li><li>异步并没有缩短响应时间，反而有所增加</li><li>合理进行任务拆分，也是利用异步的关键</li></ul><h4 id="3、Future-amp-Promise"><a href="#3、Future-amp-Promise" class="headerlink" title="3、Future &amp; Promise"></a>3、Future &amp; Promise</h4><p>在异步处理时，经常用到这两个接口</p><p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p><ul><li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li><li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li><li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li></ul><table><thead><tr><th>功能/名称</th><th>jdk Future</th><th>netty Future</th><th>Promise</th></tr></thead><tbody><tr><td>cancel</td><td>取消任务</td><td>-</td><td>-</td></tr><tr><td>isCanceled</td><td>任务是否取消</td><td>-</td><td>-</td></tr><tr><td>isDone</td><td>任务是否完成，不能区分成功失败</td><td>-</td><td>-</td></tr><tr><td>get</td><td>获取任务结果，阻塞等待</td><td>-</td><td>-</td></tr><tr><td>getNow</td><td>-</td><td>获取任务结果，非阻塞，还未产生结果时返回 null</td><td>-</td></tr><tr><td>await</td><td>-</td><td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td><td>-</td></tr><tr><td>sync</td><td>-</td><td>等待任务结束，如果任务失败，抛出异常</td><td>-</td></tr><tr><td>isSuccess</td><td>-</td><td>判断任务是否成功</td><td>-</td></tr><tr><td>cause</td><td>-</td><td>获取失败信息，非阻塞，如果没有失败，返回null</td><td>-</td></tr><tr><td>addLinstener</td><td>-</td><td>添加回调，异步接收结果</td><td>-</td></tr><tr><td>setSuccess</td><td>-</td><td>-</td><td>设置成功结果</td></tr><tr><td>setFailure</td><td>-</td><td>-</td><td>设置失败结果</td></tr></tbody></table><h4 id="3-1、JDK-future"><a href="#3-1、JDK-future" class="headerlink" title="3-1、JDK-future"></a>3-1、JDK-future</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jdk-future</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.线程池</span>    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span>newFixedThreadPool <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.提交任务</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span>submit <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"执行计算！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、主线程通过 future获取结果</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"等待结果中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"结果为：{}"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>10:08:46.201 [main] INFO com.kk.netty.basice.demo2.FutureAndPromise - 等待结果中……<br>10:08:46.201 [pool-1-thread-1] INFO com.kk.netty.basice.demo2.FutureAndPromise - 执行计算！<br>10:08:47.205 [main] INFO com.kk.netty.basice.demo2.FutureAndPromise - 结果为：50</p></blockquote><h4 id="3-2、netty-future"><a href="#3-2、netty-future" class="headerlink" title="3-2、netty-future"></a>3-2、netty-future</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">// netty-future()</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">NioEventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventLoop</span> eventLoop <span class="token operator">=</span> group<span class="token punctuation">.</span>next <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> eventLoop<span class="token punctuation">.</span>submit <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"执行计算！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"等待结果中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;同步&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>        <span class="token comment">// 控制台打印是main线程打印</span><span class="token comment">//        log.info ("结果为：{}", future.get ( ));</span>        <span class="token comment">//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;同步&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>        <span class="token comment">//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;异步&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>        future<span class="token punctuation">.</span>addListener <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericFutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token comment">// 控制台打印是 nioEventLoopGroup 线程组打印</span>                log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"结果为：{}"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;异步&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>10:40:10.185 [main] INFO com.kk.netty.basice.demo2.FutureAndPromise - 等待结果中……<br>10:40:10.189 [nioEventLoopGroup-2-1] INFO com.kk.netty.basice.demo2.FutureAndPromise - 执行计算！<br>10:40:11.190 [nioEventLoopGroup-2-1] INFO com.kk.netty.basice.demo2.FutureAndPromise - 结果为：50</p></blockquote><h4 id="3-1-2-小结"><a href="#3-1-2-小结" class="headerlink" title="3-(1-2)小结"></a>3-(1-2)小结</h4><p>无论是juc中的 future 还是 netty 中的 future 都是来自于 juc</p><p><img src="https://v1.mykkto.cn/image/blog/2022/netty/202209251043399.png"></p><p>上面两种获取的 future 方式 都是被动返回得到的，若要主动，此时可以用 netty 中的 Promise</p><h4 id="3-1、同步处理任务成功"><a href="#3-1、同步处理任务成功" class="headerlink" title="3.1、同步处理任务成功"></a>3.1、同步处理任务成功</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventExecutors<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"set success, {}"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        promise<span class="token punctuation">.</span>setSuccess <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"getNow:{}"</span><span class="token punctuation">,</span> promise<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 还没有结果</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"get:{}"</span><span class="token punctuation">,</span> promise<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>17:15:38.604 [main] DEBUG com.kk.netty.basice.demo2.FutureAndPromise - start…<br>17:15:38.604 [main] DEBUG com.kk.netty.basice.demo2.FutureAndPromise - getNow:null<br>17:15:39.605 [defaultEventLoop-1-1] DEBUG com.kk.netty.basice.demo2.FutureAndPromise - set success, 10<br>17:15:39.605 [main] DEBUG com.kk.netty.basice.demo2.FutureAndPromise - get:10</p></blockquote><h4 id="3-2、异步处理任务成功"><a href="#3-2、异步处理任务成功" class="headerlink" title="3.2、异步处理任务成功"></a>3.2、异步处理任务成功</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置回调，异步接收结果</span>promise<span class="token punctuation">.</span>addListener <span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里的 future 就是上面的 promise</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"getNow:{}"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventExecutors<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"set success, {}"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    promise<span class="token punctuation">.</span>setSuccess <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>11:49:30 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start…<br>11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set success, 10<br>11:49:31 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - 10</p></blockquote><h4 id="3-3、同步处理任务失败-sync-amp-get"><a href="#3-3、同步处理任务失败-sync-amp-get" class="headerlink" title="3.3、同步处理任务失败 - sync &amp; get"></a>3.3、同步处理任务失败 - sync &amp; get</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span>eventExecutors<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">RuntimeException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"set failure, {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    promise<span class="token punctuation">.</span>setFailure <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"getNow:{}"</span><span class="token punctuation">,</span> promise<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span>get <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start…<br>12:11:07 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null<br>12:11:08 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error…<br>Exception in thread “main” java.util.concurrent.ExecutionException: java.lang.RuntimeException: error…<br>   at io.netty.util.concurrent.AbstractFuture.get(AbstractFuture.java:41)<br>   at com.itcast.oio.DefaultPromiseTest2.main(DefaultPromiseTest2.java:34)<br>Caused by: java.lang.RuntimeException: error…<br>   at com.itcast.oio.DefaultPromiseTest2.lambda$main$0(DefaultPromiseTest2.java:27)<br>   at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)<br>   at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)<br>   at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)<br>   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)<br>   at java.lang.Thread.run(Thread.java:745)</p></blockquote><h4 id="3-4、同步处理任务失败-await"><a href="#3-4、同步处理任务失败-await" class="headerlink" title="3.4、同步处理任务失败 - await"></a>3.4、同步处理任务失败 - await</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span>eventExecutors<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">RuntimeException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"set failure, {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    promise<span class="token punctuation">.</span>setFailure <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"getNow:{}"</span><span class="token punctuation">,</span> promise<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span>await <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与 sync 和 get 区别在于，不会抛异常</span>log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"result {}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>promise<span class="token punctuation">.</span>isSuccess <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">?</span> promise<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> promise<span class="token punctuation">.</span>cause <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start…<br>12:18:53 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - null<br>12:18:54 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error…<br>12:18:54 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error…</p></blockquote><h4 id="3-5、异步处理任务失败"><a href="#3-5、异步处理任务失败" class="headerlink" title="3.5、异步处理任务失败"></a>3.5、异步处理任务失败</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span> promise<span class="token punctuation">.</span>addListener <span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"result {}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>promise<span class="token punctuation">.</span>isSuccess <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">?</span> promise<span class="token punctuation">.</span>getNow <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> promise<span class="token punctuation">.</span>cause <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> eventExecutors<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token class-name">RuntimeException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">(</span><span class="token string">"error..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"set failure, {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     promise<span class="token punctuation">.</span>setFailure <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span>debug <span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>12:04:57 [DEBUG] [main] c.i.o.DefaultPromiseTest2 - start…<br>12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - set failure, java.lang.RuntimeException: error…<br>12:04:58 [DEBUG] [defaultEventLoop-1-1] c.i.o.DefaultPromiseTest2 - result java.lang.RuntimeException: error…</p></blockquote><h4 id="3-6、await-死锁检查"><a href="#3-6、await-死锁检查" class="headerlink" title="3.6、await 死锁检查"></a>3.6、await 死锁检查</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DefaultEventLoop</span> eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoop</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span><span class="token punctuation">;</span> eventExecutors<span class="token punctuation">.</span>submit <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         promise<span class="token punctuation">.</span>await <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 注意不能仅捕获 InterruptedException 异常</span>         <span class="token comment">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span>         <span class="token comment">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> eventExecutors<span class="token punctuation">.</span>submit <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         promise<span class="token punctuation">.</span>await <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><blockquote><p>1<br>2<br>3<br>4<br>io.netty.util.concurrent.BlockingOperationException: DefaultPromise@47499c2a(incomplete)<br>at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:384)</p></blockquote><h4 id="4、Handler-amp-Pipeline"><a href="#4、Handler-amp-Pipeline" class="headerlink" title="4、Handler &amp; Pipeline"></a>4、Handler &amp; Pipeline</h4><p>ChannelHandler 用来处理 Channel 上的各种事件，分为入栈、出栈两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p><ul><li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来<font color="red">读</font>取客户端数据，写回结果</li><li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对<font color="red">写</font>回结果进行加工</li></ul><p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p><p>先搞清楚顺序，服务端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span>                                   <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span>                                   <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelOutboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">,</span>                                   <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">)</span> future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器端打印：</p><pre class="line-numbers language-none"><code class="language-none">123654<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、进阶"><a href="#二、进阶" class="headerlink" title="二、进阶"></a>二、进阶</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><h2 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h2><h3 id="1、-1"><a href="#1、-1" class="headerlink" title="1、"></a>1、</h3><h3 id="2、-1"><a href="#2、-1" class="headerlink" title="2、"></a>2、</h3><h3 id="3、-1"><a href="#3、-1" class="headerlink" title="3、"></a>3、</h3><h2 id="Ⅲ、常识（面试）"><a href="#Ⅲ、常识（面试）" class="headerlink" title="Ⅲ、常识（面试）"></a>Ⅲ、常识（面试）</h2><h5 id="1、多线程缺点"><a href="#1、多线程缺点" class="headerlink" title="1、多线程缺点"></a>1、多线程缺点</h5><ul><li>内存占用高</li><li>线程上下文切换成本高</li><li>只适合连接数少的场景</li></ul><h5 id="2、线程池缺点"><a href="#2、线程池缺点" class="headerlink" title="2、线程池缺点"></a>2、线程池缺点</h5><ul><li>阻塞模式下，线程仅能处理一个 socket 连接</li><li>仅适合短连接场景</li></ul><h5 id="3、FileChannel-工作模式"><a href="#3、FileChannel-工作模式" class="headerlink" title="3、FileChannel 工作模式"></a>3、FileChannel 工作模式</h5><p>FileChannel 只能工作在阻塞模式下</p><h5 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h5><h5 id="5、-1"><a href="#5、-1" class="headerlink" title="5、"></a>5、</h5><h5 id="6、"><a href="#6、" class="headerlink" title="6、"></a>6、</h5><h5 id="7、"><a href="#7、" class="headerlink" title="7、"></a>7、</h5><h5 id="8、"><a href="#8、" class="headerlink" title="8、"></a>8、</h5><h2 id="参考文献-↓"><a href="#参考文献-↓" class="headerlink" title="参考文献 ↓"></a>参考文献 ↓</h2><p>try 1.7 ：<a href="https://blog.csdn.net/renvictory/article/details/108844745">https://blog.csdn.net/renvictory/article/details/108844745</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="内力篇" scheme="https://mykkto.github.io/categories/%E5%86%85%E5%8A%9B%E7%AF%87/"/>
    
    
    <category term="netty" scheme="https://mykkto.github.io/tags/netty/"/>
    
    <category term="nio" scheme="https://mykkto.github.io/tags/nio/"/>
    
    <category term="网络编程" scheme="https://mykkto.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>随性记录一小点 2021-07-15至未来</title>
    <link href="https://mykkto.github.io/posts/cfd1312a.html"/>
    <id>https://mykkto.github.io/posts/cfd1312a.html</id>
    <published>2022-08-05T15:21:33.000Z</published>
    <updated>2022-12-22T11:19:40.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="————简书原始地址————"><a href="#————简书原始地址————" class="headerlink" title="————简书原始地址————"></a><a href="https://www.jianshu.com/p/ed3159f299b4">————简书原始地址————</a></h3><h4 id="2021年7月15日"><a href="#2021年7月15日" class="headerlink" title="2021年7月15日"></a>2021年7月15日</h4><p>pl/sql客户端bug 切换的用户的时候，会串掉（意思是显示上切换了，其实并没有）<br>解决方案：必须重启客户端，切换用户<br><img src="https://upload-images.jianshu.io/upload_images/19532021-6437c5f9d76fce63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="imag222e.png"></p><h4 id="2021年7月26日"><a href="#2021年7月26日" class="headerlink" title="2021年7月26日"></a>2021年7月26日</h4><p>idea git 小姿势，本地库拖回<br><img src="https://upload-images.jianshu.io/upload_images/19532021-645855f6537ed9f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="im345age.png"><br><img src="https://upload-images.jianshu.io/upload_images/19532021-d95a586472670762.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2021年7月28日"><a href="#2021年7月28日" class="headerlink" title="2021年7月28日"></a>2021年7月28日</h4><p>oracle 小知识：不小心删除了一张表数据，怎么办呢？</p><pre class="line-numbers language-none"><code class="language-none">select * from 表名 as of timestamp  sysdate-1/12  //查询两个小时前的删除的某张表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2021年8月22日"><a href="#2021年8月22日" class="headerlink" title="2021年8月22日"></a>2021年8月22日</h4><p>并行：多个任务在同一时间点发生，并由不同的cpu进行处理，不互相抢占资源<br>并发：多个任务在同一时间点内同时发生了，但由同一个cpu进行处理，互相抢占资源<br>文章推荐：<a href="https://www.cnblogs.com/iamqiyue/p/14184769.html">https://www.cnblogs.com/iamqiyue/p/14184769.html</a></p><h4 id="2021年8月30日"><a href="#2021年8月30日" class="headerlink" title="2021年8月30日"></a>2021年8月30日</h4><p>jsp 用0做字段状态，列表会出问题，会有默认值</p><h4 id="2021年9月07日"><a href="#2021年9月07日" class="headerlink" title="2021年9月07日"></a>2021年9月07日</h4><p>easyUI 嵌套对话框问题，对话框A弹出对话框B，A无法关闭。<br>需要在A的关闭回调 打开B，也就是关闭A不能和打开B 写在一起，必须关闭A<br>调用A的关闭回调之后再打开B。</p><h4 id="2021年9月14日"><a href="#2021年9月14日" class="headerlink" title="2021年9月14日"></a>2021年9月14日</h4><p>oracle 11g分组案例：<br>1、group by user_id,PUNCH_DATE：通过用户id和日期分组<br>2、listagg( TIME_INTERVAL ,’,’) within group (order by id) ：需要展示的字段（没有纳入分组规则的），order by id  通过 id 排序，或者可以自定义一个排序字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>User_Id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>User_Name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>Punch_Date<span class="token punctuation">,</span>d<span class="token punctuation">.</span>Punch_Time<span class="token punctuation">,</span>de<span class="token punctuation">.</span>Dept_Name<span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token keyword">time</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>remark<span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>TIME_INTERVAL<span class="token punctuation">,</span>d<span class="token punctuation">.</span>PUNCH_STATUS<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>user_id<span class="token punctuation">,</span>PUNCH_DATE，listagg<span class="token punctuation">(</span> TIME_INTERVAL <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> TIME_INTERVAL<span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> id <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> id<span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> REMARK <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> REMARK<span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> PUNCH_TIME <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> PUNCH_TIME<span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> PUNCH_STATUS <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> PUNCH_STATUS<span class="token punctuation">,</span>listagg<span class="token punctuation">(</span> <span class="token keyword">time</span> <span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">within</span> <span class="token keyword">group</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">time</span> <span class="token keyword">from</span> KQ_PUNCH_DAILY <span class="token keyword">group</span> <span class="token keyword">by</span> user_id<span class="token punctuation">,</span>PUNCH_DATE<span class="token punctuation">)</span> d <span class="token keyword">inner</span> <span class="token keyword">join</span>  tbl_sys_user  u  <span class="token keyword">on</span> d<span class="token punctuation">.</span>User_Id<span class="token operator">=</span>u<span class="token punctuation">.</span>USER_ID <span class="token keyword">inner</span> <span class="token keyword">join</span> tbl_sys_department de  <span class="token keyword">on</span> de<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>u<span class="token punctuation">.</span>dept_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021年9月-23日"><a href="#2021年9月-23日" class="headerlink" title="2021年9月 23日"></a>2021年9月 23日</h4><p>一、oracle 11g 存储过程分割字符串案例：纯分割</p><p>测试代码（先运行存储过程代码）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">TABLE</span><span class="token punctuation">(</span> FUNC_ISM_GETSPLITSTR<span class="token punctuation">(</span><span class="token string">'_FUNC_CTP_LG_GEsss_s_ssssTSPNG_'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先创建变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建变量</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">TYPE</span> <span class="token string">"ARRYTYPE1"</span> <span class="token operator">IS</span> VARRAY<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token keyword">OF</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>存储过程代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> FUNC_ISM_GETSPLITSTR <span class="token punctuation">(</span>in_str <span class="token operator">IN</span> VARCHAR2<span class="token punctuation">,</span> <span class="token comment">--需分割的字符串</span>in_split <span class="token operator">IN</span> VARCHAR2 <span class="token comment">--分隔符</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> arrytype1<span class="token keyword">AS</span>v_count1 <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>v_count2 <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>v_strlist arrytype1<span class="token punctuation">;</span>v_node VARCHAR2 <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>v_count2 :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v_strlist :<span class="token operator">=</span> arrytype1 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>in_str <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>LENGTH <span class="token punctuation">(</span>in_str<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">THEN</span><span class="token keyword">RETURN</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">FOR</span> v_i <span class="token operator">IN</span> <span class="token number">1</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> LENGTH <span class="token punctuation">(</span>in_str<span class="token punctuation">)</span><span class="token keyword">LOOP</span>v_count1 :<span class="token operator">=</span> INSTRB <span class="token punctuation">(</span>in_str<span class="token punctuation">,</span> in_split<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> v_i<span class="token punctuation">)</span><span class="token punctuation">;</span>v_count2 :<span class="token operator">=</span> INSTRB <span class="token punctuation">(</span>in_str<span class="token punctuation">,</span> in_split<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> v_i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_node :<span class="token operator">=</span> SUBSTRB <span class="token punctuation">(</span>in_str<span class="token punctuation">,</span> v_count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v_count2 <span class="token operator">-</span> v_count1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">IF</span> v_node <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">THEN</span>v_node :<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>v_count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>v_count2 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">THEN</span><span class="token keyword">EXIT</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span>v_strlist<span class="token punctuation">.</span>EXTEND <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_strlist <span class="token punctuation">(</span>v_i<span class="token punctuation">)</span> :<span class="token operator">=</span> v_node<span class="token punctuation">;</span>v_node :<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> v_strlist<span class="token punctuation">;</span><span class="token keyword">END</span> FUNC_ISM_GETSPLITSTR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果<br><img src="https://upload-images.jianshu.io/upload_images/19532021-51b5e892eeb7e588.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>二、oracle 11g 存储过程分割字符串案例：分割+判断<br>编写语句<br><img src="https://upload-images.jianshu.io/upload_images/19532021-1cf3ff85786ef508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> FUNC_ISM_GETSPLITSTR2 <span class="token punctuation">(</span><span class="token comment">-- 最终返回 1 发起部门，2 主办部门，3 协办部门 </span><span class="token comment">--  写法存在一个问题，需要在开始节点和结束节点加上分隔符否则娶不到</span><span class="token comment">-- _FUNC_CTP_LG_GEsss_s_ssssTSPNG_ 类似 这种格式</span>in_str <span class="token operator">IN</span> VARCHAR2<span class="token punctuation">,</span> <span class="token comment">--需分割的字符串</span>in_split <span class="token operator">IN</span> VARCHAR2 <span class="token comment">--分隔符</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> VARCHAR2<span class="token keyword">AS</span>v_count1 <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>v_count2 <span class="token keyword">INTEGER</span><span class="token punctuation">;</span>v_count3 <span class="token keyword">INTEGER</span><span class="token punctuation">;</span><span class="token comment">--计数器</span>v_node VARCHAR2 <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_result VARCHAR2 <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_resulttep VARCHAR2 <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_strtep VARCHAR2 <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>in_strtep :<span class="token operator">=</span> in_split<span class="token operator">||</span>in_str<span class="token operator">||</span>in_split<span class="token punctuation">;</span>v_count2 :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v_count3 :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v_result :<span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>v_resulttep :<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>in_strtep <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>LENGTH <span class="token punctuation">(</span>in_strtep<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">THEN</span><span class="token keyword">RETURN</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">FOR</span> v_i <span class="token operator">IN</span> <span class="token number">1</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> LENGTH <span class="token punctuation">(</span>in_strtep<span class="token punctuation">)</span><span class="token keyword">LOOP</span>v_count1 :<span class="token operator">=</span> INSTRB <span class="token punctuation">(</span>in_strtep<span class="token punctuation">,</span> in_split<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> v_i<span class="token punctuation">)</span><span class="token punctuation">;</span>v_count2 :<span class="token operator">=</span> INSTRB <span class="token punctuation">(</span>in_strtep<span class="token punctuation">,</span> in_split<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> v_i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_node :<span class="token operator">=</span> SUBSTRB <span class="token punctuation">(</span>in_strtep<span class="token punctuation">,</span> v_count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v_count2 <span class="token operator">-</span> v_count1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">IF</span> v_node <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">THEN</span>v_node :<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> elsif <span class="token punctuation">(</span>v_node<span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token keyword">then</span> v_count3 :<span class="token operator">=</span> v_count3 <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token comment">-- 记得对节点判空，写在后头</span><span class="token keyword">ELSE</span> v_resulttep :<span class="token operator">=</span> v_resulttep <span class="token operator">||</span> v_node<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>v_count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>v_count2 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">THEN</span><span class="token keyword">EXIT</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span>v_strlist<span class="token punctuation">.</span>EXTEND <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v_strlist <span class="token punctuation">(</span>v_i<span class="token punctuation">)</span> :<span class="token operator">=</span> v_node<span class="token punctuation">;</span>v_node :<span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LENGTH <span class="token punctuation">(</span>in_str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> v_count3<span class="token punctuation">)</span> <span class="token keyword">then</span> v_result :<span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> v_result<span class="token punctuation">;</span><span class="token keyword">END</span> FUNC_ISM_GETSPLITSTR2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果对比输出：如果有一个 1所有都是1 ，如果 所有为 2 才能全部为2<br><img src="https://upload-images.jianshu.io/upload_images/19532021-09ca25205c2486ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>三、单条SQL 映射输出（需要注意的是：不能是多条结果集，这个只是单条，接受类型为 varchar2 ）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span>        <span class="token string">"FUNC_ISM_GETSPLITSTR2_TODAY2"</span> <span class="token punctuation">(</span><span class="token comment">-- 计算加3天后（跳过非同昨日），得到实际的 日期）</span><span class="token comment">--  写法存在一个问题，需要在开始节点和结束节点加上分隔符否则娶不到</span><span class="token comment">-- _FUNC_CTP_LG_GEsss_s_ssssTSPNG_ 类似 这种格式</span>in_str <span class="token operator">IN</span> VARCHAR2 <span class="token comment">--需要被计算的日期</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> VARCHAR2<span class="token keyword">AS</span>in_result VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- </span>in_temp VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_year VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_month VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_day VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>in_temp :<span class="token operator">=</span> SUBSTR<span class="token punctuation">(</span>in_str<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">sql</span><span class="token keyword">select</span> ID <span class="token keyword">into</span> in_result <span class="token keyword">from</span> TBL_TASKS_PERSONAL_SIDE <span class="token keyword">WHERE</span> ID<span class="token operator">=</span><span class="token string">'402881e57c968139017c969805df00d9'</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> in_temp<span class="token punctuation">;</span><span class="token keyword">END</span> FUNC_ISM_GETSPLITSTR2_TODAY2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：<code>SELECT FUNC_ISM_GETSPLITSTR2_TODAY2('2021-04-22') as aaa  FROM TBL_TASKS_PERSONAL_MAIN</code></p><p><img src="https://upload-images.jianshu.io/upload_images/19532021-0128b15034cd5d45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>ORACLE 存储过程INTO 多个变量</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3 <span class="token keyword">into</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3 <span class="token keyword">from</span> tab1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2021年9月29日"><a href="#2021年9月29日" class="headerlink" title="2021年9月29日"></a>2021年9月29日</h4><p>有的时候Java catch 用 <code>e.getStackTrace ( );</code>不出异常栈信息，<br>可以使用<code>e.printStackTrace ( );</code>解决</p><h4 id="2021年10月26日"><a href="#2021年10月26日" class="headerlink" title="2021年10月26日"></a>2021年10月26日</h4><p>（1）oracle 分页</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> A<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>ROWNUM RN <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> DEP_TASK_VIEW<span class="token punctuation">)</span> A  <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ROWNUM <span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">)</span> <span class="token keyword">WHERE</span> RN <span class="token operator">&gt;=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）不仅如此 RN还可以当做唯一记录数ID使用，因视图合并出来的数据ID不是唯一的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> A<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>ROWNUM RN <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> DEP_TASK_VIEW<span class="token punctuation">)</span> A  <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ROWNUM <span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">)</span> <span class="token keyword">WHERE</span> RN <span class="token operator">&gt;=</span> <span class="token number">1</span>  <span class="token operator">and</span> RN <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021年10月29日"><a href="#2021年10月29日" class="headerlink" title="2021年10月29日"></a>2021年10月29日</h4><p>日期期限计算节假日的存储过程，套用两个视图<br>（1）函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> <span class="token string">"FUNC_ISM_GETSPLITSTR2_TODAY2"</span> <span class="token punctuation">(</span><span class="token comment">-- 计算加3天后（跳过非同昨日），得到实际的 日期）才有该跳的第三条记录获取，而不是日期直接+3，筛选出只有工作日</span>in_str <span class="token operator">IN</span> VARCHAR2 <span class="token comment">--需要被计算的日期</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> VARCHAR2<span class="token keyword">AS</span>in_result VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 最终结果</span>in_temp VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 辅助筛选年</span>in_temp2 NUMBER<span class="token punctuation">;</span><span class="token comment">-- 辅助筛选年 +1</span>in_temp3 VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 辅助筛选月</span>in_temp33 NUMBER<span class="token punctuation">;</span><span class="token comment">-- 辅助筛选月 --处理精度</span>in_temp4 VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 辅助筛选日</span>in_temp44 NUMBER<span class="token punctuation">;</span><span class="token comment">-- 辅助筛选日 --处理精度</span>in_year VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--计算的年</span>in_month VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--计算的月</span>in_day VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--计算的日</span>in_rn1 VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--先找到词条日历的rownum,然后加3的记录数就是</span>in_rn12 VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 词条二（最终的），配合视图二</span>in_rn122 NUMBER<span class="token punctuation">;</span>in_time VARCHAR2 <span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 后缀的时间</span><span class="token keyword">BEGIN</span>in_temp :<span class="token operator">=</span> SUBSTR<span class="token punctuation">(</span>in_str<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_temp2 :<span class="token operator">=</span> <span class="token string">"TO_NUMBER"</span><span class="token punctuation">(</span>in_temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>in_temp3 :<span class="token operator">=</span> SUBSTR<span class="token punctuation">(</span>in_str<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_temp33 :<span class="token operator">=</span> <span class="token string">"TO_NUMBER"</span><span class="token punctuation">(</span>in_temp3<span class="token punctuation">)</span><span class="token punctuation">;</span>in_temp4 :<span class="token operator">=</span> SUBSTR<span class="token punctuation">(</span>in_str<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in_temp44 :<span class="token operator">=</span> <span class="token string">"TO_NUMBER"</span><span class="token punctuation">(</span>in_temp4<span class="token punctuation">)</span><span class="token punctuation">;</span>in_time :<span class="token operator">=</span> SUBSTR<span class="token punctuation">(</span>in_str<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> RNN <span class="token keyword">into</span> in_rn1 <span class="token keyword">from</span> TASK_TEMP_DAY1 <span class="token keyword">WHERE</span> CALYEAR <span class="token operator">=</span> in_temp <span class="token operator">AND</span> CALENDAR_MONTH <span class="token operator">=</span> in_temp33 <span class="token operator">AND</span> CALENDAR_DAY <span class="token operator">=</span> in_temp44<span class="token punctuation">;</span><span class="token keyword">SELECT</span> RNN2 <span class="token keyword">into</span> in_rn12 <span class="token keyword">from</span> TASK_TEMP_DAY2 <span class="token keyword">WHERE</span> RNN <span class="token operator">=</span> in_rn1<span class="token punctuation">;</span>in_rn122 :<span class="token operator">=</span> <span class="token string">"TO_NUMBER"</span><span class="token punctuation">(</span>in_rn12<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> CALYEAR<span class="token punctuation">,</span>CALENDAR_MONTH<span class="token punctuation">,</span>CALENDAR_DAY <span class="token keyword">into</span> in_year<span class="token punctuation">,</span>in_month<span class="token punctuation">,</span>in_day <span class="token keyword">from</span> TASK_TEMP_DAY2 <span class="token keyword">WHERE</span> RNN2 <span class="token operator">=</span> in_rn122<span class="token punctuation">;</span>in_result :<span class="token operator">=</span> in_year<span class="token operator">||</span><span class="token string">'-'</span><span class="token punctuation">;</span><span class="token keyword">IF</span><span class="token punctuation">(</span>in_month<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span> in_result :<span class="token operator">=</span> in_result <span class="token operator">||</span> <span class="token string">'0'</span><span class="token operator">||</span>in_month<span class="token operator">||</span><span class="token string">'-'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span> in_result :<span class="token operator">=</span> in_result <span class="token operator">||</span>in_month<span class="token operator">||</span><span class="token string">'-'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">IF</span><span class="token punctuation">(</span>in_day<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span> in_result :<span class="token operator">=</span> in_result <span class="token operator">||</span> <span class="token string">'0'</span><span class="token operator">||</span>in_day<span class="token punctuation">;</span><span class="token keyword">ELSE</span> in_result :<span class="token operator">=</span> in_result <span class="token operator">||</span>in_day<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>in_result :<span class="token operator">=</span> in_result <span class="token operator">||</span>in_time<span class="token punctuation">;</span><span class="token keyword">RETURN</span> in_result<span class="token punctuation">;</span><span class="token keyword">END</span> FUNC_ISM_GETSPLITSTR2_TODAY2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）TASK_TEMP_DAY1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>ROWNUM RNN<span class="token punctuation">,</span><span class="token string">"CALYEAR"</span><span class="token punctuation">,</span><span class="token string">"ID"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_ID"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MONTH"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_DAY"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_DATE_TYPE"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MODIFY_PERSON"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MODIFY_TIME"</span><span class="token punctuation">,</span><span class="token string">"BLANK0"</span><span class="token punctuation">,</span><span class="token string">"BLANK1"</span><span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span>DE<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> CA<span class="token punctuation">.</span>CALENDAR_YEAR CALYEAR<span class="token keyword">FROM</span>KQ_CALENDAR CA<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> KQ_CALENDAR_DETAIL DE <span class="token keyword">ON</span> CA<span class="token punctuation">.</span>CALENDAR_ID <span class="token operator">=</span> DE<span class="token punctuation">.</span>CALENDAR_ID<span class="token keyword">WHERE</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">AND</span> CA<span class="token punctuation">.</span>CALENDAR_CREATOR <span class="token operator">=</span> <span class="token string">'4028811d7057520301705756b3ca0050'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>CA<span class="token punctuation">.</span>CALENDAR_YEAR <span class="token keyword">ASC</span><span class="token punctuation">,</span>DE<span class="token punctuation">.</span>CALENDAR_MONTH <span class="token keyword">ASC</span><span class="token punctuation">,</span>DE<span class="token punctuation">.</span>CALENDAR_DAY <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token comment">-- 工作任务逾期计算节假日配合函数的视图(被查询的视图)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）TASK_TEMP_DAY2</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>ROWNUM RNN2<span class="token punctuation">,</span><span class="token string">"RNN"</span><span class="token punctuation">,</span><span class="token string">"CALYEAR"</span><span class="token punctuation">,</span><span class="token string">"ID"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_ID"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MONTH"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_DAY"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_DATE_TYPE"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MODIFY_PERSON"</span><span class="token punctuation">,</span><span class="token string">"CALENDAR_MODIFY_TIME"</span><span class="token punctuation">,</span><span class="token string">"BLANK0"</span><span class="token punctuation">,</span><span class="token string">"BLANK1"</span><span class="token keyword">FROM</span>TASK_TEMP_DAY1<span class="token keyword">WHERE</span>CALENDAR_DATE_TYPE <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token comment">-- 工作任务逾期计算节假日配合函数的视图(被计算的视图)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021年11月4日"><a href="#2021年11月4日" class="headerlink" title="2021年11月4日"></a>2021年11月4日</h4><p>oracle 11g 写存储过程报错：<code>ORA-00972 identifier is too long</code><br>原因存储过程的命名过长，改短即可。</p><h4 id="2021年11月5日"><a href="#2021年11月5日" class="headerlink" title="2021年11月5日"></a>2021年11月5日</h4><p>oracle 11g 写存储过程 拼接单引号转义问题：</p><pre class="line-numbers language-none"><code class="language-none">in_str := '1';   -- 输出  1in_str := '''1''';  -- 输出 '1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2021年11月5日-1"><a href="#2021年11月5日-1" class="headerlink" title="2021年11月5日"></a>2021年11月5日</h4><p>oracle 11g 写存储过程 SQL字符串 运行后赋值：</p><pre class="line-numbers language-none"><code class="language-none">v_idsaaa := SUBSTR(v_idsaaa,1,"LENGTH"(v_idsaaa)-1);in_timesiov := 'SELECT createTe_  from (SELECT listagg (createTe_, '','') WITHIN GROUP (ORDER BY ID_) AS createTe_ from (select TO_CHAR (create_,''yyyy-mm-dd hh24:mi:ss'') createTe_ ,COMMITUSERID_,BUSINESSID_,NAME_,ID_from jbpm_taskinstance WHERE BUSINESSID_=''402881f47ce4b52d017ce4bc73d30026'' and NAME_ =''进程1'' and  COMMITUSERID_ in ('||v_idsaaa||'))  GROUP BY BUSINESSID_,NAME_)' ;execute immediate in_timesiov into v_flag;-- execute immediate 用于执行 SQL语句-- in_timesiov  是拼接出来的SQL语句-- v_flag 接收语句返回的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021年11月15日"><a href="#2021年11月15日" class="headerlink" title="2021年11月15日"></a>2021年11月15日</h4><p>记录一个 echarts 柱形图的坑<br>（1）渲染key的时候如果是整个数组过来，就会变成一坨</p><pre class="line-numbers language-none"><code class="language-none">xAxis: {    //data: ["一般","好","非常好"]    data: dataKeyList},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19532021-9d9f204d4db6b2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>（2）所以要使用遍历出来</p><pre class="line-numbers language-none"><code class="language-none">xAxis: {    data: ["一般","好","非常好"]},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2021年11月30日"><a href="#2021年11月30日" class="headerlink" title="2021年11月30日"></a>2021年11月30日</h4><p>SQL 自定义排序</p><pre class="line-numbers language-none"><code class="language-none">select * from tbl_duty_user decode(u.postType,'1',4,'2',3,'3',2,'4',1) asc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>oracle</strong> <strong>字段已逗号隔开分解为多条数据</strong></p><p><a href="https://blog.csdn.net/sofeien/article/details/80534557">https://blog.csdn.net/sofeien/article/details/80534557</a></p><p><strong>No row with the given identifier exists: [com.jh.jcs.business.duty.model.TblDutyDetail#402881e57c7df2e5017c7df8d7c20138]</strong></p><p>HQL多對一脏数据问题</p><h4 id="2021年12月13日"><a href="#2021年12月13日" class="headerlink" title="2021年12月13日"></a>2021年12月13日</h4><p>关于SQL 搜索时间日期范围不可用 or </p><pre class="line-numbers language-none"><code class="language-none">String hql2 = "from KqPunchDaily where  punchDate like '%" + DailyUtil.sameMonth ( )+ "%' or punchDate like '%" + DailyUtil.lastMonth ( )+ "%' and punchStatus !=0  and userId in ("+idstemp+")   ";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上3w数据<br>要用 beginTime ，或者 &gt;,  &lt;锁定范围时间</p><pre class="line-numbers language-none"><code class="language-none">String hql1 = "from KqLeaveForm where  beginTime BETWEEN '" + DailyUtil.sameMonth ( ) + "' and   '" + DailyUtil.lastMonth ( ) + "'  and status ='1'  and deptId = '"+deptId+"' ";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2021年12月17日"><a href="#2021年12月17日" class="headerlink" title="2021年12月17日"></a>2021年12月17日</h4><p>pl/SQL客户端乱码<br><a href="https://blog.csdn.net/gm371200587/article/details/81381825">https://blog.csdn.net/gm371200587/article/details/81381825</a></p><h4 id="2021年12月17日-1"><a href="#2021年12月17日-1" class="headerlink" title="2021年12月17日"></a>2021年12月17日</h4><p>oracle合并表函数</p><pre class="line-numbers language-none"><code class="language-none">　　Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；　　Union All：对两个结果集进行并集操作，包括重复行，不进行排序；　　Intersect：对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序；　　Minus：对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021年12月20日"><a href="#2021年12月20日" class="headerlink" title="2021年12月20日"></a>2021年12月20日</h4><p>定制排序：表，学生根据性别排序，如果是男的根据年龄升序，如果是女的根据体重desc，男的排在女的前面</p><pre class="line-numbers language-none"><code class="language-none">order by 性别，case when 性别=男 then 年龄 end,case when 性别=女 then 体重 end desc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###参考博客<br><a href="https://www.cnblogs.com/sunice/p/10436725.html">https://www.cnblogs.com/sunice/p/10436725.html</a></p><h4 id="2022-08-01"><a href="#2022-08-01" class="headerlink" title="2022-08-01"></a>2022-08-01</h4><p>dea  sql 未连接检查 爆红取消样式配置：<a href="https://blog.csdn.net/a907691592/article/details/94724090">https://blog.csdn.net/a907691592/article/details/94724090</a></p><p>idea 自动生成序列号：<a href="https://www.jianshu.com/p/b4807c3efcb6">https://www.jianshu.com/p/b4807c3efcb6</a></p><p>idea 配置 包排序– sort by type</p><p>idea 书签技巧：<a href="https://www.studyweb.cn/detail/java_174180.html">https://www.studyweb.cn/detail/java_174180.html</a></p><p>oracle 字符串分割：<a href="https://blog.csdn.net/qq_40230848/article/details/123417714">https://blog.csdn.net/qq_40230848/article/details/123417714</a></p><p>oracle 长字符串无法插入问题：</p><p><a href="https://blog.csdn.net/weixin_46266448/article/details/124351040">https://blog.csdn.net/weixin_46266448/article/details/124351040</a></p><p><a href="https://www.ssfiction.com/sqljc/630238.html">https://www.ssfiction.com/sqljc/630238.html</a></p><p>执行注意再 update 后面加 commit;</p><h4 id="2022-08-21"><a href="#2022-08-21" class="headerlink" title="2022-08-21"></a>2022-08-21</h4><p>idea调试小技巧，evaluate：<a href="https://blog.csdn.net/xue_xiaofei/article/details/113197181">https://blog.csdn.net/xue_xiaofei/article/details/113197181</a></p><h4 id="2022-11-05"><a href="#2022-11-05" class="headerlink" title="2022-11-05"></a>2022-11-05</h4><p>今天在做blog 静态移植，遇到一条linux 命令（删除子文件，除了某个文件和文件夹）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf <span class="token operator">!</span><span class="token punctuation">(</span>static<span class="token operator">|</span>rmnotstatic.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条会删除当前目录的所有，除了括号中的文件和文件夹，运行没问题，但是放到 shell 脚本中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-4-7-centos www<span class="token punctuation">]</span><span class="token comment"># sh rmnotstatic.sh </span>rmnotstatic.sh: line <span class="token number">2</span>: syntax error near unexpected token <span class="token variable"><span class="token variable">`</span><span class="token punctuation">(</span>'rmnotstatic.sh: line <span class="token number">2</span>: <span class="token variable">`</span></span><span class="token function">rm</span> -rf <span class="token operator">!</span><span class="token punctuation">(</span>static<span class="token operator">|</span>mnotstatic.sh<span class="token punctuation">)</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个意思是：意外标记“（”附近出现语法错误，但是语法是没错的，猜想应该是没有转义，于是改成</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token function">rm</span> -rf <span class="token operator">!</span><span class="token punctuation">\</span><span class="token punctuation">(</span>static<span class="token punctuation">\</span><span class="token operator">|</span>rmnotstatic.sh<span class="token punctuation">\</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就可以！</p><h4 id="2022-11-22"><a href="#2022-11-22" class="headerlink" title="2022-11-22"></a>2022-11-22</h4><p>tnsnames.ora 文件解析说明：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DB_NAME<span class="token operator">=</span>  <span class="token punctuation">(</span>DESCRIPTION <span class="token operator">=</span>    <span class="token punctuation">(</span>ADDRESS <span class="token operator">=</span> <span class="token punctuation">(</span>PROTOCOL <span class="token operator">=</span> TCP<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST <span class="token operator">=</span> IP<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT <span class="token operator">=</span> 端口号<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>CONNECT_DATA <span class="token operator">=</span>      <span class="token punctuation">(</span>SERVER <span class="token operator">=</span> DEDICATED<span class="token punctuation">)</span>      <span class="token punctuation">(</span>SERVICE_NAME <span class="token operator">=</span> 实例名称<span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span>最终等于：ip 端口<span class="token operator">/</span>实例名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://www.cnblogs.com/wml-it/p/15175753.html">https://www.cnblogs.com/wml-it/p/15175753.html</a></p><h4 id="2022-11-23"><a href="#2022-11-23" class="headerlink" title="2022-11-23"></a>2022-11-23</h4><p>mybatis 声明实体字段注解用  @tablefield  不要用jdk的@cloumn </p><h4 id="2022-12-20"><a href="#2022-12-20" class="headerlink" title="2022-12-20"></a>2022-12-20</h4><p>springboot集成nutzdao :<a href="https://www.codenong.com/cs106644689/">https://www.codenong.com/cs106644689/</a></p><p>nutz扩展文档：<a href="https://www.wenjiangs.com/doc/nutz-dao-create">https://www.wenjiangs.com/doc/nutz-dao-create</a></p><p>nutz本地，maven本地引用jar：<br><a href="http://t.zoukankan.com/iceywu-p-12284695.html">http://t.zoukankan.com/iceywu-p-12284695.html</a><br><a href="https://blog.csdn.net/weixin_43606226/article/details/124021874">https://blog.csdn.net/weixin_43606226/article/details/124021874</a></p><h4 id="2022-12-21"><a href="#2022-12-21" class="headerlink" title="2022-12-21"></a>2022-12-21</h4><p>idea sql表爆红解决：<a href="https://blog.csdn.net/qq_62497280/article/details/123741808">https://blog.csdn.net/qq_62497280/article/details/123741808</a></p><h4 id="散装的疑难杂症"><a href="#散装的疑难杂症" class="headerlink" title="散装的疑难杂症"></a>散装的疑难杂症</h4><p>1、链路A没问题，链路C没问题，完整ABC有问题，在没有日志可以看的情况下，考虑是否A异步，延迟，导致C拿不到A链路应该提供给C的消息（关于第三方交互延迟也需要考虑，特别是遇到异步的情况下）</p><p>2、新接口A慢，原始接口A快，考虑是否哪里有定时刷新缓存了一些数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="docker" scheme="https://mykkto.github.io/categories/docker/"/>
    
    
    <category term="技术" scheme="https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="记录" scheme="https://mykkto.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>docker 操作篇</title>
    <link href="https://mykkto.github.io/posts/abdfa13a.html"/>
    <id>https://mykkto.github.io/posts/abdfa13a.html</id>
    <published>2022-07-05T15:17:13.000Z</published>
    <updated>2022-11-12T15:07:08.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="—————————-Docker-部署篇-————————–"><a href="#—————————-Docker-部署篇-————————–" class="headerlink" title="—————————  Docker 部署篇  ————————–"></a><a href="/posts/caff0950">—————————  Docker 部署篇  ————————–</a></h2><h2 id="〇、本章源代码"><a href="#〇、本章源代码" class="headerlink" title="〇、本章源代码"></a>〇、本章源代码</h2><p><a href="https://gitee.com/TK_LIMR/springcloud2021To2021.git">https://gitee.com/TK_LIMR/springcloud2021To2021.git</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207172321968.png"></p><h2 id="Ⅰ、DockerFile"><a href="#Ⅰ、DockerFile" class="headerlink" title="Ⅰ、DockerFile"></a>Ⅰ、DockerFile</h2><h3 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h3><h4 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h4><p><a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h4 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h4><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207071619187.png"></p><h4 id="3、步骤"><a href="#3、步骤" class="headerlink" title="3、步骤"></a>3、步骤</h4><ol><li>编写Dockerfile文件</li><li>docker build命令构建镜像</li><li>docker run依镜像运行容器实例</li></ol><h3 id="二、DockerFile构建过程解析"><a href="#二、DockerFile构建过程解析" class="headerlink" title="二、DockerFile构建过程解析"></a>二、DockerFile构建过程解析</h3><h4 id="1、Dockerfile内容基础知识"><a href="#1、Dockerfile内容基础知识" class="headerlink" title="1、Dockerfile内容基础知识"></a>1、Dockerfile内容基础知识</h4><ol><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行提交</li></ol><h4 id="2、Docker执行Dockerfile的大致流程"><a href="#2、Docker执行Dockerfile的大致流程" class="headerlink" title="2、Docker执行Dockerfile的大致流程"></a>2、Docker执行Dockerfile的大致流程</h4><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器作出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile中的下一条指令直到所有指令都执行完成</li></ol><h4 id="3、小总结"><a href="#3、小总结" class="headerlink" title="3、小总结"></a>3、小总结</h4><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><ul><li>Dockerfile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li></ul><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207072105501.png"></p><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><h3 id="三、DockerFile常用保留字指令"><a href="#三、DockerFile常用保留字指令" class="headerlink" title="三、DockerFile常用保留字指令"></a>三、DockerFile常用保留字指令</h3><ul><li><p>FROM：基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p></li><li><p>MAINTAINER：镜像维护者的姓名和邮箱地址</p></li><li><p>RUN：容器构建时需要运行的命令，RUN是在 docker build时运行</p><ul><li>shell格式：<code>RUN yum -y install vim</code></li><li>exec格式：</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207072127945.png"></p></li><li><p>EXPOSE：当前容器对外暴露出的端口</p></li><li><p>WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p></li><li><p>USER：指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p></li><li><p>ENV：用来在构建镜像过程中设置环境变量</p><ul><li>ENV MY_PATH /usr/mytest</li><li>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；<br>也可以在其它指令中直接使用这些环境变量</li><li>比如：WORKDIR $MY_PATH</li></ul></li><li><p>ADD：将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p></li><li><p>COPY：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</p><ul><li>COPY src dest</li><li>COPY [“src”, “dest”]</li><li>&lt;src源路径&gt;：源文件或者源目录</li><li>&lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</li></ul></li><li><p>VOLUME：容器数据卷，用于数据保存和持久化工作</p></li><li><p>CMD：指定容器启动后的要干的事情</p><ul><li>注意：<ul><li>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</li><li><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207072139655.png"></li></ul></li><li>它和前面RUN命令的区别<ul><li>CMD是在docker run 时运行。</li><li>RUN是在 docker build时运行。</li></ul></li></ul></li><li><p>ENTRYPOINT：也是用来指定一个容器启动时要运行的命令</p><ul><li>类似于 CMD 指令，但是ENTRYPOINT不会被docker run后面的命令覆盖，<br>而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序</li></ul></li></ul><p>小总结</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207072142349.png"></p><h3 id="四、案例"><a href="#四、案例" class="headerlink" title="四、案例"></a>四、案例</h3><h4 id="1、自定义镜像myCentosJava8"><a href="#1、自定义镜像myCentosJava8" class="headerlink" title="1、自定义镜像myCentosJava8"></a>1、自定义镜像myCentosJava8</h4><h5 id="1、要求"><a href="#1、要求" class="headerlink" title="1、要求"></a>1、要求</h5><p>Centos7镜像具备vim+ifconfig+jdk8</p><p><strong>准备：JDK8下载位置</strong></p><p><a href="https://mirrors.yangxingzhen.com/jdk/">https://mirrors.yangxingzhen.com/jdk/</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112143176.png"></p><h5 id="2、编写"><a href="#2、编写" class="headerlink" title="2、编写"></a>2、编写</h5><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"><span class="token keyword">FROM</span> centos<span class="token punctuation">:</span>7<span class="token keyword">MAINTAINER</span> jack&lt;mykkto.cn<span class="token punctuation">&gt;</span> <span class="token keyword">ENV</span> MYPATH /usr/local<span class="token keyword">WORKDIR</span> $MYPATH <span class="token comment">#安装vim编辑器</span><span class="token keyword">RUN</span> yum <span class="token punctuation">-</span>y install vim<span class="token comment">#安装ifconfig命令查看网络IP</span><span class="token keyword">RUN</span> yum <span class="token punctuation">-</span>y install net<span class="token punctuation">-</span>tools<span class="token comment">#安装java8及lib库</span><span class="token keyword">RUN</span> yum <span class="token punctuation">-</span>y install glibc.i686<span class="token keyword">RUN</span> mkdir /usr/local/java<span class="token comment">#ADD 是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span><span class="token keyword">ADD</span> jdk<span class="token punctuation">-</span>8u171<span class="token punctuation">-</span>linux<span class="token punctuation">-</span>x64.tar.gz /usr/local/java/<span class="token comment">#配置java环境变量</span><span class="token keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.8.0_171<span class="token keyword">ENV</span> JRE_HOME $JAVA_HOME/jre<span class="token keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar<span class="token punctuation">:</span>$JAVA_HOME/lib/tools.jar<span class="token punctuation">:</span>$JRE_HOME/lib<span class="token punctuation">:</span>$CLASSPATH<span class="token keyword">ENV</span> PATH $JAVA_HOME/bin<span class="token punctuation">:</span>$PATH <span class="token keyword">EXPOSE</span> 80 <span class="token keyword">CMD</span> echo $MYPATH<span class="token keyword">CMD</span> echo <span class="token string">"success--------------ok"</span><span class="token keyword">CMD</span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、构建"><a href="#3、构建" class="headerlink" title="3、构建"></a>3、构建</h5><p>docker build -t 新镜像名字:TAG </p><p><code>docker build -t centosjava8:1.5 .</code></p><p><font color="red">注意：上面TAG后面有个空格，有个点</font></p><p>命令：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112154614.png"></p><p>成功：<img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112154465.png"></p><h5 id="4、运行"><a href="#4、运行" class="headerlink" title="4、运行"></a>4、运行</h5><p><code>docker run -it 新镜像名字:TAG </code></p><p><code>docker run -it centosjava8:1.5 /bin/bash</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112157315.png"></p><h5 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h5><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h4 id="2、虚悬镜像"><a href="#2、虚悬镜像" class="headerlink" title="2、虚悬镜像"></a>2、虚悬镜像</h4><h5 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h5><p>仓库名、标签都是<none>的镜像，俗称dangling image</none></p><p>写一个</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112209211.png"></p><h5 id="2、查看"><a href="#2、查看" class="headerlink" title="2、查看"></a>2、查看</h5><p><code>docker image ls -f dangling=true</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112211864.png"></p><h5 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h5><p><code>docker image prune</code></p><p>虚悬镜像已经失去存在价值，可以删</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112220390.png"></p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112222733.png"></p><h2 id="Ⅱ、Docker-网络"><a href="#Ⅱ、Docker-网络" class="headerlink" title="Ⅱ、Docker 网络"></a>Ⅱ、Docker 网络</h2><h3 id="一、是什么-1"><a href="#一、是什么-1" class="headerlink" title="一、是什么"></a>一、是什么</h3><h4 id="1、默认"><a href="#1、默认" class="headerlink" title="1、默认"></a>1、默认</h4><p><strong>docker不启动，默认网络情况</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112239583.png"></p><h4 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h4><p><strong>docker启动后，网络情况</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112238959.png"></p><h3 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h3><h5 id="1、All命令"><a href="#1、All命令" class="headerlink" title="1、All命令"></a>1、All命令</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112247058.png"></p><h5 id="2、主查看网络"><a href="#2、主查看网络" class="headerlink" title="2、主查看网络"></a>2、主查看网络</h5><p><code>docker network ls</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112247338.png"></p><h5 id="3、查看网络源数据"><a href="#3、查看网络源数据" class="headerlink" title="3、查看网络源数据"></a>3、查看网络源数据</h5><p>docker network inspect  XXX网络名字</p><h5 id="4、删除网络"><a href="#4、删除网络" class="headerlink" title="4、删除网络"></a>4、删除网络</h5><p>docker network rm XXX网络名字</p><h5 id="5、案例"><a href="#5、案例" class="headerlink" title="5、案例"></a>5、案例</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207112250806.png"></p><h3 id="三、能干嘛"><a href="#三、能干嘛" class="headerlink" title="三、能干嘛"></a>三、能干嘛</h3><ul><li>容器间的互联和通信以及端口映射</li><li>容器IP变动时候可以通过服务名直接网络通信而不受到影响</li></ul><h3 id="四、网络模式"><a href="#四、网络模式" class="headerlink" title="四、网络模式"></a>四、网络模式</h3><h4 id="1、列表"><a href="#1、列表" class="headerlink" title="1、列表"></a>1、列表</h4><h5 id="1、是什么-1"><a href="#1、是什么-1" class="headerlink" title="1、是什么"></a>1、是什么</h5><ul><li>bridge模式：使用–network  bridge指定，默认使用docker0</li><li>host模式：使用–network host指定</li><li>none模式：使用–network none指定</li><li>container模式：使用–network container:NAME或者容器ID指定</li></ul><h4 id="2、规则"><a href="#2、规则" class="headerlink" title="2、规则"></a>2、规则</h4><p>docker容器内部的ip是有可能会发生改变的</p><p><strong>说明</strong></p><p>1、启动两个容器说明</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207122237578.png"></p><p>2、docker inspect 容器ID or 容器名字</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207122240639.png"></p><h4 id="3、案例："><a href="#3、案例：" class="headerlink" title="3、案例："></a>3、案例：</h4><h4 id="3-1、bridge"><a href="#3-1、bridge" class="headerlink" title="3-1、bridge"></a>3-1、bridge</h4><h5 id="1、是什么-2"><a href="#1、是什么-2" class="headerlink" title="1、是什么"></a>1、是什么</h5><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为docker0，它在<font color="red">内核层</font>连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到<font color="red">同一个物理网络</font>。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，<font color="red">让主机和容器之间可以通过网桥相互通信</font>。</p><p>#查看 bridge 网络的详细信息，并通过 grep 获取名称项</p><p><code>docker network inspect bridge | grep name</code></p><p><code>ifconfig | grep docker </code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207122244593.png"></p><h5 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h5><p>(1）说明：</p><ul><li>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</li><li>docker run 的时候，没有指定network的话默认使用的网桥模式就是bridge，使用的就是docker0。在宿主机ifconfig,就可以看到docker0和自己create的network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo代表127.0.0.1，即localhost，inet addr用来表示网卡的IP地址</li><li>网桥docker0创建一对对等虚拟设备接口一个叫veth，另一个叫eth0，成对匹配。<br>   3.1 整个宿主机的网桥模式都是docker0，类似一个交换机有一堆接口，每个接口叫veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）；<br>   3.2 每个容器实例内部也有一块网卡，每个接口叫eth0；<br>   3.3 docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配。<br> 通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的ip，此时两个容器的网络是互通的。</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207122248655.png"></p><p>(2）命令：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8081<span class="token punctuation">:</span>8080   <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat81 billygoo/tomcat8<span class="token punctuation">-</span>jdk8docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8082<span class="token punctuation">:</span>8080   <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat82 billygoo/tomcat8<span class="token punctuation">-</span>jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(3）验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-13-centos ~<span class="token punctuation">]</span><span class="token comment"># ip addr| tail -n 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132212867.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132216184.png"></p><h4 id="3-2、"><a href="#3-2、" class="headerlink" title="3-2、"></a>3-2、</h4><h5 id="1、是什么-3"><a href="#1、是什么-3" class="headerlink" title="1、是什么"></a>1、是什么</h5><p><strong>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行NAT 转换。</strong></p><h5 id="2、案例-1"><a href="#2、案例-1" class="headerlink" title="2、案例"></a>2、案例</h5><p>(1)说明</p><p>容器将<font color="red">不会获得</font>一个独立的Network Namespace， 而是和宿主机共用一个Network Namespace。<font color="red">容器将不会虚拟出自己的网卡而是使用宿主机的IP和端口。</font></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132223740.png"></p><p>（2）命令</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d     <span class="token punctuation">-</span><span class="token punctuation">-</span>network host <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat83 billygoo/tomcat8<span class="token punctuation">-</span>jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3)无之前的配对显示了，看容器实例内部</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132241253.png"></p><p>(4)没有设置-p的端口映射了，如何访问启动的tomcat83 ?</p><p>就是默认端口，http://宿主机IP:8080/</p><p>比如：tomcat 是 8080，nginx 是 80 ，mysql 是3306</p><h4 id="3-3、none"><a href="#3-3、none" class="headerlink" title="3-3、none"></a>3-3、none</h4><h5 id="1、是什么-4"><a href="#1、是什么-4" class="headerlink" title="1、是什么"></a>1、是什么</h5><p>禁用网络功能，只有lo标识(就是127.0.0.1表示本地回环)</p><h5 id="2、案例-2"><a href="#2、案例-2" class="headerlink" title="2、案例"></a>2、案例</h5><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8084<span class="token punctuation">:</span>8080 <span class="token punctuation">-</span><span class="token punctuation">-</span>network none <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat84 billygoo/tomcat8<span class="token punctuation">-</span>jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132256020.png"></p><h4 id="3-4、container"><a href="#3-4、container" class="headerlink" title="3-4、container"></a>3-4、container</h4><h5 id="1、是什么-5"><a href="#1、是什么-5" class="headerlink" title="1、是什么"></a>1、是什么</h5><p>新建的容器和已经存在的一个容器共享一个网络ip配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207132257038.png"></p><h5 id="2、案例-3"><a href="#2、案例-3" class="headerlink" title="2、案例"></a>2、案例</h5><p>Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M的大小，所以特别适合容器打包。</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>it       <span class="token punctuation">-</span>d                              <span class="token punctuation">-</span><span class="token punctuation">-</span>name alpine1  alpine /bin/shdocker run <span class="token punctuation">-</span>it  <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>network container<span class="token punctuation">:</span>alpine1 <span class="token punctuation">-</span><span class="token punctuation">-</span>name alpine2  alpine /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207161032214.png"></p><p><strong>关闭alpine1，再看看alpine2</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207161039429.png"></p><h4 id="3-5、★-自定义网络"><a href="#3-5、★-自定义网络" class="headerlink" title="3-5、★ 自定义网络"></a>3-5、★ 自定义网络</h4><h5 id="1、是什么-6"><a href="#1、是什么-6" class="headerlink" title="1、是什么"></a>1、是什么</h5><p>字面意思，自定义的网络</p><h5 id="2、案例-4"><a href="#2、案例-4" class="headerlink" title="2、案例"></a>2、案例</h5><p><strong>一类：before</strong></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8081<span class="token punctuation">:</span>8080   <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat81 billygoo/tomcat8<span class="token punctuation">-</span>jdk8docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8082<span class="token punctuation">:</span>8080   <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat82 billygoo/tomcat8<span class="token punctuation">-</span>jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述成功启动并用docker exec进入各自容器实例内部</p><p><strong>存在的问题：</strong>可以按照IP ping 通，但是无法用服务名 ping 通</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207161129303.png"></p><p><strong>二类：after</strong></p><p>1、新建桥接网络</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker network create jack_network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、新建容器加入上一步新建的自定义网络</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8081<span class="token punctuation">:</span>8080 <span class="token punctuation">-</span><span class="token punctuation">-</span>network jack_network  <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat81 billygoo/tomcat8<span class="token punctuation">-</span>jdk8docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8082<span class="token punctuation">:</span>8080 <span class="token punctuation">-</span><span class="token punctuation">-</span>network jack_network  <span class="token punctuation">-</span><span class="token punctuation">-</span>name tomcat82 billygoo/tomcat8<span class="token punctuation">-</span>jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、测试互 ping</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207161722508.png"></p><p><strong>4、结论</strong></p><ul><li><font color="red">自定义网络本身就维护好了主机名和ip的对应关系（ip和域名都能通）</font></li></ul><h3 id="五、Docker架构图解"><a href="#五、Docker架构图解" class="headerlink" title="五、Docker架构图解"></a>五、Docker架构图解</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。 </p><p>Docker 运行的基本流程为：</p><p>1 用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。<br>2 Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。<br>3 Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。<br>4 Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver将下载镜像以Graph的形式存储。<br>5 当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。<br>6 当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。<br>7 Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体对容器进行的操作。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207161729655.png"></p><h2 id="Ⅲ、Docker微服务实战"><a href="#Ⅲ、Docker微服务实战" class="headerlink" title="Ⅲ、Docker微服务实战"></a>Ⅲ、Docker微服务实战</h2><h3 id="一、创建一个普通模块"><a href="#一、创建一个普通模块" class="headerlink" title="一、创建一个普通模块"></a>一、创建一个普通模块</h3><h4 id="1、建model"><a href="#1、建model" class="headerlink" title="1、建model"></a>1、建model</h4><p>docker_boot</p><h4 id="2、改pom"><a href="#2、改pom" class="headerlink" title="2、改pom"></a>2、改pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker_boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper.version</span><span class="token punctuation">&gt;</span></span>4.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot通用依赖模块--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--test--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- &lt;build &gt; 主要用于编译设置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 定义打包成jar的名字 --&gt;</span>        <span class="token comment">&lt;!-- 这里如果不定义 , 打包成的jar名字格式为 : &lt;artifactId&gt; + &lt;version&gt; --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>docker_jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--SpringBoot maven插件--&gt;</span>            <span class="token comment">&lt;!-- 可以将应用打成一个可执行的jar包 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 设置启动入口 --&gt;</span>                <span class="token comment">&lt;!-- manClass即使不配置 , SprinBoot也在打包的时候也清楚入口是哪个 , 其实不用配置 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.kk.DockerBootApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、写yml"><a href="#3、写yml" class="headerlink" title="3、写yml"></a>3、写yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、主启动"><a href="#4、主启动" class="headerlink" title="4、主启动"></a>4、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">DockerBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、业务类"><a href="#5、业务类" class="headerlink" title="5、业务类"></a>5、业务类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order/docker"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloDocker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello docker"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span>randomUUID <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/order/index"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务端口号: "</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span>randomUUID <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>toString <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、打-jar-dockerfile"><a href="#二、打-jar-dockerfile" class="headerlink" title="二、打 jar + dockerfile"></a>二、打 jar + dockerfile</h3><h4 id="1、打包"><a href="#1、打包" class="headerlink" title="1、打包"></a>1、打包</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207170017227.png"></p><h4 id="2、编写Dockerfile"><a href="#2、编写Dockerfile" class="headerlink" title="2、编写Dockerfile"></a>2、编写Dockerfile</h4><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"><span class="token comment"># 基础镜像使用java</span><span class="token keyword">FROM</span> java<span class="token punctuation">:</span>8<span class="token comment"># 作者</span><span class="token keyword">MAINTAINER</span> jack<span class="token comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span><span class="token keyword">VOLUME</span> /tmp<span class="token comment"># 将jar包添加到容器中并更名为 jack_docker.jar</span><span class="token keyword">ADD</span> docker_jar.jar jack_docker.jar<span class="token comment"># 运行jar包</span><span class="token keyword">RUN</span> bash <span class="token punctuation">-</span>c <span class="token string">'touch /jack_docker.jar'</span><span class="token keyword">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"-jar"</span><span class="token punctuation">,</span><span class="token string">"/jack_docker.jar"</span><span class="token punctuation">]</span><span class="token comment">#暴露6001端口作为微服务</span><span class="token keyword">EXPOSE</span> 6001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207170932494.png"></p><h4 id="3、构建镜像"><a href="#3、构建镜像" class="headerlink" title="3、构建镜像"></a>3、构建镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build <span class="token punctuation">-</span>t jack_docker<span class="token punctuation">:</span>1.6 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207170932570.png"></p><h4 id="4、运行容器"><a href="#4、运行容器" class="headerlink" title="4、运行容器"></a>4、运行容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 6001<span class="token punctuation">:</span>6001 jack_docker<span class="token punctuation">:</span>1.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、访问测试"><a href="#5、访问测试" class="headerlink" title="5、访问测试"></a>5、访问测试</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207170936037.png"></p><h2 id="Ⅳ、Docker-compose容器编排"><a href="#Ⅳ、Docker-compose容器编排" class="headerlink" title="Ⅳ、Docker-compose容器编排"></a>Ⅳ、Docker-compose容器编排</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1、是什么-7"><a href="#1、是什么-7" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>Docker-Compose是Docker官方的开源项目，快速构建多个容器，负责实现对Docker容器集群的快速编排。</p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><p>1、下载：快速国内镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、测试</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker<span class="token punctuation">-</span>compose <span class="token punctuation">-</span><span class="token punctuation">-</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、核心"><a href="#3、核心" class="headerlink" title="3、核心"></a>3、核心</h4><p>1、文件</p><p>docker-compose.yml</p><p>2、服务（service）</p><p>一个个应用容器实例，比如订单微服务、库存微服务、mysql容器、nginx容器或者redis容器</p><p>3、工程（project）</p><p>由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p><h3 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h3><ol><li>编写Dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务。</li><li>最后，执行docker-compose up命令 来启动并运行整个应用程序，完成一键部署上线</li></ol><h3 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h3><blockquote><p>Compose常用命令<br>docker-compose -h                           # 查看帮助<br>docker-compose up                           # 启动所有docker-compose服务<br><font color="red">docker-compose up -d                        # 启动所有docker-compose服务并后台运行</font><br><font color="red">docker-compose down                         # 停止并删除容器、网络、卷、镜像。</font><br>docker-compose exec  yml里面的服务id                 # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash<br>docker-compose ps                      # 展示当前docker-compose编排过的运行的所有容器<br>docker-compose top                     # 展示当前docker-compose编排过的容器进程docker-compose logs  yml里面的服务id     # 查看容器输出日志<br><font color="red">docker-compose config     # 检查配置</font><br><font color="red">docker-compose config -q  # 检查配置，有问题才有输出</font><br>docker-compose restart   # 重启服务<br>docker-compose start     # 启动服务<br>docker-compose stop      # 停止服务</p></blockquote><h3 id="四、案例-1"><a href="#四、案例-1" class="headerlink" title="四、案例"></a>四、案例</h3><h4 id="1、改造微服务"><a href="#1、改造微服务" class="headerlink" title="1、改造微服务"></a>1、改造微服务</h4><p>1、建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别 0=女 1=男 '</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'删除标志，默认0不删除，1删除'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户表'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、改pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker_boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper.version</span><span class="token punctuation">&gt;</span></span>4.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--guava Google 开源的 Guava 中自带的布隆过滤器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>23.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- redisson --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.13.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot通用依赖模块--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger2--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot与Redis整合依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springCache--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--springCache连接池依赖包--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- jedis --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Mysql数据库驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringBoot集成druid连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis和springboot整合--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 添加springboot对amqp的支持 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--通用基础配置junit/devtools/test/log4j/lombok/hutool--&gt;</span>        <span class="token comment">&lt;!--hutool--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--persistence--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.persistence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>persistence-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--通用Mapper--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mapper.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- &lt;build &gt; 主要用于编译设置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 定义打包成jar的名字 --&gt;</span>        <span class="token comment">&lt;!-- 这里如果不定义 , 打包成的jar名字格式为 : &lt;artifactId&gt; + &lt;version&gt; --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>docker_jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--SpringBoot maven插件--&gt;</span>            <span class="token comment">&lt;!-- 可以将应用打成一个可执行的jar包 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 设置启动入口 --&gt;</span>                <span class="token comment">&lt;!-- manClass即使不配置 , SprinBoot也在打包的时候也清楚入口是哪个 , 其实不用配置 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.kk.DockerBootApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、application.properties.properties</p><pre class="line-numbers language-boostrap.properties" data-language="boostrap.properties"><code class="language-boostrap.properties">server.port=6001# ========================alibaba.druid相关配置=====================spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://106.52.23.202:3306/db2022?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=rootspring.datasource.druid.test-while-idle=false# ========================redis相关配置=====================spring.redis.database=0spring.redis.host=106.12.159.22spring.redis.port=6379spring.redis.password=spring.redis.lettuce.pool.max-active=8spring.redis.lettuce.pool.max-wait=-1msspring.redis.lettuce.pool.max-idle=8spring.redis.lettuce.pool.min-idle=0# ========================mybatis相关配置===================mybatis.mapper-locations=classpath:mapper/*.xmlmybatis.type-aliases-package=com.kk.docker.entities# ========================swagger=====================spring.swagger2.enabled=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.kk.docker.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">DockerBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、业务类</p><p>5-1、config配置类</p><p><strong>RedisConfig</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span></span><span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param lettuceConnectionFactory     * @return redis序列化的工具配置类，下面这个请一定开启配置     * 127.0.0.1:6379&gt; keys *     * 1) "ord:102"  序列化过     * 2) "\xac\xed\x00\x05t\x00\aord:102"   野生，没有序列化过     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">LettuceConnectionFactory</span> lettuceConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span>setConnectionFactory <span class="token punctuation">(</span>lettuceConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置key序列化方式string</span>        redisTemplate<span class="token punctuation">.</span>setKeySerializer <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置value的序列化方式json</span>        redisTemplate<span class="token punctuation">.</span>setValueSerializer <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span>setHashKeySerializer <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span>setHashValueSerializer <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span>afterPropertiesSet <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SwaggerConfig</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.swagger2.enabled}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span> <span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span>apiInfo <span class="token punctuation">(</span>apiInfo <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>enable <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span>                <span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>apis <span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span>basePackage <span class="token punctuation">(</span><span class="token string">"com.kk.docker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//你自己的package</span>                <span class="token punctuation">.</span>paths <span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span>any <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>build <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>title <span class="token punctuation">(</span><span class="token string">"java 学习 docker"</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>description <span class="token punctuation">(</span><span class="token string">"docker-compose"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>version <span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>termsOfServiceUrl <span class="token punctuation">(</span><span class="token string">"https://www.mykkto.cn"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>build <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-2、新建entity</p><p><strong>User</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"JDBC"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/**     * 性别 0=女 1=男     */</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> sex<span class="token punctuation">;</span>    <span class="token comment">/**     * 删除标志，默认0不删除，1删除     */</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> deleted<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * @return id     */</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取用户名     *     * @return username - 用户名     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置用户名     *     * @param username 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取密码     *     * @return password - 密码     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置密码     *     * @param password 密码     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取性别 0=女 1=男     *     * @return sex - 性别 0=女 1=男     */</span>    <span class="token keyword">public</span> <span class="token class-name">Byte</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置性别 0=女 1=男     *     * @param sex 性别 0=女 1=男     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">Byte</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取删除标志，默认0不删除，1删除     *     * @return deleted - 删除标志，默认0不删除，1删除     */</span>    <span class="token keyword">public</span> <span class="token class-name">Byte</span> <span class="token function">getDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deleted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置删除标志，默认0不删除，1删除     *     * @param deleted 删除标志，默认0不删除，1删除     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeleted</span><span class="token punctuation">(</span><span class="token class-name">Byte</span> deleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deleted <span class="token operator">=</span> deleted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取更新时间     *     * @return update_time - 更新时间     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置更新时间     *     * @param updateTime 更新时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> updateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>updateTime <span class="token operator">=</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取创建时间     *     * @return create_time - 创建时间     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置创建时间     *     * @param createTime 创建时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> createTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UserDTO</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户ID"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"性别 0=女 1=男 "</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"删除标志，默认0不删除，1删除"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> deleted<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * @return id     */</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取用户名     *     * @return username - 用户名     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置用户名     *     * @param username 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取密码     *     * @return password - 密码     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置密码     *     * @param password 密码     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取性别 0=女 1=男     *     * @return sex - 性别 0=女 1=男     */</span>    <span class="token keyword">public</span> <span class="token class-name">Byte</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置性别 0=女 1=男     *     * @param sex 性别 0=女 1=男     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">Byte</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取删除标志，默认0不删除，1删除     *     * @return deleted - 删除标志，默认0不删除，1删除     */</span>    <span class="token keyword">public</span> <span class="token class-name">Byte</span> <span class="token function">getDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deleted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置删除标志，默认0不删除，1删除     *     * @param deleted 删除标志，默认0不删除，1删除     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeleted</span><span class="token punctuation">(</span><span class="token class-name">Byte</span> deleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deleted <span class="token operator">=</span> deleted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取更新时间     *     * @return update_time - 更新时间     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置更新时间     *     * @param updateTime 更新时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> updateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>updateTime <span class="token operator">=</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取创建时间     *     * @return create_time - 创建时间     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置创建时间     *     * @param createTime 创建时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> createTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-3 新建mapper</p><p><strong>新建接口UserMapper</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>src\main\resources路径下新建mapper文件夹并新增UserMapper.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.docker.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.docker.entirys.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--          WARNING - @mbg.generated        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TINYINT<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleted<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TINYINT<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleted<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateTime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-4 新建service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CACHE_KEY_USER <span class="token operator">=</span> <span class="token string">"user:"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * addUser     *     * @param user     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1 先插入mysql并成功</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span>insertSelective <span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//2 需要再次查询一下mysql将数据捞回来并ok</span>            user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span>selectByPrimaryKey <span class="token punctuation">(</span>user<span class="token punctuation">.</span>getId <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3 将捞出来的user存进redis，完成新增功能的数据一致性。</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> CACHE_KEY_USER <span class="token operator">+</span> user<span class="token punctuation">.</span>getId <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span>opsForValue <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>set <span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**F     * findUserById     *     * @param id     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> CACHE_KEY_USER <span class="token operator">+</span> id<span class="token punctuation">;</span>        <span class="token comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql</span>        user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span>opsForValue <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>get <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//2 redis里面无，继续查询mysql</span>            user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span>selectByPrimaryKey <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//3.1 redis+mysql 都无数据</span>                <span class="token comment">//你具体细化，防止多次穿透，我们规定，记录下导致穿透的这个key回写redis</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//3.2 mysql有，需要将数据写回redis，保证下一次的缓存命中率</span>                redisTemplate<span class="token punctuation">.</span>opsForValue <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>set <span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-5 新建controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">IdUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>entirys<span class="token punctuation">.</span></span><span class="token class-name">UserDTO</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户User接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"数据库新增3条记录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span>setUsername <span class="token punctuation">(</span><span class="token string">"jack"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span>setPassword <span class="token punctuation">(</span><span class="token class-name">IdUtil</span><span class="token punctuation">.</span>simpleUUID <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>substring <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span>setSex <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Random</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>nextInt <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userService<span class="token punctuation">.</span>addUser <span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"删除1条记录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/delete/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span>deleteUser <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"修改1条记录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span>copyProperties <span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span>updateUser <span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询1条记录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/find/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span>findUserById2 <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、打包</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207182254361.png"></p><p>7、编写 Dockerfile</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"><span class="token comment"># 基础镜像使用java</span><span class="token keyword">FROM</span> java<span class="token punctuation">:</span>8<span class="token comment"># 作者</span><span class="token keyword">MAINTAINER</span> jack<span class="token comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span><span class="token keyword">VOLUME</span> /tmp<span class="token comment"># 将jar包添加到容器中并更名为 jack_docker.jar</span><span class="token keyword">ADD</span> docker_jar.jar jack_docker.jar<span class="token comment"># 运行jar包</span><span class="token keyword">RUN</span> bash <span class="token punctuation">-</span>c <span class="token string">'touch /jack_docker.jar'</span><span class="token keyword">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"-jar"</span><span class="token punctuation">,</span><span class="token string">"/jack_docker.jar"</span><span class="token punctuation">]</span><span class="token comment">#暴露6001端口作为微服务</span><span class="token keyword">EXPOSE</span> 6001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、构建镜像</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build  <span class="token punctuation">-</span>t  jack_docker<span class="token punctuation">:</span>1.7 . <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207182303132.png"></p><p>9、运行</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 6001<span class="token punctuation">:</span>6001 <span class="token punctuation">-</span><span class="token punctuation">-</span>name  jackto17   jack_docker<span class="token punctuation">:</span>1.7 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、访问 swageer</p><p><a href="http://106.xx.xx.xxx:6001/swagger-ui.html">http://106.XX.XX.XXX:6001/swagger-ui.html</a></p><h4 id="2、不用Compose"><a href="#2、不用Compose" class="headerlink" title="2、不用Compose"></a>2、不用Compose</h4><ol><li>单独启动容器 redis</li><li>单独启动容器 mysql</li><li>单独启动容器 微服务</li></ol><h4 id="3、存在的问题"><a href="#3、存在的问题" class="headerlink" title="3、存在的问题"></a>3、存在的问题</h4><ul><li>先后顺序要求固定，先mysql+redis才能微服务访问成功</li><li>多个run命令……</li><li>容器间的启停或宕机，有可能导致IP地址对应的容器实例变化，映射出错，<br>要么生产IP写死(可以但是不推荐)，要么通过服务调用</li></ul><h4 id="4、使用Compose"><a href="#4、使用Compose" class="headerlink" title="4、使用Compose"></a>4、使用Compose</h4><p><strong>1、编写 docker-compose.yml文件</strong></p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">version: "3"services:  microService:    image: jack_docker:1.8    container_name: ms01    ports:      - "6001:6001"    volumes:      - /app/microService:/data    networks:      - mykk_net    depends_on:      - redis      - mysql  redis:    image: redis:6.0.8    ports:      - "6379:6379"    volumes:      - /app/redis/redis.conf:/etc/redis/redis.conf      - /app/redis/data:/data    networks:      - mykk_net    command: redis-server /etc/redis/redis.conf  mysql:    image: mysql:5.7    environment:      MYSQL_ROOT_PASSWORD: 'a1b2c3'      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'      MYSQL_DATABASE: 'db2022'      MYSQL_USER: 'jack'      MYSQL_PASSWORD: 'a1b2c3'    ports:       - "3306:3306"    volumes:       - /app/mysql/db:/var/lib/mysql       - /app/mysql/conf/my.cnf:/etc/my.cnf       - /app/mysql/init:/docker-entrypoint-initdb.d    networks:      - mykk_net    command: --default-authentication-plugin=mysql_native_password #解决外部无法访问networks:   mykk_net:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、第二次修改微服务工程 docker_boot</strong></p><p>2-1 改 YML：通过服务名访问，IP无关</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207192321216.png"></p><p>2-2 打包，编写 Dockerfile</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207192336342.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207192335353.png"></p><p>2-3 构建镜像</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build <span class="token punctuation">-</span>t  jack_docker<span class="token punctuation">:</span>1.8 . <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207192348732.png"></p><p><strong>3、执行 docker-compose</strong></p><p>执行 <code>docker-compose up</code><br>或者<br>执行 <code>docker-compose up -d</code></p><h4 id="4、创建表"><a href="#4、创建表" class="headerlink" title="4、创建表"></a>4、创建表</h4><blockquote><p>docker exec -it 容器实例id /bin/bash</p><br><p>mysql -uroot -p</p><br><p>create database db2022;</p><br><p>use db2022;</p><br><p>CREATE TABLE <code>t_user</code> (<br>  <code>id</code> INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,<br>  <code>username</code> VARCHAR(50) NOT NULL DEFAULT ‘’ COMMENT ‘用户名’,<br>  <code>password</code> VARCHAR(50) NOT NULL DEFAULT ‘’ COMMENT ‘密码’,<br>  <code>sex</code> TINYINT(4) NOT NULL DEFAULT ‘0’ COMMENT ‘性别 0=女 1=男 ‘,<br>  <code>deleted</code> TINYINT(4) UNSIGNED NOT NULL DEFAULT ‘0’ COMMENT ‘删除标志，默认0不删除，1删除’,<br>  <code>update_time</code> TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ‘更新时间’,<br>  <code>create_time</code> TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=’用户表’;</p></blockquote><h4 id="5、关停"><a href="#5、关停" class="headerlink" title="5、关停"></a>5、关停</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker<span class="token punctuation">-</span>compose stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202207202134367.png"></p><h3 id="五、命令-docker-compose"><a href="#五、命令-docker-compose" class="headerlink" title="五、命令(docker-compose)"></a>五、命令(docker-compose)</h3><blockquote><p>Compose常用命令<br>docker-compose -h                           # 查看帮助<br><font color="red">docker-compose up     </font>                      # 启动所有docker-compose服务<br><font color="red">docker-compose up -d      </font>                  # 启动所有docker-compose服务并后台运行<br><font color="red">docker-compose down </font>                        # 停止并删除容器、网络、卷、镜像。<br>docker-compose exec  yml里面的服务id                 # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash<br>docker-compose ps                      # 展示当前docker-compose编排过的运行的所有容器<br>docker-compose top                     # 展示当前docker-compose编排过的容器进程docker-compose logs  yml里面的服务id     # 查看容器输出日志<br><font color="red">dokcer-compose config </font>    # 检查配置<br><font color="red">dokcer-compose config -q </font> # 检查配置，有问题才有输出<br>docker-compose restart   # 重启服务<br>docker-compose start     # 启动服务<br><font color="red">docker-compose stop  </font>    # 停止服务</p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="参考地址-↓"><a href="#参考地址-↓" class="headerlink" title="参考地址 ↓"></a>参考地址 ↓</h2><h3 id="1、docker-加速（博主简书）"><a href="#1、docker-加速（博主简书）" class="headerlink" title="1、docker 加速（博主简书）"></a>1、docker 加速（博主简书）</h3><p>url：<a href="https://www.jianshu.com/p/f554c85b25c1">https://www.jianshu.com/p/f554c85b25c1</a></p><h3 id="2、DockerBuild报错：The-command-‘-bin-sh-c-yum-install-y-vim‘-returned-a-non-zero-code-1"><a href="#2、DockerBuild报错：The-command-‘-bin-sh-c-yum-install-y-vim‘-returned-a-non-zero-code-1" class="headerlink" title="2、DockerBuild报错：The command ‘/bin/sh -c yum install -y vim‘ returned a non-zero code: 1"></a>2、DockerBuild报错：The command ‘/bin/sh -c yum install -y vim‘ returned a non-zero code: 1</h3><p>url：<a href="https://blog.csdn.net/weixin_53402685/article/details/125296621">https://blog.csdn.net/weixin_53402685/article/details/125296621</a></p><h3 id="3、docker-compose-日志输出"><a href="#3、docker-compose-日志输出" class="headerlink" title="3、docker-compose 日志输出"></a>3、docker-compose 日志输出</h3><p>url：<a href="https://www.cnblogs.com/sunstudy/articles/16340509.html">https://www.cnblogs.com/sunstudy/articles/16340509.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="docker" scheme="https://mykkto.github.io/categories/docker/"/>
    
    
    <category term="docker-compose" scheme="https://mykkto.github.io/tags/docker-compose/"/>
    
    <category term="dockerfile" scheme="https://mykkto.github.io/tags/dockerfile/"/>
    
    <category term="docker网络" scheme="https://mykkto.github.io/tags/docker%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>大数据-Flink流式计算框架(JAVA)</title>
    <link href="https://mykkto.github.io/posts/1b79564d.html"/>
    <id>https://mykkto.github.io/posts/1b79564d.html</id>
    <published>2022-05-17T14:17:13.000Z</published>
    <updated>2022-11-12T15:07:07.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    </p><h2 id="0️⃣代码地址"><a href="#0️⃣代码地址" class="headerlink" title="0️⃣代码地址"></a>0️⃣代码地址</h2><p><a href="https://github.com/mykkTo/Flink_java.git">https://github.com/mykkTo/Flink_java.git</a></p><h2 id="Ⅰ、Flink-初识"><a href="#Ⅰ、Flink-初识" class="headerlink" title="Ⅰ、Flink 初识"></a>Ⅰ、Flink 初识</h2><h3 id="一、基本概述"><a href="#一、基本概述" class="headerlink" title="一、基本概述"></a>一、基本概述</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>Flink 是 Apache 基金会旗下的一个开源大数据处理框架。目前，Flink 已经成为各大公司 </p><p>大数据实时处理的发力重点，特别是国内以阿里为代表的一众互联网大厂都在全力投入，为 </p><p>Flink 社区贡献了大量源码。如今 Flink 已被很多人认为是大数据实时处理的方向和未来，许多 </p><p>公司也都在招聘和储备掌握 Flink 技术的人才。 </p><h4 id="2、源起和设计理念"><a href="#2、源起和设计理念" class="headerlink" title="2、源起和设计理念"></a>2、源起和设计理念</h4><p>Flink 起源于一个叫作 Stratosphere 的项目，它是由 3 所地处柏林的大学和欧洲其他一些大 学在 2010~2014 年共同进行的研究项目，由柏林理工大学的教授沃克尔·马尔科（Volker Markl） 领衔开发。2014 年 4 月，Stratosphere 的代码被复制并捐赠给了 Apache 软件基金会，Flink 就 是在此基础上被重新设计出来的。 在德语中，“flink”一词表示“快速、灵巧”。项目的 logo 是一只彩色的松鼠，当然了， 这不仅是因为 Apache 大数据项目对动物的喜好（是否联想到了 Hadoop、Hive？），更是因为 松鼠这种小动物完美地体现了“快速、灵巧”的特点。关于 logo 的颜色，还一个有趣的缘由： 柏林当地的松鼠非常漂亮，颜色是迷人的红棕色；而 Apache 软件基金会的 logo，刚好也是一 根以红棕色为主的渐变色羽毛。于是，Flink 的松鼠 Logo 就设计成了红棕色，而且拥有一个漂 亮的渐变色尾巴，尾巴的配色与 Apache 软件基金会的 logo 一致。这只松鼠色彩炫目，既呼应 了 Apache 的风格，似乎也预示着 Flink 未来将要大放异彩。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182118661.png"></p><h3 id="二、Flink-的应用"><a href="#二、Flink-的应用" class="headerlink" title="二、Flink 的应用"></a>二、Flink 的应用</h3><p>Flink 是一个大数据流处理引擎，它可以为不同的行业提供大数据实时处理的解决方案。 随着 Flink 的快速发展完善，如今在世界范围许多公司都可以见到 Flink 的身影。 目前在全球范围内，北美、欧洲和金砖国家均是 Flink 的应用热门区域。当然，这些地区 其实也就是 IT、互联网行业较发达的地区。 </p><p>Flink 在国内热度尤其高，一方面是因为阿里的贡献和带头效应，另一方面也跟中国的应 用场景密切相关。中国的人口规模与互联网使用普及程度，决定了对大数据处理的速度要求越 来越高，也迫使中国的互联网企业去追逐更高的数据处理效率。试想在中国，一个网站可能要 面对数亿的日活用户、每秒数亿次的计算峰值，这对很多国外的公司来说是无法想象的。而  Flink 恰好给我们高速准确的处理海量流式数据提供了可能。 </p><h4 id="1、企业中的应用"><a href="#1、企业中的应用" class="headerlink" title="1、企业中的应用"></a>1、企业中的应用</h4><p>Flink 为全球许多公司和企业的关键业务应用提供了强大的支持。 对于数据处理而言，任何行业、任何公司的需求其实都是一样的：数据规模大、实时性要 求高、确保结果准确、方便扩展、故障后可恢复——而这些要求，作为新一代大数据流式处理 引擎的 Flink 统统可以满足！这也正是 Flink 在全世界范围得到广泛应用的原因。 </p><h4 id="2、主要的应用场景"><a href="#2、主要的应用场景" class="headerlink" title="2、主要的应用场景"></a>2、主要的应用场景</h4><ol><li><strong>电商和市场营销</strong></li></ol><p>举例：实时数据报表、广告投放、实时推荐 </p><p>在电商行业中，网站点击量是统计 PV、UV 的重要来源，也是如今“流量经济”的最主要 数据指标。很多公司的营销策略，比如广告的投放，也是基于点击量来决定的。另外，在网站上提供给用户的实时推荐，往往也是基于当前用户的点击行为做出的。 网站获得的点击数据可能是连续且不均匀的，还可能在同一时间大量产生，这是典型的数 据流。如果我们希望把它们全部收集起来，再去分析处理，就会面临很多问题：首先，我们需 要很大的空间来存储数据；其次，收集数据的过程耗去了大量时间，统计分析结果的实时性就 大大降低了；另外，分布式处理无法保证数据的顺序，如果我们只以数据进入系统的时间为准， 可能导致最终结果计算错误。 我们需要的是直接处理数据流，而 Flink 就可以做到这一点。 </p><ol start="2"><li><strong>物联网（IOT）</strong></li></ol><p>举例：传感器实时数据采集和显示、实时报警，交通运输业 </p><p>物联网是流数据被普遍应用的领域。各种传感器不停获得测量数据，并将它们以流的形式 传输至数据中心。而数据中心会将数据处理分析之后，得到运行状态或者报警信息，实时地显 示在监控屏幕上。所以在物联网中，低延迟的数据传输和处理，以及准确的数据分析通常很关 键。 交通运输业也体现了流处理的重要性。比如说，如今高铁运行主要就是依靠传感器检测数 据，测量数据包括列车的速度和位置，以及轨道周边的状况。这些数据会从轨道传给列车，再 从列车传到沿途的其他传感器；与此同时，数据报告也被发送回控制中心。因为列车处于高速 行驶状态，因此数据处理的实时性要求是极高的。如果流数据没有被及时正确处理，调整意见 和警告就不能相应产生，后果可能会非常严重。 </p><ol start="3"><li><strong>物流配送和服务业</strong></li></ol><p>举例：订单状态实时更新、通知信息推送 </p><p>在很多服务型应用中，都会涉及订单状态的更新和通知的推送。这些信息基于事件触发， 不均匀地连续不断生成，处理之后需要及时传递给用户。这也是非常典型的数据流的处理。 </p><ol start="4"><li><strong>银行和金融业</strong></li></ol><p>举例：实时结算和通知推送，实时检测异常行为 </p><p>银行和金融业是另一个典型的应用行业。用户的交易行为是连续大量发生的，银行面对的 是海量的流式数据。由于要处理的交易数据量太大，以前的银行是按天结算的，汇款一般都要 隔天才能到账。所以有一个说法叫作“银行家工作时间”，说的就是银行家不仅不需要 996，甚 至下午早早就下班了：因为银行需要早点关门进行结算，这样才能保证第二天营业之前算出准 确的账。这显然不能满足我们快速交易的需求。在全球化经济中，能够提供 24 小时服务变得 越来越重要。现在交易和报表都会快速准确地生成，我们跨行转账也可以做到瞬间到账，还可以接到实时的推送通知。这就需要我们能够实时处理数据流。 另外，信用卡欺诈的检测也需要及时的监控和报警。一些金融交易市场，对异常交易行为 的及时检测可以更好地进行风险控制；还可以对异常登录进行检测，从而发现钓鱼式攻击，从 而避免巨大的损失。</p><h3 id="三、流式计算演变"><a href="#三、流式计算演变" class="headerlink" title="三、流式计算演变"></a>三、流式计算演变</h3><p>我们已经了解，Flink 的主要应用场景，就是 <font color="red">处理大规模的数据流</font>。那为什么一定要用 Flink 呢？数据处理还有没有其他的方式？要解答这个疑惑，我们就需要先从流处理和批处理的概念 讲起。 </p><h4 id="1、流处理和批处理"><a href="#1、流处理和批处理" class="headerlink" title="1、流处理和批处理"></a>1、流处理和批处理</h4><p>数据处理有不同的方式。 </p><p>对于具体应用来说，有些场景数据是一个一个来的，是一组有序的数据序列，我们把它叫作“数据流”；而有些场景的数据，本身就是一批同时到来，是一个有限的数据集，这就是批量数据（有时也直接叫数据集）。 </p><p>容易想到，处理数据流，当然应该“来一个就处理一个”，这种数据处理模式就叫作流处理；因为这种处理是即时的，所以也叫实时处理。与之对应，处理批量数据自然就应该一批读入、一起计算，这种方式就叫作<font color="red">批处理，也叫作离线处理</font>。 </p><p>那真实的应用场景中，到底是数据流更常见、还是批量数据更常见呢？ </p><p>生活中，这两种形式的数据都有，如图 1-4 所示。比如我们日常发信息，可以一句一句地 说，也可以写一大段一起发过去。一句一句的信息，就是一个一个的数据，它们构成的序列就是一个数据流；而一大段信息，是一组数据的集合，对应就是批量数据（数据集）。 </p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182129352.png"></p><p>当然，有经验的人都会知道，一句一句地发，你一言我一语，有来有往这才叫聊天；一大 段信息直接砸过去，别人看着都眼晕，很容易就没下文了——如果是很重要的整篇内容（比如 表白信），写成文档或者邮件发过去可能效果会更好。 所以我们看到，“聊天”这个生活场景，数据的生成、传递和接收处理，都是流式的；而 “写信”的场景，数据的生成尽管应该也是流式的（字总得一个个写），但我们可以把它们收集起来，统一传输、统一处理（当然我们还可以进一步较真：处理也是流式的，字得一个一个读）。 不论传输处理的方式是怎样的，数据的生成，一般都是流式的。 </p><h4 id="2、传统事务处理"><a href="#2、传统事务处理" class="headerlink" title="2、传统事务处理"></a>2、传统事务处理</h4><p>IT 互联网公司往往会用不同的应用程序来处理各种业务。比如内部使用的企业资源规划 （ERP）系统、客户关系管理（CRM）系统，还有面向客户的 Web 应用程序。这些系统一般都 会进行分层设计：“计算层”就是应用程序本身，用于数据计算和处理；而“存储层”往往是传统的关系型数据库，用于数据存储，如图</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182136879.png"></p><p>我们发现，这里的应用程序在处理数据的模式上有共同之处：接收的数据是持续生成的事 件，比如用户的点击行为，客户下的订单，或者操作人员发出的请求。处理事件时，应用程序 需要先读取远程数据库的状态，然后按照处理逻辑得到结果，将响应返回给用户，并更新数据库状态。一般来说，一个数据库系统可以服务于多个应用程序，它们有时会访问相同的数据库或表</p><p>对于各种事件请求，事务处理的方式能够保证实时响应，好处是一目了然的。但是我们知道，这样的架构对表和数据库的设计要求很高；当数据规模越来越庞大、系统越来越复杂时，可能需要对表进行重构，而且一次联表查询也会花费大量的时间，甚至不能及时得到返回结果。于是，作为程序员就只好将更多的精力放在表的设计和重构，以及 SQL 的调优上，而无法专注于业务逻辑的实现了——我们都知道，这种工作费力费时，却没法直接体现在产品上给老板看，简直就是噩梦。</p><p>那有没有更合理、更高效的处理架构呢？<strong>↓</strong></p><h4 id="3、有状态的流处理"><a href="#3、有状态的流处理" class="headerlink" title="3、有状态的流处理"></a>3、有状态的流处理</h4><p>不难想到，如果我们对于事件流的处理非常简单，例如收到一条请求就返回一个“收到”，那就可以省去数据库的查询和更新了。但是这样的处理是没什么实际意义的。在现实的应用中，往往需要还其他一些额外数据。我们可以把需要的额外数据保存成一个“状态”，然后针对这条数据进行处理，并且更新状态。在传统架构中，这个状态就是保存在数据库里的。这就是所谓的“有状态的流处理”。 </p><p>为了加快访问速度，我们可以直接将状态保存在本地内存，如图所示。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182141239.png"></p><p>当应用收到一个新事件时，它可以从状态中读取数据，也可以更新状态。而当状态是从内存中读写的时候，这就和访问本地变量没什么区别了，实时性可以得到极大的提升。 另外，数据规模增大时，我们也不需要做重构，只需要构建分布式集群，各自在本地计算就可以了，可扩展性也变得更好。</p><p>因为采用的是一个分布式系统，所以还需要保护本地状态，防止在故障时数据丢失。我们可以定期地将应用状态的一致性检查点（checkpoint）存盘，写入远程的持久化存储，遇到故障时再去读取进行恢复，这样就保证了更好的容错性。 </p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="4、有状态流架构"><a href="#4、有状态流架构" class="headerlink" title="4、有状态流架构"></a>4、有状态流架构</h4><h5 id="1、事件驱动型（Event-Driven）应用"><a href="#1、事件驱动型（Event-Driven）应用" class="headerlink" title="1、事件驱动型（Event-Driven）应用"></a>1、事件驱动型（Event-Driven）应用</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182143210.png"></p><ul><li>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的 </li></ul><p>事件触发计算、状态更新或其他外部动作。比较典型的就是以 Kafka 为代表的消息队列几乎都 </p><p>是事件驱动型应用。 </p><ul><li>这其实跟传统事务处理本质上是一样的，区别在于基于有状态流处理的事件驱动应用，不 </li></ul><p>再需要查询远程数据库，而是在本地访问它们的数据，如图上所示，这样在吞吐量和延迟方 </p><p>面就可以有更好的性能。 </p><ul><li>另外远程持久性存储的检查点保证了应用可以从故障中恢复。检查点可以异步和增量地完 </li></ul><p>成，因此对正常计算的影响非常小</p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="2、数据分析（Data-Analysis）型应用"><a href="#2、数据分析（Data-Analysis）型应用" class="headerlink" title="2、数据分析（Data Analysis）型应用"></a>2、数据分析（Data Analysis）型应用</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182152243.png"></p><ul><li>所谓的数据分析，就是从原始数据中提取信息和发掘规律。传统上，数据分析一般是先将 </li></ul><p>数据复制到数据仓库（Data Warehouse），然后进行批量查询。如果数据有了更新，必须将最 </p><p>新数据添加到要分析的数据集中，然后重新运行查询或应用程序。 </p><ul><li>如今，Apache Hadoop 生态系统的组件，已经是许多企业大数据架构中不可或缺的组成部 </li></ul><p>分。现在的做法一般是将大量数据（如日志文件）写入 Hadoop 的分布式文件系统（HDFS）、 </p><p>S3 或 HBase 等批量存储数据库，以较低的成本进行大容量存储。然后可以通过 SQL-on-Hadoop </p><p>类的引擎查询和处理数据，比如大家熟悉的 Hive。这种处理方式，是典型的批处理，特点是 </p><p>可以处理海量数据，但实时性较差，所以也叫离线分析。 </p><ul><li>如果我们有了一个复杂的流处理引擎，数据分析其实也可以实时执行。流式查询或应用程 </li></ul><p>序不是读取有限的数据集，而是接收实时事件流，不断生成和更新结果。结果要么写入外部数 </p><p>据库，要么作为内部状态进行维护。 </p><ul><li><p>Apache Flink 同时支持流式与批处理的数据分析应用</p></li><li><p>与批处理分析相比，流处理分析最大的优势就是低延迟，真正实现了实时。另外，流处理 </p></li></ul><p>不需要去单独考虑新数据的导入和处理，实时更新本来就是流处理的基本模式。当前企业对流 </p><p>式数据处理的一个热点应用就是实时数仓，很多公司正是基于 Flink 来实现的。 </p><h5 id="3、数据管道（Data-Pipeline）型应用"><a href="#3、数据管道（Data-Pipeline）型应用" class="headerlink" title="3、数据管道（Data Pipeline）型应用"></a>3、数据管道（Data Pipeline）型应用</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182155443.png"></p><ul><li><p>如图，ETL 与数据管道之间的区别</p></li><li><p>ETL 也就是数据的提取、转换、加载，是在存储系统之间转换和移动数据的常用方法。 </p></li></ul><p>在数据分析的应用中，通常会定期触发 ETL 任务，将数据从事务数据库系统复制到分析数据 </p><p>库或数据仓库。 </p><ul><li>所谓数据管道的作用与 ETL 类似。它们可以转换和扩展数据，也可以在存储系统之间移 </li></ul><p>动数据。不过如果我们用流处理架构来搭建数据管道，这些工作就可以连续运行，而不需要再 </p><p>去周期性触发了。比如，数据管道可以用来监控文件系统目录中的新文件，将数据写入事件日</p><p>志。连续数据管道的明显优势是减少了将数据移动到目的地的延迟，而且更加通用，可以用于 </p><p>更多的场景。</p><h5 id="4、Lambda-架构"><a href="#4、Lambda-架构" class="headerlink" title="4、Lambda 架构"></a>4、Lambda 架构</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182156240.png"></p><ul><li>对于有状态的流处理，当数据越来越多时，我们必须用分布式的集群架构来获取更大的吞 </li></ul><p>吐量。但是分布式架构会带来另一个问题：怎样保证数据处理的顺序是正确的呢？ </p><ul><li>对于批处理来说，这并不是一个问题。因为所有数据都已收集完毕，我们可以根据需要选 </li></ul><p>择、排列数据，得到想要的结果。可如果我们采用“来一个处理一个”的流处理，就可能出现 </p><p>“乱序”的现象：本来先发生的事件，因为分布处理的原因滞后了。怎么解决这个问题呢？ </p><ul><li>以 Storm 为代表的第一代分布式开源流处理器，主要专注于具有毫秒延迟的事件处理，特 </li></ul><p>点就是一个字“快”；而对于准确性和结果的一致性，是不提供内置支持的，因为结果有可能 </p><p>取决于到达事件的时间和顺序。另外，第一代流处理器通过检查点来保证容错性，但是故障恢 </p><p>复的时候，即使事件不会丢失，也有可能被重复处理——所以无法保证 exactly-once。</p><ul><li>与批处理器相比，可以说第一代流处理器牺牲了结果的准确性，用来换取更低的延迟。而 </li></ul><p>批处理器恰好反过来，牺牲了实时性，换取了结果的准确</p><ul><li>我们自然想到，如果可以让二者做个结合，不就可以同时提供快速和准确的结果了吗？正 </li></ul><p>是基于这样的思想，Lambda 架构被设计出来，如上图。我们可以认为这是第二代流处 </p><p>理架构，但事实上，它只是第一代流处理器和批处理器的简单合并。 </p><h4 id="5、新一代流处理器"><a href="#5、新一代流处理器" class="headerlink" title="5、新一代流处理器"></a>5、新一代流处理器</h4><ul><li>之前的分布式流处理架构，都有明显的缺陷，人们也一直没有放弃对流处理器的改进和完 </li></ul><p>善。终于，在原有流处理器的基础上，新一代分布式开源流处理器诞生了。为了与之前的系统 </p><p>区分，我们一般称之为第三代流处理器，代表当然就是 Flink。 </p><ul><li>第三代流处理器通过巧妙的设计，完美解决了乱序数据对结果正确性的影响。这一代系统 </li></ul><p>还做到了精确一次（exactly-once）的一致性保障，是第一个具有一致性和准确结果的开源流 </p><p>处理器。另外，先前的流处理器仅能在高吞吐和低延迟中二选一，而新一代系统能够同时提供 </p><p>这两个特性。所以可以说，这一代流处理器仅凭一套系统就完成了 Lambda 架构两套系统的工 </p><p>作，它的出现使得 Lambda 架构黯然失色。 </p><ul><li>除了低延迟、容错和结果准确性之外，新一代流处理器还在不断添加新的功能，例如高可 </li></ul><p>用的设置，以及与资源管理器（如 YARN 或 Kubernetes）的紧密集成等等。 </p><h3 id="四、Flink-的特性总结"><a href="#四、Flink-的特性总结" class="headerlink" title="四、Flink 的特性总结"></a>四、Flink 的特性总结</h3><p><strong>Flink 是第三代分布式流处理器，它的功能丰富而强大。</strong></p><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5><h4 id="1、核心特性"><a href="#1、核心特性" class="headerlink" title="1、核心特性"></a>1、核心特性</h4><h5 id="-3"><a href="#-3" class="headerlink" title=""></a></h5><ul><li><p>高吞吐和低延迟。每秒处理数百万个事件，毫秒级延迟。</p></li><li><p>结果的准确性。Flink 提供了事件时间（event-time）和处理时间（processing-time） </p><p>语义。对于乱序事件流，事件时间语义仍然能提供一致且准确的结果。</p></li><li><p>精确一次（exactly-once）的状态一致性保证。</p></li><li><p>可以连接到最常用的存储系统，如 Apache Kafka、Apache Cassandra、Elasticsearch、 </p><p>JDBC、Kinesis 和（分布式）文件系统，如 HDFS 和 S3。</p></li><li><p>高可用。本身高可用的设置，加上与 K8s，YARN 和 Mesos 的紧密集成，再加上从故 </p><p>障中快速恢复和动态扩展任务的能力，Flink 能做到以极少的停机时间 7×24 全天候 </p><p>运行</p></li><li><p>能够更新应用程序代码并将作业（jobs）迁移到不同的 Flink 集群，而不会丢失应用 </p><p>程序的状态。 </p></li></ul><h4 id="2、分层-API"><a href="#2、分层-API" class="headerlink" title="2、分层 API"></a>2、分层 API</h4><p>除了上述这些特性之外，Flink 还是一个非常易于开发的框架，因为它拥有易于使用的分层 API，整体 API 分层如图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182203484.png"></p><p>最底层级的抽象仅仅提供了有状态流，它将处理函数（Process Function）嵌入到了 </p><p>DataStream API 中。底层处理函数（Process Function）与 DataStream API 相集成，可以对某 </p><p>些操作进行抽象，它允许用户可以使用自定义状态处理来自一个或多个数据流的事件，且状态 </p><p>具有一致性和容错保证。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以 </p><p>处理复杂的计算。 </p><p>实际上，大多数应用并不需要上述的底层抽象，而是直接针对核心 API（Core APIs） 进 </p><p>行编程，比如 DataStream API（用于处理有界或无界流数据）以及 DataSet API（用于处理有界 </p><p>数据集）。这些 API 为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换 </p><p>（transformations）、连接（joins）、聚合（aggregations）、窗口（windows）操作等。</p><h3 id="五、Flink-vs-Spark"><a href="#五、Flink-vs-Spark" class="headerlink" title="五、Flink vs Spark"></a>五、Flink vs Spark</h3><h4 id="1、数据处理架构"><a href="#1、数据处理架构" class="headerlink" title="1、数据处理架构"></a>1、数据处理架构</h4><p>我们已经知道，数据处理的基本方式，可以分为批处理和流处理两种。</p><p><font color="red">批处理</font>针对的是<font color="red">有界数据集</font>，非常适合需要访问海量的全部数据才能完成的计算工作，一 般用于离线统计。 </p><p><font color="red">流处理</font>主要针对的是数据流，特点是<font color="red">无界</font>、实时, 对系统传输的每个数据依次执行操作， 一般用于实时统计。 </p><p>从根本上说，Spark 和 Flink 采用了完全不同的数据处理方式。可以说，两者的世界观是 截然相反的。 </p><p>Spark 以批处理为根本，并尝试在批处理之上支持流计算；在 Spark 的世界观中，万物皆批次，离线数据是一个大批次，而实时数据则是由一个一个无限的小批次组成的。所以对于流处理框架 Spark Streaming 而言，其实并不是真正意义上的“流”处理，而是“微批次” （micro-batching）处理</p><h5 id="-4"><a href="#-4" class="headerlink" title=""></a></h5><h5 id="1-无界数据流"><a href="#1-无界数据流" class="headerlink" title="1.无界数据流"></a>1.无界数据流</h5><p>所谓无界数据流，就是有头没尾，数据的生成和传递会开始但永远不会结束，我们无法等待所有数据都到达，因为输入是无界的，永无止境，数据没有“都到达”的 时候。所以对于无界数据流，必须连续处理，也就是说必须在获取数据后立即处理。在处理无界流时，为了保证结果的正确性，我们必须能够做到按照顺序处理数据。 </p><h5 id="2-无界数据流"><a href="#2-无界数据流" class="headerlink" title="2.无界数据流"></a>2.无界数据流</h5><p>有界数据流有明确定义的开始和结束，所以我们可以通过获取所有数据来处理有界流。处理有界流就不需要严格保证数据的顺序了，因为总可以对有界数据集进行排序。有界流的处理也就是批处理。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182208414.png"></p><p>正因为这种架构上的不同，Spark 和 Flink 在不同的应用领域上表现会有差别。一般来说，Spark 基于微批处理的方式做同步总有一个“攒批”的过程，所以会有额外开销，因此无法在流处理的低延迟上做到极致。在低延迟流处理场景，Flink 已经有明显的优势。而在海量数据的批处理领域，Spark 能够处理的吞吐量更大，加上其完善的生态和成熟易用的 API，目前同样优势比较明显。 </p><h4 id="2、数据模型和运行架构"><a href="#2、数据模型和运行架构" class="headerlink" title="2、数据模型和运行架构"></a>2、数据模型和运行架构</h4><ul><li><p>除了三观不合，Spark 和 Flink 在底层实现最主要的差别就在于数据模型不同。</p></li><li><p>Spark 底层数据模型是弹性分布式数据集（RDD），Spark Streaming 进行微批处理的底层 </p></li></ul><p>接口 DStream，实际上处理的也是一组组小批数据 RDD 的集合。可以看出，Spark 在设计上本 </p><p>身就是以批量的数据集作为基准的，更加适合批处理的场景。 </p><ul><li>而 Flink 的基本数据模型是数据流（DataFlow），以及事件（Event）序列。Flink 基本上是 </li></ul><p>完全按照 Google 的 DataFlow 模型实现的，所以从底层数据模型上看，Flink 是以处理流式数 </p><p>据作为设计目标的，更加适合流处理的场景。 </p><ul><li>数据模型不同，对应在运行处理的流程上，自然也会有不同的架构。Spark 做批计算，需 </li></ul><p>要将任务对应的 DAG 划分阶段（Stage），一个完成后经过 shuffle 再进行下一阶段的计算。而 </p><p>Flink 是标准的流式执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理。 </p><h4 id="3、Spark-还是-Flink"><a href="#3、Spark-还是-Flink" class="headerlink" title="3、Spark 还是 Flink"></a>3、Spark 还是 Flink</h4><p>Spark 和 Flink 可以说目前是各擅胜场，批处理领域 Spark 称王，而在流处理方面 Flink 当仁不让。具体到项目应用中，不仅要看是流处理还是 </p><p>批处理，还需要在延迟、吞吐量、可靠性，以及开发容易度等多个方面进行权衡。</p><p>如果在工作中需要从 Spark 和 Flink 这两个主流框架中选择一个来进行实时流处理，我们更加推荐使用 Flink，主要的原因有： </p><ul><li>Flink 的延迟是毫秒级别，而 Spark Streaming 的延迟是秒级延迟。</li><li>Flink 提供了严格的精确一次性语义保证。</li><li>Flink 的窗口 API 更加灵活、语义更丰富。</li><li>Flink 提供事件时间语义，可以正确处理延迟数据。</li><li>Flink 提供了更加灵活的对状态编程的 API。</li></ul><h2 id="Ⅱ、Flink-部署"><a href="#Ⅱ、Flink-部署" class="headerlink" title="Ⅱ、Flink 部署"></a>Ⅱ、Flink 部署</h2><h3 id="一、Flink-快速上手"><a href="#一、Flink-快速上手" class="headerlink" title="一、Flink 快速上手"></a>一、Flink 快速上手</h3><h4 id="1、创建项目-1-8"><a href="#1、创建项目-1-8" class="headerlink" title="1、创建项目(1.8)"></a>1、创建项目(1.8)</h4><h5 id="1、maven"><a href="#1、maven" class="headerlink" title="1、maven"></a>1、maven</h5><p>在项目的 pom 文件中，增加<properties>标签设置属性，然后增加<denpendencies>标签引入需要的依赖。我们需要添加的依赖最重要的就是 Flink 的相关组件，包括 flink-java、 flink-streaming-java，以及 flink-clients（客户端，也可以省略）。另外，为了方便查看运行日志， 我们引入 slf4j 和 log4j 进行日志理。 </denpendencies></properties></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flink.version</span><span class="token punctuation">&gt;</span></span>1.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flink.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.binary.version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.binary.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入 Flink 相关依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-streaming-java_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-clients_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入日志管理相关依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-to-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.14.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在属性中，我们定义了&lt;scala.binary.version&gt;，这指代的是所依赖的 Scala 版本。这有一点奇怪：Flink 底层是 Java，而且我们也只用 Java API，为什么还会依赖 Scala 呢？这是因为 Flink的架构中使用了 Akka 来实现底层的分布式通信，而 Akka 是用 Scala 开发的</p><h5 id="2、配置日志管理"><a href="#2、配置日志管理" class="headerlink" title="2、配置日志管理"></a>2、配置日志管理</h5><p>在目录 src/main/resources 下添加文件:log4j.properties，内容配置如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">error, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%-4r [%t] %-5p %c %x - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、编写代码"><a href="#2、编写代码" class="headerlink" title="2、编写代码"></a>2、编写代码</h4><p>搭好项目框架，接下来就是我们的核心工作——往里面填充代码。我们会用一个最简单的示例来说明 Flink 代码怎样编写：<code>统计一段文字中，每个单词出现的频次</code>。这就是传说中的 WordCount 程序——它是大数据领域非常经典的入门案例，地位等同于初学编程语言时的Hello World。</p><h5 id="1、批处理"><a href="#1、批处理" class="headerlink" title="1、批处理"></a>1、批处理</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205182231937.png"></p><p>1、根目录下创建一个 txt文件，内容如下</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">hello worldhello flinkhello java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、思路</p><p>先逐行读入文件数据，然后将每一行文字拆分成单词；接着按照单词分组，统计每组数据的个数，就是对应单词的频次。</p><p>3、Java 类 BatchWordCount</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>wc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span></span><span class="token class-name">Types</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">ExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>operators<span class="token punctuation">.</span></span><span class="token class-name">AggregateOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>operators<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>operators<span class="token punctuation">.</span></span><span class="token class-name">FlatMapOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>operators<span class="token punctuation">.</span></span><span class="token class-name">UnsortedGrouping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchWordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 创建执行环境</span>        <span class="token class-name">ExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">ExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 从文件读取数据 按行读取(存储的元素就是每行的文本)</span>        <span class="token class-name">DataSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listDateSource <span class="token operator">=</span> env<span class="token punctuation">.</span>readTextFile <span class="token punctuation">(</span><span class="token string">"input/words.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 将每行数据进行分词，转换成二元组类型</span>        <span class="token comment">// Collector: flink 定义的收集器</span>        <span class="token comment">// Tuple: 二元组类型 &lt;String,Long&gt;,K 就是具体的单词，V 就是个数</span>        <span class="token class-name">FlatMapOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordAndOneTuple <span class="token operator">=</span> listDateSource<span class="token punctuation">.</span>flatMap <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 每行根据空格分隔出，单词</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span>split <span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// out.collect  就是输出的意思</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Tuple2.of 构建二元组实例</span>                out<span class="token punctuation">.</span>collect <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment">// returns 解决 scala 泛型擦除问题</span>                <span class="token punctuation">.</span>returns <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>TUPLE <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据转换得到的运算子  wordAndOneTuple</span>        <span class="token comment">// 4. 按照 word 进行分组, 0 表示第 1 个字段索引，就是上面泛型&lt;k,v&gt; 中的 k 为 word 字段</span>        <span class="token class-name">UnsortedGrouping</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordAndOneGroup <span class="token operator">=</span> wordAndOneTuple<span class="token punctuation">.</span>groupBy <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. 分组进行聚合(求和)统计，1 表示第 2 个字段索引，就是上面泛型&lt;k,v&gt; 中的 v 为 1L 数值的字段</span>        <span class="token class-name">AggregateOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sum <span class="token operator">=</span> wordAndOneGroup<span class="token punctuation">.</span>sum <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6. 打印</span>        sum<span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、流处理（有界）"><a href="#2、流处理（有界）" class="headerlink" title="2、流处理（有界）"></a>2、流处理（有界）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>wc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span></span><span class="token class-name">Types</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">KeyedStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    流处理有界流 * @Author:         阿K * @CreateDate:     2022/5/19 21:14 * @Param: * @Return:**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundedStreamWordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">// 1. 创建流式执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 从文件读取数据 按行读取(存储的元素就是每行的文本)</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listDateSource <span class="token operator">=</span> env<span class="token punctuation">.</span>readTextFile <span class="token punctuation">(</span><span class="token string">"input/words.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 将每行数据进行分词，转换成二元组类型</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordAndOne <span class="token operator">=</span> listDateSource<span class="token punctuation">.</span>flatMap <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span>split <span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span>collect <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>returns <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>TUPLE <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 分组(keyBy 按照 key 分组</span>        <span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordAndOneKS <span class="token operator">=</span> wordAndOne<span class="token punctuation">.</span>keyBy <span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> data<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. 求和</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> wordAndOneKS<span class="token punctuation">.</span>sum <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6. 打印</span>        result<span class="token punctuation">.</span>print <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 7. 执行</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、流处理（无界）"><a href="#3、流处理（无界）" class="headerlink" title="3、流处理（无界）"></a>3、流处理（无界）</h5><p>利用 nc 模拟实时推送，可以参考底下 【5】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>wc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>typeinfo<span class="token punctuation">.</span></span><span class="token class-name">Types</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">KeyedStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    流式计算（nc 测试无界流） * @Author:         阿K * @CreateDate:     2022/5/19 22:43 * @Param: * @Return:**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamWordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">// 1. 创建流式执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 读取文本流(远程机)</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lineDataStream <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream <span class="token punctuation">(</span><span class="token string">"101.34.180.133"</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 将每行数据进行分词，转换成二元组类型</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordAndOne <span class="token operator">=</span> lineDataStream<span class="token punctuation">.</span>flatMap <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span>split <span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span>collect <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>returns <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>TUPLE <span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 分组(keyBy 按照 key 分组</span>        <span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordAndOneKS <span class="token operator">=</span> wordAndOne<span class="token punctuation">.</span>keyBy <span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> data<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. 求和</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> wordAndOneKS<span class="token punctuation">.</span>sum <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6. 打印</span>        result<span class="token punctuation">.</span>print <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 7. 执行</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试上面可以用 nc 测试（实时模拟数据发送）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205212248685.png"></p><h3 id="二、作业部署"><a href="#二、作业部署" class="headerlink" title="二、作业部署"></a>二、作业部署</h3><h4 id="1、搭建Flink"><a href="#1、搭建Flink" class="headerlink" title="1、搭建Flink"></a>1、搭建Flink</h4><p>Flink 是一个分布式的流处理框架，所以实际应用一般都需要搭建集群环境。作者初学就搭建单机好了</p><p><strong>有条件就用 docker 快速占用小，可以参考下面第六</strong></p><h5 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1.官网下载"></a>1.官网下载</h5><p>flink-1.13.0-bin-scala_2.12.tgz</p><h5 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/module/<span class="token function">tar</span> -zxvf flink-1.13.0-bin-scala_2.12.tgz -C /opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> flink-1.13.0/<span class="token comment"># 启动</span>bin/start-cluster.sh<span class="token comment"># 停止</span>bin/stop-cluster.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、打包"><a href="#2、打包" class="headerlink" title="2、打包"></a>2、打包</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>FlinkTutorial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flink.version</span><span class="token punctuation">&gt;</span></span>1.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flink.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.binary.version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.binary.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 引入Flink相关依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-streaming-java_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-clients_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-connector-kafka_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.bahir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-connector-redis_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-connector-elasticsearch6_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-connector-jdbc_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-statebackend-rocksdb_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-table-api-java-bridge_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-table-planner-blink_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-streaming-scala_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-csv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-cep_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 引入日志管理相关依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-to-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.14.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会生成两个 jar ，一个有 flink依赖的比较大，一个没有依赖的比较小</p><h4 id="3、提交作业"><a href="#3、提交作业" class="headerlink" title="3、提交作业"></a>3、提交作业</h4><p>1、选择一个 jar  小的那个没有依赖的</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205212240022.png"></p><p>2、上传，登录UI面板：<a href="http://101.34.180.133:8081/">http://101.34.180.133:8081/</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205212242404.png"></p><p>3、配置启动类</p><p>一个节点选择 1，两个节点选择 2</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205220012706.png"></p><p>4、启动 nc 模拟</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205212248685.png"></p><p>5、任务提交成功之后，可点击左侧导航栏的“Running Jobs”查看程序运行列表情况</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205220014860.png"></p><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h2 id="Ⅲ、DataStream-API"><a href="#Ⅲ、DataStream-API" class="headerlink" title="Ⅲ、DataStream API"></a>Ⅲ、DataStream API</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>DataStream（数据流）本身是 Flink 中一个用来表示数据集合的类，这套核心 API 可以做<code>流处理</code>以及<code>批处理</code>,这套API 主要做的是数据的转换</p><p>一个 Flink 程序，其实就是对 DataStream 的各种转换。具体来说，代码基本上都由以下几部分构成</p><ul><li>获取执行环境</li><li>读取数据源</li><li>定义基于数据的转换操作</li><li>定义计算结果的输出位置</li><li>触发程序执行</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205232214873.png"></p><h3 id="二、执行环境"><a href="#二、执行环境" class="headerlink" title="二、执行环境"></a>二、执行环境</h3><p>运行环境：本地 JVM 中执行程序，也可以提交到远程集群上运行。</p><h4 id="1、创建执行环境"><a href="#1、创建执行环境" class="headerlink" title="1、创建执行环境"></a>1、创建执行环境</h4><p>我 们 要 获 取 的 执 行 环 境 ， 是 StreamExecutionEnvironment 类的对象，这是所有 Flink 程序的基础。</p><p>创建执行环境的方式，就是调用这个类的静态方法，具体有以下三种：</p><ul><li><p><strong>getExecutionEnvironment</strong></p><ul><li><pre><code class="java">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment ( );<pre class="line-numbers language-none"><code class="language-none">  - 智能判断：如果当前程序是独立运行，则返回一个本地环境；如果是集群环境，则返回集群环境- **createLocalEnvironment**  - ```java            StreamExecutionEnvironment localEnv = StreamExecutionEnvironment.createLocalEnvironment ( );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>这个方法返回一个本地执行环境。可以在调用时传入一个参数，指定默认的并行度；如果不传入，则默认并行度就是本地的 CPU 核心数。</p></li></ul></li><li><p><strong>createRemoteEnvironment</strong></p><ul><li><pre><code class="java">      StreamExecutionEnvironment remoteEnv = StreamExecutionEnvironment                .createRemoteEnvironment (                        "host", // JobManager 主机名                        1234, // JobManager 进程端口号                        "path/to/jarFile.jar" // 提交给 JobManager 的 JAR 包                );<pre class="line-numbers language-none"><code class="language-none">  - 在获取到程序执行环境后，还可以对执行环境进行灵活的设置。比如可以全局设置程序的并行度、禁用算子链，还可以定义程序的时间语义、配置容错机制。关于时间语义和容错机制#### 2、执行模式```java        // 批处理环境        ExecutionEnvironment batchEnv = ExecutionEnvironment.getExecutionEnvironment ( );        // 流处理环境        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment ( );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><h4 id="3、触发程序执行"><a href="#3、触发程序执行" class="headerlink" title="3、触发程序执行"></a>3、触发程序执行</h4><p>1、当 main()方法被调用时，其实只是定义了作业的每个执行操作，然后添加到数据流图中；这时并没有真正处理数据【因为数据可能还没来】</p><p>2、只有等到数据到来，才会触发真正的计算，这也被称为“延迟执行”或“懒执行”</p><p>3、所以我们需要显式地调用执行环境的 execute()方法，来触发程序执行。execute()方法将一直等待作业完成，然后返回一个执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、源算子"><a href="#三、源算子" class="headerlink" title="三、源算子"></a>三、源算子</h3><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><p>为了更好地理解，我们先构建一个实际应用场景。比如网站的访问操作，可以抽象成一个三元组（用户名，用户访问的 urrl，用户访问 url 的时间戳），所以在这里，我们可以创建一个类 Event，将用户行为包装成它的一个对象。Event 包含了以下一些字段</p><table><thead><tr><th align="center">字段名</th><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">user</td><td align="center">String</td><td align="center">用户名</td></tr><tr><td align="center">url</td><td align="center">String</td><td align="center">用户访问的url</td></tr><tr><td align="center">timeStamp</td><td align="center">Long</td><td align="center">用户访问url的时间戳</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">这里需要注意，我们定义的 Event，有这样几个特点：</font></p><ul><li>类是公有（public）的</li><li>有一个无参的构造方法</li><li>所有属性都是公有（public）的</li><li>所有属性的类型都是可以序列化的</li></ul><p>Flink 会把这样的类作为一种特殊的 POJO 数据类型来对待，方便数据的解析和序列化。</p><h4 id="2、常规读数据"><a href="#2、常规读数据" class="headerlink" title="2、常规读数据"></a>2、常规读数据</h4><p>集合读数据-文件读数据-Socket 读数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    集合中读取数据 * @Author:         阿K * @CreateDate:     2022/5/24 22:04 * @Param: * @Return: **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置并行度为 1 ，保证有序运行</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.从文件中读取数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> env<span class="token punctuation">.</span>readTextFile <span class="token punctuation">(</span><span class="token string">"input/clicks.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.从集合中读取数据</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">.</span>add <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">.</span>add <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numStream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromCollection <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        events<span class="token punctuation">.</span>add <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        events<span class="token punctuation">.</span>add <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream2 <span class="token operator">=</span> env<span class="token punctuation">.</span>fromCollection <span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.从元素读取数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream3 <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从Socket文本流读取</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream4 <span class="token operator">=</span> env<span class="token punctuation">.</span>socketTextStream <span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        stream1.print("1");</span><span class="token comment">//        numStream.print("nums");</span><span class="token comment">//        stream2.print("2");</span><span class="token comment">//        stream3.print("3");</span>        stream4<span class="token punctuation">.</span>print <span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、Kafka-读数据-★"><a href="#3、Kafka-读数据-★" class="headerlink" title="3、Kafka 读数据 ★"></a>3、Kafka 读数据 ★</h4><p>Flink 官方提供的是一个通用的 Kafka 连接器，它会自动跟踪最新版本的 Kafka 客户端</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flink-connector-kafka_${scala.binary.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${flink.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后调用 env.addSource()，传入 FlinkKafkaConsumer 的对象实例就可以了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">SimpleStringSchema</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>connectors<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span></span><span class="token class-name">FlinkKafkaConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceKafkaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span>setProperty <span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"106.12.159.22:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        properties.setProperty("group.id", "consumer-group");</span><span class="token comment">//        properties.setProperty("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><span class="token comment">//        properties.setProperty("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");</span><span class="token comment">//        properties.setProperty("auto.offset.reset", "latest");</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>addSource <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>                <span class="token string">"sun"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>                properties        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建 FlinkKafkaConsumer 时需要传入三个参数：</strong> </p><p>⚫ 第一个参数 topic，定义了从哪些主题中读取数据。可以是一个 topic，也可以是 topic列表，还可以是匹配所有想要读取的 topic 的正则表达式。当从多个 topic 中读取数据时，Kafka 连接器将会处理所有 topic 的分区，将这些分区的数据放到一条流中去。 </p><p>⚫ 第二个参数是一个 DeserializationSchema 或者 KeyedDeserializationSchema。Kafka 消息被存储为原始的字节数据，所以需要反序列化成 Java 或者 Scala 对象。上面代码中使用的 SimpleStringSchema，是一个内置的 DeserializationSchema，它只是将字节数组简单地反序列化成字符串。DeserializationSchema 和 KeyedDeserializationSchema 是公共接口，所以我们也可以自定义反序列化逻辑。 </p><p>⚫ 第三个参数是一个 Properties 对象，设置了 Kafka 客户端的一些属性。 </p><p><strong>结果：</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202205302348183.png"></p><h4 id="4、自定义-Source"><a href="#4、自定义-Source" class="headerlink" title="4、自定义 Source"></a>4、自定义 Source</h4><p>想要读取的数据源来自某个外部系统，而 flink 既没有预实现的方法、也没有提供连接器，</p><p>我们创建一个自定义的数据源，实现 SourceFunction 接口</p><p>⚫ run()方法：使用运行时上下文对象（SourceContext）向下游发送数据； </p><p>⚫ cancel()方法：通过标识位控制退出循环，来达到中断数据源的效果。     </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span></span><span class="token class-name">SourceFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClickSource</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 声明一个布尔变量，作为控制数据生成的标识位</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 在指定的数据集中随机选取数据</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Cary"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token string">"./fav"</span><span class="token punctuation">,</span> <span class="token string">"./prod?id=1"</span><span class="token punctuation">,</span> <span class="token string">"./prod?id=2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>collect <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span>                    users<span class="token punctuation">[</span>random<span class="token punctuation">.</span>nextInt <span class="token punctuation">(</span>users<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    urls<span class="token punctuation">[</span>random<span class="token punctuation">.</span>nextInt <span class="token punctuation">(</span>urls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token class-name">Calendar</span><span class="token punctuation">.</span>getInstance <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>getTimeInMillis <span class="token punctuation">(</span> <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 隔 1 秒生成一个点击事件，方便观测</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个数据源，我们后面会频繁使用，所以在后面的代码中涉及到 ClickSource()数据源，使用上面的代码就可以了。</p><p>下面的代码我们来读取一下自定义的数据源。有了自定义的 source function，接下来只要调用 addSource()就可以了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 有了自定义的 source function，调用 addSource 方法</span>    <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClickSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"SourceCustom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以如果我们想要自定义并行的数据源的话，需要使用 ParallelSourceFunction</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token punctuation">.</span>addSource <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomSource</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomSource</span> <span class="token keyword">implements</span> <span class="token class-name">ParallelSourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sourceContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sourceContext<span class="token punctuation">.</span>collect <span class="token punctuation">(</span>random<span class="token punctuation">.</span>nextInt <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、Flink-支持的数据类型"><a href="#5、Flink-支持的数据类型" class="headerlink" title="5、Flink 支持的数据类型"></a>5、Flink 支持的数据类型</h4><h5 id="1-Flink-的类型系统"><a href="#1-Flink-的类型系统" class="headerlink" title="1. Flink 的类型系统"></a>1. <strong>Flink</strong> <strong>的类型系统</strong></h5><p>Flink 有自己一整套类型系统。Flink 使用“类型信息” （TypeInformation）来统一表示数据类型。TypeInformation 类是 Flink 中所有类型描述符的基类。 </p><p>它涵盖了类型的一些基本属性，并为每个数据类型生成特定的序列化器、反序列化器和比较器。</p><h5 id="2-Flink-支持的数据类型"><a href="#2-Flink-支持的数据类型" class="headerlink" title="2. Flink 支持的数据类型"></a>2. <strong>Flink</strong> <strong>支持的数据类型</strong></h5><p>（1）基本类型 </p><p>所有 Java 基本类型及其包装类，再加上 Void、String、Date、BigDecimal 和 BigInteger。</p><p>（2）数组类型 </p><p>包括基本类型数组（PRIMITIVE_ARRAY）和对象数组(OBJECT_ARRAY)</p><p>（3）复合数据类型 </p><p>⚫ Java 元组类型（TUPLE）：这是 Flink 内置的元组类型，是 Java API 的一部分。最多 25 个字段，也就是从 Tuple0~Tuple25，不支持空字段 </p><p>⚫ Scala 样例类及 Scala 元组：不支持空字段 </p><p>⚫ 行类型（ROW）：可以认为是具有任意个字段的元组,并支持空字段 </p><p>⚫ POJO：Flink 自定义的类似于 Java bean 模式的类 </p><p>（4）辅助类型 </p><p>Option、Either、List、Map 等 </p><p>（5）泛型类型（GENERIC） </p><p>Flink 支持所有的 Java 类和 Scala 类。不过如果没有按照上面 POJO 类型的要求来定义，就会被 Flink 当作泛型类来处理。Flink 会把泛型类型当作黑盒，无法获取它们内部的属性；它们也不是由 Flink 本身序列化的，而是由 Kryo 序列化的。在这些类型中，元组类型和 POJO 类型最为灵活，因为它们支持创建复杂类型。而相比之下，POJO 还支持在键（key）的定义中直接使用字段名，这会让我们的代码可读性大大增加。所以，在项目实践中，往往会将流处理程序中的元素类型定为 Flink 的 POJO 类型。 </p><p>Flink 对 POJO 类型的要求如下： </p><p>⚫ 类是公共的（public）和独立的（standalone，也就是说没有非静态的内部类）； </p><p>⚫ 类有一个公共的无参构造方法； </p><p>⚫ 类中的所有字段是 public 且非 final 的；或者有一个公共的 getter 和 setter 方法，这些方法需要符合 Java bean 的命名规范。 </p><p>所以我们看到，之前的 UserBehavior，就是我们创建的符合 Flink POJO 定义的数据类型。</p><h5 id="3-类型提示（Type-Hints）"><a href="#3-类型提示（Type-Hints）" class="headerlink" title="3. 类型提示（Type Hints）"></a>3. 类型提示（Type Hints）</h5><p>由于 Java 中泛型擦除的存在，在某些特殊情况下（比如 Lambda 表达式中），为了解决这类问题，Java API 提供了专门的“类型提示”（type hints）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>word <span class="token operator">-&gt;</span> <span class="token class-name">Tuple2</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeHint</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">SomeType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、转换算子"><a href="#四、转换算子" class="headerlink" title="四、转换算子"></a>四、转换算子</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206012345924.png"></p><h4 id="1、基本转换算子"><a href="#1、基本转换算子" class="headerlink" title="1、基本转换算子"></a>1、基本转换算子</h4><h5 id="1-映射（map）"><a href="#1-映射（map）" class="headerlink" title="1. 映射（map）"></a><strong>1. 映射</strong>（map）</h5><p>主要用于将数据流中的数据进行转换，形成新的数据流。简单来说，消费一个元素就产出一个元素</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206012359042.png"></p><p>我们只需要基于 DataStrema 调用 map()方法就可以进行转换处理。方法需要传入的参数是接口 MapFunction 的实现；返回值类型还是 DataStream</p><p>eg：提取 Event 中的 user 字段的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransMapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创造执行环境</span>        <span class="token comment">// 并行为 1</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写法一：传入匿名类，实现 MapFunction</span>        stream<span class="token punctuation">.</span>map <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写法二： 传入 MapFunction 的实现类</span>        <span class="token comment">//stream.map (new UserExtractor ()).print ();</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserExtractor</span> <span class="token keyword">implements</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>user<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，MapFunction 实现类的泛型类型，与输入数据类型和输出数据的类型有关。在实现 MapFunction 接口的时候，需要指定两个泛型，分别是输入事件和输出事件的类型，还需要重写一个 map()方法，定义从一个输入事件转换为另一个输出事件的具体逻辑。 </p><h5 id="2-过滤（filter）"><a href="#2-过滤（filter）" class="headerlink" title="2. 过滤（filter）"></a><strong>2. 过滤（filter）</strong></h5><p>filter 转换操作，顾名思义是对数据流执行一个过滤，通过一个布尔条件表达式设置过滤条件，对于每一个流内元素进行判断，若为 true 则元素正常输出，若为 false 则元素被过滤掉</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206072208877.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">FilterFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransFilterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创造执行环境</span>        <span class="token comment">// 并行为 1</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写法一：传入匿名类实现 FilterFunction</span>        stream<span class="token punctuation">.</span>filter <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>user<span class="token punctuation">.</span>equals <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写法二：传入 FilterFunction 实现类</span>        stream<span class="token punctuation">.</span>filter <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserFilter</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FilterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>user<span class="token punctuation">.</span>equals <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行 filter 转换之后的新数据流的数据类型与原数据流是相同的。filter 转换需要传入的参数需要实现 FilterFunction 接口，而 FilterFunction 内要实现 filter()方法，就相当于一个返回布尔类型的条件表达式。 </p><h5 id="3、扁平映射（flatMap）"><a href="#3、扁平映射（flatMap）" class="headerlink" title="3、扁平映射（flatMap）"></a><strong>3、扁平映射（flatMap）</strong></h5><p>flatMap 操作又称为扁平映射，主要是将数据流中的整体（一般是集合类型）拆分成一个一个的个体使用。消费一个元素，可以产生 0 到多个元素,也就是先按照某种规则对数据进行打散拆分，再对拆分后的元素做转换处理</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206072215902.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">FlatMapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransFlatmapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创造执行环境</span>        <span class="token comment">// 并行为 1</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span>flatMap <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>user<span class="token punctuation">.</span>equals <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    collector<span class="token punctuation">.</span>collect <span class="token punctuation">(</span>e<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>user<span class="token punctuation">.</span>equals <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    collector<span class="token punctuation">.</span>collect <span class="token punctuation">(</span>e<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                    collector<span class="token punctuation">.</span>collect <span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// print () 打印</span>        <span class="token comment">// 执行</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flatMap 操作会应用在每一个输入事件上面，FlatMapFunction 接口中定义了 flatMap 方法， 用户可以重写这个方法，在这个方法中对输入数据进行处理，并决定是返回 0 个、1 个或多个结果数据。因此 flatMap 并没有直接定义返回值类型，而是通过一个“收集器”（Collector）来指定输出。希望输出结果时，只要调用收集器的.collect()方法就可以了；这个方法可以多次调用，也可以不调用。所以 flatMap 方法也可以实现 map 方法和 filter 方法的功能，当返回结果是 0 个的时候，就相当于对数据进行了过滤，当返回结果是 1 个的时候，相当于对数据进行了简单的转换操作。 </p><h4 id="2、聚合算子"><a href="#2、聚合算子" class="headerlink" title="2、聚合算子"></a>2、聚合算子</h4><h5 id="1-按键分区"><a href="#1-按键分区" class="headerlink" title="1. 按键分区"></a>1. 按键分区</h5><p>keyBy 是聚合前必须要用到的一个算子。keyBy 通过指定键（key），可以将一条流从逻辑上划分成不同的分区（partitions）。这里所说的分区，其实就是并行处理的子任务，也就对应着任务槽</p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206072326233.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSink</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransKeyByTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创造执行环境</span>        <span class="token comment">// 并行为 1</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"./home"</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Event</span> <span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"./cart"</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lambda</span>        <span class="token class-name">DataStreamSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> byKeyStream <span class="token operator">=</span> stream<span class="token punctuation">.</span>keyBy <span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>print <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-简单聚合"><a href="#2-简单聚合" class="headerlink" title="2. 简单聚合"></a>2. <strong>简单聚合</strong></h5><p>⚫ sum()：在输入流上，对指定的字段做叠加求和的操作。 </p><p>⚫ min()：在输入流上，对指定的字段求最小值。 </p><p>⚫ max()：在输入流上，对指定的字段求最大值。 </p><p>⚫ minBy()：与 min()类似，在输入流上针对指定字段求最小值。不同的是，min()只计算指定字段的最小值，其他字段会保留最初第一个数据的值；而 minBy()则会返回包 含字段最小值的整条数据。 </p><p>⚫ maxBy()：与 max()类似，在输入流上针对指定字段求最大值。两者区别与 min()/minBy()完全一致。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>model2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransTupleAggreationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创造执行环境</span>        <span class="token comment">// 并行为 1</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>getExecutionEnvironment <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span>setParallelism <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span>fromElements <span class="token punctuation">(</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Tuple2</span><span class="token punctuation">.</span>of <span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//     stream.keyBy(r -&gt; r.f0).sum(1).print("SUM:");</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).sum("f1").print();</span>        stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"MAX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).max("f1").print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).min(1).print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).min("f1").print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).maxBy(1).print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).maxBy("f1").print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).minBy(1).print();</span><span class="token comment">//        stream.keyBy(r -&gt; r.f0).minBy("f1").print();</span>        env<span class="token punctuation">.</span>execute <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206082139500.png"></p><p>而如果数据流的类型是 POJO 类，那么就只能通过字段名称来指定，不能通过位置来指定了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-归约聚合（reduce）"><a href="#3-归约聚合（reduce）" class="headerlink" title="3. 归约聚合（reduce）"></a>3. <strong>归约聚合（</strong>reduce<strong>）</strong></h5><h4 id="3、自定义函数"><a href="#3、自定义函数" class="headerlink" title="3、自定义函数"></a>3、自定义函数</h4><h4 id="4、物理分区"><a href="#4、物理分区" class="headerlink" title="4、物理分区"></a>4、物理分区</h4><h3 id="五、输出算子"><a href="#五、输出算子" class="headerlink" title="五、输出算子"></a>五、输出算子</h3><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><h4 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h4><h4 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h4><h4 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h4><h2 id="参考地址-↓"><a href="#参考地址-↓" class="headerlink" title="参考地址 ↓"></a>参考地址 ↓</h2><h3 id="1、docker-加速（博主简书）"><a href="#1、docker-加速（博主简书）" class="headerlink" title="1、docker 加速（博主简书）"></a>1、docker 加速（博主简书）</h3><p>url：<a href="https://www.jianshu.com/p/f554c85b25c1">https://www.jianshu.com/p/f554c85b25c1</a></p><h3 id="2、Hadoop-单机安装"><a href="#2、Hadoop-单机安装" class="headerlink" title="2、Hadoop 单机安装"></a>2、Hadoop 单机安装</h3><p>url：<a href="https://blog.51cto.com/u_15187242/4760802">https://blog.51cto.com/u_15187242/4760802</a></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>i <span class="token punctuation">-</span>t <span class="token punctuation">-</span><span class="token punctuation">-</span>network host <span class="token punctuation">-</span>p 50070<span class="token punctuation">:</span>50070 <span class="token punctuation">-</span>p 9000<span class="token punctuation">:</span>9000 <span class="token punctuation">-</span>p 8088<span class="token punctuation">:</span>8088 <span class="token punctuation">-</span>p 8040<span class="token punctuation">:</span>8040 <span class="token punctuation">-</span>p 8042<span class="token punctuation">:</span>8042 <span class="token punctuation">-</span>p 49707<span class="token punctuation">:</span>49707 <span class="token punctuation">-</span>p 50010<span class="token punctuation">:</span>50010 <span class="token punctuation">-</span>p 50075<span class="token punctuation">:</span>50075 <span class="token punctuation">-</span>p 50090<span class="token punctuation">:</span>50090 sequenceiq/hadoop<span class="token punctuation">-</span>docker<span class="token punctuation">:</span>2.7.0 /etc/bootstrap.sh <span class="token punctuation">-</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、Hadoop集群"><a href="#3、Hadoop集群" class="headerlink" title="3、Hadoop集群"></a>3、Hadoop集群</h3><p>url：<a href="https://dhcp.cn/k8s/docker/deploy_hadoop.html#reference">https://dhcp.cn/k8s/docker/deploy_hadoop.html#reference</a></p><h3 id="4、Hadoop常用端口"><a href="#4、Hadoop常用端口" class="headerlink" title="4、Hadoop常用端口"></a>4、Hadoop常用端口</h3><p>url：<a href="https://blog.csdn.net/qq_36816848/article/details/113106441">https://blog.csdn.net/qq_36816848/article/details/113106441</a></p><h3 id="5、nc-lk-模拟实时数据"><a href="#5、nc-lk-模拟实时数据" class="headerlink" title="5、nc -lk 模拟实时数据"></a>5、nc -lk 模拟实时数据</h3><p>url：<a href="https://www.csdn.net/tags/MtzakgwsODA4NjktYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/MtzakgwsODA4NjktYmxvZwO0O0OO0O0O.html</a></p><h3 id="6、Flink（docker）快速搭建"><a href="#6、Flink（docker）快速搭建" class="headerlink" title="6、Flink（docker）快速搭建"></a>6、Flink（docker）快速搭建</h3><p>url：<a href="https://blog.csdn.net/weixin_42357472/article/details/118223101">https://blog.csdn.net/weixin_42357472/article/details/118223101</a></p><h3 id="7、Zookeeper-docker-快速搭建"><a href="#7、Zookeeper-docker-快速搭建" class="headerlink" title="7、Zookeeper(docker)快速搭建"></a>7、Zookeeper(docker)快速搭建</h3><p>拉取url：<a href="https://blog.csdn.net/u010416101/article/details/122803105">https://blog.csdn.net/u010416101/article/details/122803105</a></p><p>启动url：<a href="https://www.cnblogs.com/shanfeng1000/p/14488665.html">https://www.cnblogs.com/shanfeng1000/p/14488665.html</a></p><h3 id="8、kafka-docker-快速搭建"><a href="#8、kafka-docker-快速搭建" class="headerlink" title="8、kafka(docker)快速搭建"></a>8、kafka(docker)快速搭建</h3><p>搭建url：<a href="https://www.cnblogs.com/shanfeng1000/p/14638455.html">https://www.cnblogs.com/shanfeng1000/p/14638455.html</a></p><p>使用url：<a href="https://blog.csdn.net/qq_22041375/article/details/106180415">https://blog.csdn.net/qq_22041375/article/details/106180415</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="大数据" scheme="https://mykkto.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Flink" scheme="https://mykkto.github.io/tags/Flink/"/>
    
    <category term="hadoop" scheme="https://mykkto.github.io/tags/hadoop/"/>
    
    <category term="kafka" scheme="https://mykkto.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>项目-金融背景及其后端搭建</title>
    <link href="https://mykkto.github.io/posts/a6407b24.html"/>
    <id>https://mykkto.github.io/posts/a6407b24.html</id>
    <published>2022-04-26T15:11:33.000Z</published>
    <updated>2023-02-26T14:08:44.233Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="〇、主目录总纲"><a href="#〇、主目录总纲" class="headerlink" title="〇、主目录总纲"></a>〇、<a href="/posts/73b5f9d8">主目录总纲</a></h2><h2 id="Ⅰ、项目概念"><a href="#Ⅰ、项目概念" class="headerlink" title="Ⅰ、项目概念"></a>Ⅰ、项目概念</h2><h3 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h3><h4 id="1、项目说明"><a href="#1、项目说明" class="headerlink" title="1、项目说明"></a>1、项目说明</h4><p>尚融宝是一个网络借贷信息中介服务平台，为个人投资者、个人融资用户和小微企业提供专业的线上信贷及出借撮合服务。</p><p>行业案例：人人贷 <a href="https://www.renrendai.com/">https://www.renrendai.com/</a>、拍拍贷 <a href="https://www.paipaidai.com/">https://www.paipaidai.com/</a></p><h4 id="2、项目架构图"><a href="#2、项目架构图" class="headerlink" title="2、项目架构图"></a>2、项目架构图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/0d2630acf4428d33859d89e8f78be575.png"></p><h4 id="3、业务流程图"><a href="#3、业务流程图" class="headerlink" title="3、业务流程图"></a>3、业务流程图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/27528777bac0634fd778ca60094057b4.png"></p><h3 id="二、开发环境和技术栈"><a href="#二、开发环境和技术栈" class="headerlink" title="二、开发环境和技术栈"></a>二、开发环境和技术栈</h3><h4 id="1、技术栈-后端"><a href="#1、技术栈-后端" class="headerlink" title="1、技术栈-后端"></a>1、技术栈-后端</h4><ul><li>SpringBoot 2.3.4.RELEASE</li><li>SpringCloud Hoxton.SR8：微服务基础设施 - 服务注册、服务发现、服务熔断、微服务网关、配置中心等</li><li>SpringCloud Alibaba 2.2.2.RELEASE</li><li>MyBatis Plus：持久层框架和代码生成器</li><li>Lombok：简化实体类开发</li><li>Swagger2：Api接口文档生成工具</li><li>Logback：日志系统</li><li>alibaba-easyexcel：Excel读写</li><li>Spring Data Redis：Spring项目中访问Redis缓存</li><li>HTTPClient: 基于Http协议的客户端，用来实现远程调用</li><li>Spring Task：定时任务</li></ul><h4 id="2、技术栈-前端"><a href="#2、技术栈-前端" class="headerlink" title="2、技术栈-前端"></a>2、技术栈-前端</h4><ul><li>Node.js： JavaScript 运行环境</li><li>ES6：JavaScript的模块化版本</li><li>axios：一个发送Ajax请求的工具</li><li>Vue.js：web 界面的渐进式框架</li><li>Element-UI：前端组件库</li><li>模块化开发：解决javascript变量全局空间污染的问题</li><li>NPM：模块资源管理器</li><li>vue-element-admin：基于Vue.js的后台管理系统UI集成方案</li><li>NuxtJS：基于Vue.js构建的服务器端渲染应用的轻量级框架</li></ul><h4 id="3、中间件"><a href="#3、中间件" class="headerlink" title="3、中间件"></a>3、中间件</h4><ul><li>MySQL 5.7：关系型数据库     </li><li>Redis 5.0：缓存技术     </li><li>RabbitMQ 3.8：消息中间件</li></ul><h4 id="4、第三方接口"><a href="#4、第三方接口" class="headerlink" title="4、第三方接口"></a>4、第三方接口</h4><ul><li>阿里云短信：短信网关</li><li>阿里云OSS：分布式文件存储</li><li>资金托管平台API对接：汇付宝</li></ul><h4 id="5、开发环境"><a href="#5、开发环境" class="headerlink" title="5、开发环境"></a>5、开发环境</h4><ul><li><p>jdk 1.8</p></li><li><p>maven 3.6</p></li><li><p>ideaIU-2020.2.3：</p></li><li><p>插件：lombok、MyBatisX</p></li></ul><h3 id="三、金融知识普及"><a href="#三、金融知识普及" class="headerlink" title="三、金融知识普及"></a>三、金融知识普及</h3><h4 id="1、信用贷款平台的类别"><a href="#1、信用贷款平台的类别" class="headerlink" title="1、信用贷款平台的类别"></a>1、信用贷款平台的类别</h4><h5 id="1、银行系"><a href="#1、银行系" class="headerlink" title="1、银行系"></a>1、银行系</h5><ul><li>优势：<ul><li>第一，资金雄厚，流动性充足；</li><li>第二，项目源质地优良，大多来自于银行原有中小型客户；</li><li>第三，风险控制能力强。如恒丰银行、招商银行等旗下都有信用贷款平台。</li></ul></li><li>劣势：收益率偏低，预期年化收益率处于5.5%-8.6%之间，略高于银行其他理财产品，对投资人吸引力有限。</li></ul><h5 id="2、国资系"><a href="#2、国资系" class="headerlink" title="2、国资系"></a>2、国资系</h5><ul><li>优势：<ul><li>拥有国有背景股东的隐性背书，兑付能力有保障，业务模式较为规范，从业人员金融专业素养较高。</li></ul></li><li>劣势：<ul><li>缺乏互联网基因；项目标的较大，起投门槛较高；且产品种类有限，多为企业信用贷；</li><li>较为谨慎，层层审核的机制严重影响了平台运营效率；收益率不具有吸引力。</li></ul></li></ul><h5 id="3、民营系"><a href="#3、民营系" class="headerlink" title="3、民营系"></a>3、民营系</h5><p>民营系平台数量最多，起步最早，但鱼龙混杂，不胜枚举。</p><ul><li>优势：<ul><li>普惠金融，手续便捷；门槛极低，投资起点低最低起投门槛甚至50元；</li><li>强大的互联网思维，产品创新能力高，市场化程度高；收益率高，投资收益率具有吸引力。</li></ul></li><li>劣势：<ul><li>风险偏高，资本实力及风控能力偏弱，跑路及倒闭的高发区。</li></ul></li></ul><h4 id="2、业务流程"><a href="#2、业务流程" class="headerlink" title="2、业务流程"></a>2、业务流程</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/20220427203134.png"></p><h5 id="1、投资人"><a href="#1、投资人" class="headerlink" title="1、投资人"></a>1、投资人</h5><p>希望在平台上找到合适的投资项目，获取利润回报的用户</p><h5 id="2、借款人"><a href="#2、借款人" class="headerlink" title="2、借款人"></a>2、借款人</h5><p>需要资金周转的用户</p><h5 id="3、资金池风险"><a href="#3、资金池风险" class="headerlink" title="3、资金池风险"></a>3、资金池风险</h5><ul><li><p>资金池：一个大池子放钱，一边存进来（入水管），一边贷出去（出水管）。不管是张三的钱、李四的钱、还是王五的钱，只要进到池子里，就都叫池子的钱了。银行就是典型的资金池。</p></li><li><p>资金池风险：</p></li><li><ul><li>第一种情况：投资入水管流量过大，池子里全是水。这种情况，平台亏钱，干不长。原因很简单，池子里的钱是有成本的，只进不出，没有利差，拿什么钱付投资人的利息，时间长了，就只能用投资人的本金还投资人的利息，借新还旧，庞氏骗局。<font color="red">这个过程就直接背离了平台信息中介的身份，而成了与银行类似的金融机构。</font></li><li>第二种情况：突然来了这么多钱，怎么办？只能把放贷出水管的流量调大。放贷的这条出水管上有两个阀门，一个叫找项目，一个叫做<font color="red">风控</font>。遇到这种情况，经常就是两个阀门一块儿放，钱是贷出去了，但由于放松了对风险的把控，能不能再流回来，就不好说了，危险。</li><li>第三种情况：提款的出水管流量变大。比如，一个黑天鹅事件，一个负面新闻，一个平台垮了，都可能诱发这种情况，这就是<font color="red">挤兑</font>。比如说某租宝事件后，不只这一家平台，很多其他平台的用户，也在疯狂的提现，有可能一直提到关门为止。</li><li>第四种情况最极端：平台把池子里的钱都提出来，走人。这个就不用解释了，就是 <font style="color: #FF0000;">跑路。</font></li><li> <font style="color: #FF0000;">以上四种情况就是资金池最主要的几个风险——经营不善，风险失控，挤兑和跑路。银监会发布的《网络借贷信息中介机构业务活动管理暂行办法》让资金存管成为网贷平台的硬性要求，同时降低了平台建立资金池、挪用用户资金的风险。</font></li></ul></li></ul><h5 id="4、资金托管平台"><a href="#4、资金托管平台" class="headerlink" title="4、资金托管平台"></a>4、资金托管平台</h5><ul><li>第三方存管模式：“第三方存管”的全称是“客户交易结算资金第三方存管”。这里的第三方存管机构，目前是指具备第三方存管资格的商业银行。银行的流入资金成本低，风控体系较完善，资金池子足够大，而且是国家背书，不会跑路。</li><li><font style="color: #FF0000;">说明：由于我们是教学使用，无法申请到正式的资金托管平台的支持，所以我们根据资金托管平台API接口文档，自行开发模拟一套API接口来满足业务需要，业务过程与实际开发基本一致。</font></li></ul><h2 id="Ⅱ、后端架构搭建"><a href="#Ⅱ、后端架构搭建" class="headerlink" title="Ⅱ、后端架构搭建"></a>Ⅱ、后端架构搭建</h2><h3 id="一、接口工程创建"><a href="#一、接口工程创建" class="headerlink" title="一、接口工程创建"></a>一、接口工程创建</h3><h4 id="1、创建父工程-BackEndCode"><a href="#1、创建父工程-BackEndCode" class="headerlink" title="1、创建父工程 BackEndCode"></a>1、创建父工程 BackEndCode</h4><h5 id="1、创建-maven-项目"><a href="#1、创建-maven-项目" class="headerlink" title="1、创建 maven 项目"></a>1、创建 maven 项目</h5><p><font color="red">Group：com.kk</font></p><p><font color="red">Artifact：BackEndCode</font></p><h5 id="2、删除src目录"><a href="#2、删除src目录" class="headerlink" title="2、删除src目录"></a>2、删除src目录</h5><h5 id="3、配置SpringBoot版本"><a href="#3、配置SpringBoot版本" class="headerlink" title="3、配置SpringBoot版本"></a>3、配置SpringBoot版本</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、配置pom依赖版本号"><a href="#4、配置pom依赖版本号" class="headerlink" title="4、配置pom依赖版本号"></a>4、<strong>配置pom依赖版本号</strong></h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus.version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>velocity.version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>velocity.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger.version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger-bootstrap-ui.version</span><span class="token punctuation">&gt;</span></span>1.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger-bootstrap-ui.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">&gt;</span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-fileupload.version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-fileupload.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-io.version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-io.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alibaba.easyexcel.version</span><span class="token punctuation">&gt;</span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alibaba.easyexcel.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>apache.xmlbeans.version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>apache.xmlbeans.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">&gt;</span></span>1.2.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gson.version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gson.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>json.version</span><span class="token punctuation">&gt;</span></span>20170516<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>json.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aliyun-java-sdk-core.version</span><span class="token punctuation">&gt;</span></span>4.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aliyun-java-sdk-core.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aliyun-sdk-oss.version</span><span class="token punctuation">&gt;</span></span>3.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aliyun-sdk-oss.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jodatime.version</span><span class="token punctuation">&gt;</span></span>2.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jodatime.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jwt.version</span><span class="token punctuation">&gt;</span></span>0.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jwt.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpclient.version</span><span class="token punctuation">&gt;</span></span>4.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpclient.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、配置pom依赖"><a href="#5、配置pom依赖" class="headerlink" title="5、配置pom依赖"></a>5、配置pom依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Spring Cloud--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Spring Cloud Alibaba--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis-plus--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis-plus.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis-plus 代码生成器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis-plus.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Mybatis Plus 代码生成器模板引擎,  --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${velocity.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger ui--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger-bootstrap-ui--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger-bootstrap-ui.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--commons-lang3--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${commons-lang3.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文件上传--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${commons-fileupload.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--commons-io--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${commons-io.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--excel解析--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${alibaba.easyexcel.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--excel解析依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.xmlbeans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xmlbeans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${apache.xmlbeans.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--json--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${fastjson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${json.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${gson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--阿里云SDK远程调用--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${aliyun-java-sdk-core.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--阿里云文件管理--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${aliyun-sdk-oss.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日期时间工具--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${jodatime.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--jwt工具--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${jwt.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--httpclient--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${httpclient.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、创建模块kk-common"><a href="#2、创建模块kk-common" class="headerlink" title="2、创建模块kk-common"></a>2、创建模块kk-common</h4><h5 id="1、创建Maven模块"><a href="#1、创建Maven模块" class="headerlink" title="1、创建Maven模块"></a>1、创建Maven模块</h5><p>在 <font color="red">父工程</font> 下创建普通maven模块</p><p><font color="red">Group：com.kk</font></p><p><font color="red">Artifact：kk-common</font></p><h5 id="2、配置pom"><a href="#2、配置pom" class="headerlink" title="2、配置pom"></a>2、配置pom</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、创建模块service-base"><a href="#3、创建模块service-base" class="headerlink" title="3、创建模块service-base"></a>3、创建模块service-base</h4><h5 id="1、创建Maven模块-1"><a href="#1、创建Maven模块-1" class="headerlink" title="1、创建Maven模块"></a>1、创建Maven模块</h5><p>在 <font color="red">父工程</font> 下创建普通maven模块</p><p><font color="red">Group：com.kk</font></p><p><font color="red">Artifact：service-base</font></p><h5 id="2、配置pom-1"><a href="#2、配置pom-1" class="headerlink" title="2、配置pom"></a>2、配置pom</h5><p><font color="red">注意：</font>依赖kk-common</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>service-base<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--swagger--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--swagger ui--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、创建模块service-core"><a href="#4、创建模块service-core" class="headerlink" title="4、创建模块service-core"></a>4、创建模块service-core</h4><h5 id="1、创建Maven模块-2"><a href="#1、创建Maven模块-2" class="headerlink" title="1、创建Maven模块"></a>1、创建Maven模块</h5><p>在 <font color="red">父工程</font> 下创建普通maven模块</p><p><font color="red">Group：com.kk</font></p><p><font color="red">Artifact：service-core</font></p><h5 id="2、配置pom-2"><a href="#2、配置pom-2" class="headerlink" title="2、配置pom"></a>2、配置pom</h5><p><font color="red">注意：</font>依赖kk-common</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>service-base<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mysql--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mybatis-plus--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--mybatis-plus 代码生成器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Mybatis Plus 代码生成器模板引擎,  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、代码生成器"><a href="#5、代码生成器" class="headerlink" title="5、代码生成器"></a>5、代码生成器</h4><h5 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h5><p><font color="red">创建数据库srb_core</font></p><p><font color="red">并执行sql脚本初始化数据结构和数据</font></p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/20220427223135.png"></p><h5 id="2、创建代码生成器"><a href="#2、创建代码生成器" class="headerlink" title="2、创建代码生成器"></a>2、创建代码生成器</h5><p>在test目录中创建测试用例，并执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">AutoGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">DataSourceConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">PackageConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">StrategyConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">NamingStrategy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、创建代码生成器</span>        <span class="token class-name">AutoGenerator</span> mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、全局配置</span>        <span class="token class-name">GlobalConfig</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> projectPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>getProperty <span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span>setOutputDir <span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span>setAuthor <span class="token punctuation">(</span><span class="token string">"mykk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span>setOpen <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成后是否打开资源管理器</span>        gc<span class="token punctuation">.</span>setServiceName <span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//去掉Service接口的首字母I</span>        gc<span class="token punctuation">.</span>setIdType <span class="token punctuation">(</span><span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//主键策略</span>        gc<span class="token punctuation">.</span>setSwagger2 <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启Swagger2模式</span>        mpg<span class="token punctuation">.</span>setGlobalConfig <span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3、数据源配置</span>        <span class="token class-name">DataSourceConfig</span> dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span>setUrl <span class="token punctuation">(</span><span class="token string">"jdbc:mysql://121.4.120.62:3306/srb_core?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span>setDriverName <span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span>setUsername <span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span>setPassword <span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span>setDbType <span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span>setDataSource <span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4、包配置</span>        <span class="token class-name">PackageConfig</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span>setParent <span class="token punctuation">(</span><span class="token string">"com.kk.srb.core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span>setEntity <span class="token punctuation">(</span><span class="token string">"pojo.entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</span>        mpg<span class="token punctuation">.</span>setPackageInfo <span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5、策略配置</span>        <span class="token class-name">StrategyConfig</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span>setNaming <span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据库表映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span>setColumnNaming <span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数据库表字段映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span>setEntityLombokModel <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lombok</span>        strategy<span class="token punctuation">.</span>setLogicDeleteFieldName <span class="token punctuation">(</span><span class="token string">"is_deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逻辑删除字段名</span>        strategy<span class="token punctuation">.</span>setEntityBooleanColumnRemoveIsPrefix <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去掉布尔值的is_前缀（确保tinyint(1)）</span>        strategy<span class="token punctuation">.</span>setRestControllerStyle <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//restful api风格控制器</span>        mpg<span class="token punctuation">.</span>setStrategy <span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6、执行</span>        mpg<span class="token punctuation">.</span>execute <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="6、启动应用程序"><a href="#6、启动应用程序" class="headerlink" title="6、启动应用程序"></a>6、启动应用程序</h4><h5 id="1、创建application-yml"><a href="#1、创建application-yml" class="headerlink" title="1、创建application.yml"></a>1、创建application.yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8110</span> <span class="token comment"># 服务端口</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment"># 环境设置</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>core <span class="token comment"># 服务名</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span> <span class="token comment"># mysql数据库连接</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//121.4.120.62<span class="token punctuation">:</span>3306/srb_core<span class="token punctuation">?</span>serverTimezone=GMT%2B8<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span> <span class="token comment">#mybatis</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>com/kk/srb/core/mapper/xml/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、创建SpringBoot配置文件"><a href="#2、创建SpringBoot配置文件" class="headerlink" title="2、创建SpringBoot配置文件"></a>2、创建SpringBoot配置文件</h5><p>在service-core中创建config包，创建MybatisPlusConfig类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.kk.srb.core.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span> <span class="token comment">//事务处理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span>addInnerInterceptor <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span> <span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分页</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、创建SpringBoot启动类"><a href="#3、创建SpringBoot启动类" class="headerlink" title="3、创建SpringBoot启动类"></a>3、创建SpringBoot启动类</h5><p><font color="red">注意：</font>扫描com.kk.srb</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kk.srb"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceCoreApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">ServiceCoreApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、运行启动类"><a href="#4、运行启动类" class="headerlink" title="4、运行启动类"></a>4、运行启动类</h5><p>查看控制台8110端口是否成功启动</p><h4 id="7、整体代码结构图"><a href="#7、整体代码结构图" class="headerlink" title="7、整体代码结构图"></a>7、整体代码结构图</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/20220427223747.png"></p><h3 id="二、积分等级CRUD"><a href="#二、积分等级CRUD" class="headerlink" title="二、积分等级CRUD"></a>二、积分等级CRUD</h3><h4 id="1、积分等级列表接口"><a href="#1、积分等级列表接口" class="headerlink" title="1、积分等级列表接口"></a>1、积分等级列表接口</h4><h5 id="1、编写积分等级管理接口"><a href="#1、编写积分等级管理接口" class="headerlink" title="1、编写积分等级管理接口"></a>1、编写积分等级管理接口</h5><p>在controller中添加admin包，添加AdminIntegralGradeController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>admin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">IntegralGrade</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IntegralGradeService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CrossOrigin</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token comment">//允许可访问的域列表</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/core/integralGrade"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminIntegralGradeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">IntegralGradeService</span> integralGradeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntegralGrade</span><span class="token punctuation">&gt;</span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> integralGradeService<span class="token punctuation">.</span>list <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h5><p>重启服务，访问： <a href="http://localhost:8110/admin/core/integralGrade/list">http://localhost:8110/admin/core/integralGrade/list</a>  查看结果json数据</p><h4 id="2、逻辑删除接口"><a href="#2、逻辑删除接口" class="headerlink" title="2、逻辑删除接口"></a>2、逻辑删除接口</h4><h5 id="1、添加删除方法"><a href="#1、添加删除方法" class="headerlink" title="1、添加删除方法"></a>1、添加删除方法</h5><p>AdminIntegralGradeController添加removeById方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/remove/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> integralGradeService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、使用postman测试删除"><a href="#2、使用postman测试删除" class="headerlink" title="2、使用postman测试删除"></a>2、使用postman测试删除</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202204282149807.png"></p><h4 id="3、配置Swagger2"><a href="#3、配置Swagger2" class="headerlink" title="3、配置Swagger2"></a>3、配置Swagger2</h4><h5 id="1、Swagger2配置文件"><a href="#1、Swagger2配置文件" class="headerlink" title="1、Swagger2配置文件"></a>1、Swagger2配置文件</h5><p>在service-base中创建Swagger2Config</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Predicates</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">adminApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span> <span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span>groupName <span class="token punctuation">(</span><span class="token string">"adminApi"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>apiInfo <span class="token punctuation">(</span>adminApiInfo <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>select <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token comment">//只显示admin路径下的页面</span>                <span class="token punctuation">.</span>paths <span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span>and <span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span>regex <span class="token punctuation">(</span><span class="token string">"/admin/.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>build <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">adminApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span>title <span class="token punctuation">(</span><span class="token string">"尚融宝后台管理系统-API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>description <span class="token punctuation">(</span><span class="token string">"本文档描述了尚融宝后台管理系统接口"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>version <span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>contact <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span> <span class="token punctuation">(</span><span class="token string">"Helen"</span><span class="token punctuation">,</span> <span class="token string">"http://mykkto.cn"</span><span class="token punctuation">,</span> <span class="token string">"763856958@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>build <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、查看Swagger文档"><a href="#2、查看Swagger文档" class="headerlink" title="2、查看Swagger文档"></a>2、查看Swagger文档</h5><p>重启服务器查看接口文档：<a href="http://localhost:8101/swagger-ui.html">http://localhost:8110/swagger-ui.html</a></p><h5 id="3、常见注解"><a href="#3、常见注解" class="headerlink" title="3、常见注解"></a>3、常见注解</h5><p><strong>实体类注解：</strong>entity的实体类中可以添加一些自定义设置，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 8:00:00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>controller注解：</strong></p><p>定义在类上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"积分等级管理"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义在方法上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"积分等级列表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"根据id删除积分等级"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"逻辑删除"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义在参数上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"数据id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、统一返回结果"><a href="#三、统一返回结果" class="headerlink" title="三、统一返回结果"></a>三、统一返回结果</h3><h4 id="1、数据格式的定义"><a href="#1、数据格式的定义" class="headerlink" title="1、数据格式的定义"></a>1、数据格式的定义</h4><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端对数据的操作更一致、轻松。</p><p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容</p><p>例如，我们的系统要求返回的基本数据格式如下：</p><p><strong>成功：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>   <span class="token property">"data"</span><span class="token operator">:</span> 数据 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>失败：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，我们定义统一结果</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"code"</span><span class="token operator">:</span> 数字<span class="token punctuation">,</span> <span class="token comment">//业务响应码</span>  <span class="token property">"message"</span><span class="token operator">:</span> 字符串<span class="token punctuation">,</span> <span class="token comment">//返回消息</span>  <span class="token property">"data"</span><span class="token operator">:</span> 对象 <span class="token comment">//返回数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、创建枚举"><a href="#2、创建枚举" class="headerlink" title="2、创建枚举"></a>2、创建枚举</h4><p>在kk-common中创建result包，创建枚举 ResponseEnum</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResponseEnum</span> <span class="token punctuation">{</span>    SUCCESS <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"服务器内部错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 响应状态码</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">// 响应信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、定义同统一结果类"><a href="#3、定义同统一结果类" class="headerlink" title="3、定义同统一结果类"></a>3、定义同统一结果类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构造器私有     */</span>    <span class="token keyword">private</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 返回成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setCode <span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span>getCode <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setMessage <span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 返回失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setCode <span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span>getCode <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setMessage <span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置特定结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span> <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span> responseEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setCode <span class="token punctuation">(</span>responseEnum<span class="token punctuation">.</span>getCode <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>setMessage <span class="token punctuation">(</span>responseEnum<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setMessage <span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setCode <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>put <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setData <span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、使用统一返回结果"><a href="#4、使用统一返回结果" class="headerlink" title="4、使用统一返回结果"></a>4、使用统一返回结果</h4><h5 id="1、修改listAll"><a href="#1、修改listAll" class="headerlink" title="1、修改listAll"></a>1、修改listAll</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"积分等级列表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntegralGrade</span><span class="token punctuation">&gt;</span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> integralGradeService<span class="token punctuation">.</span>list <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、修改removeById"><a href="#2、修改removeById" class="headerlink" title="2、修改removeById"></a>2、修改removeById</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"根据id删除积分等级"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"逻辑删除"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/remove/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">removeById</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"数据id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> integralGradeService<span class="token punctuation">.</span>removeById <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//return R.setResult(ResponseEnum.UPLOAD_ERROR);</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>ok <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>error <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、新增数据"><a href="#3、新增数据" class="headerlink" title="3、新增数据"></a>3、新增数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"新增积分等级"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"积分等级对象"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">IntegralGrade</span> integralGrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> integralGradeService<span class="token punctuation">.</span>save <span class="token punctuation">(</span>integralGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>ok <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"保存成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>error <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"保存失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、根据id查询"><a href="#4、根据id查询" class="headerlink" title="4、根据id查询"></a>4、根据id查询</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"根据id获取积分等级"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getById</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"数据id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">IntegralGrade</span> integralGrade <span class="token operator">=</span> integralGradeService<span class="token punctuation">.</span>getById <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>integralGrade <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>ok <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token punctuation">(</span><span class="token string">"record"</span><span class="token punctuation">,</span> integralGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>error <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"数据不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、根据id修改"><a href="#5、根据id修改" class="headerlink" title="5、根据id修改"></a>5、根据id修改</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"更新积分等级"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">updateById</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"积分等级对象"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">IntegralGrade</span> integralGrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> integralGradeService<span class="token punctuation">.</span>updateById <span class="token punctuation">(</span>integralGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>ok <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>error <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token punctuation">(</span><span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、统一异常处理"><a href="#四、统一异常处理" class="headerlink" title="四、统一异常处理"></a>四、统一异常处理</h3><h4 id="1、项目中的异常"><a href="#1、项目中的异常" class="headerlink" title="1、项目中的异常"></a>1、<strong>项目中的异常</strong></h4><h5 id="1、制造异常"><a href="#1、制造异常" class="headerlink" title="1、制造异常"></a>1、制造异常</h5><p>屏蔽 IntegralGrade 中的 @TableField注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"逻辑删除(1:已删除，0:未删除)"</span><span class="token punctuation">)</span><span class="token comment">//@TableField("is_deleted")</span><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> <span class="token class-name">Boolean</span> deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、Swagger中测试"><a href="#2、Swagger中测试" class="headerlink" title="2、Swagger中测试"></a>2、Swagger中测试</h5><p>测试列表查询功能，查看结果，<font color="red">发生错误，显示响应失败</font></p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205042147886.png"></p><h4 id="2、统一异常处理"><a href="#2、统一异常处理" class="headerlink" title="2、统一异常处理"></a>2、统一异常处理</h4><p><font color="red">目标：我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要进行统一异常处理。</font></p><h5 id="1、创建统一异常处理器"><a href="#1、创建统一异常处理器" class="headerlink" title="1、创建统一异常处理器"></a>1、创建统一异常处理器</h5><p>kk-common中创建exception包，创建统一异常处理器类UnifiedExceptionHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">R</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//Spring容易自动管理</span><span class="token annotation punctuation">@RestControllerAdvice</span> <span class="token comment">//在controller层添加通知。如果使用@ControllerAdvice，则方法上需要添加@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnifiedExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 未定义异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//当controller中抛出Exception，则捕获</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span>error <span class="token punctuation">(</span>e<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>error <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、service-core添加扫描"><a href="#2、service-core添加扫描" class="headerlink" title="2、service-core添加扫描"></a>2、service-core添加扫描</h5><p>添加 “com.kk.common”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//@MapperScan({"com.kk.srb"})// 需要指定指定路径</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kk.srb"</span><span class="token punctuation">,</span><span class="token string">"com.kk.common"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceCoreApplication</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h5><p>返回统一错误结果</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205042244964.png"></p><h4 id="3、处理特定异常"><a href="#3、处理特定异常" class="headerlink" title="3、处理特定异常"></a>3、处理特定异常</h4><p><font color="red">如果我们不想显示统一的“服务器内部错误”，需要个性化的显示异常信息，那么需要针对特定的异常做处理</font></p><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、<strong>添加依赖</strong></h5><p>在kk-common中添加jdbc依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、添加异常处理方法"><a href="#2、添加异常处理方法" class="headerlink" title="2、添加异常处理方法"></a>2、添加异常处理方法</h5><p>在 UnifiedExceptionHandler 中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 特定异常 */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BadSqlGrammarException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleBadSqlGrammarException</span><span class="token punctuation">(</span><span class="token class-name">BadSqlGrammarException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>BAD_SQL_GRAMMAR_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResponseEnum</span> <span class="token punctuation">{</span>    SUCCESS <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"服务器内部错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//-1xx 服务器错误</span>    BAD_SQL_GRAMMAR_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"sql语法错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    SERVLET_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"servlet请求异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//-2xx 参数校验</span>    UPLOAD_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"文件上传错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    EXPORT_DATA_ERROR <span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"数据导出失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//-2xx 参数校验</span>    BORROW_AMOUNT_NULL_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"借款额度不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MOBILE_NULL_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token string">"手机号码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MOBILE_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">203</span><span class="token punctuation">,</span> <span class="token string">"手机号码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    PASSWORD_NULL_ERROR <span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">,</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    CODE_NULL_ERROR <span class="token punctuation">(</span><span class="token number">205</span><span class="token punctuation">,</span> <span class="token string">"验证码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    CODE_ERROR <span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">,</span> <span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    MOBILE_EXIST_ERROR <span class="token punctuation">(</span><span class="token number">207</span><span class="token punctuation">,</span> <span class="token string">"手机号已被注册"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LOGIN_MOBILE_ERROR <span class="token punctuation">(</span><span class="token number">208</span><span class="token punctuation">,</span> <span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LOGIN_PASSWORD_ERROR <span class="token punctuation">(</span><span class="token number">209</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LOGIN_LOKED_ERROR <span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token string">"用户被锁定"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LOGIN_AUTH_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">211</span><span class="token punctuation">,</span> <span class="token string">"未登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    USER_BIND_IDCARD_EXIST_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token string">"身份证号码已绑定"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    USER_NO_BIND_ERROR <span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token string">"用户未绑定"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    USER_NO_AMOUNT_ERROR <span class="token punctuation">(</span><span class="token number">303</span><span class="token punctuation">,</span> <span class="token string">"用户信息未审核"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    USER_AMOUNT_LESS_ERROR <span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token string">"您的借款额度不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LEND_INVEST_ERROR <span class="token punctuation">(</span><span class="token number">305</span><span class="token punctuation">,</span> <span class="token string">"当前状态无法投标"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    LEND_FULL_SCALE_ERROR <span class="token punctuation">(</span><span class="token number">306</span><span class="token punctuation">,</span> <span class="token string">"已满标，无法投标"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    NOT_SUFFICIENT_FUNDS_ERROR <span class="token punctuation">(</span><span class="token number">307</span><span class="token punctuation">,</span> <span class="token string">"余额不足，请充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    PAY_UNIFIEDORDER_ERROR <span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"统一下单错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ALIYUN_SMS_LIMIT_CONTROL_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">502</span><span class="token punctuation">,</span> <span class="token string">"短信发送过于频繁"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//业务限流</span>    ALIYUN_SMS_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">503</span><span class="token punctuation">,</span> <span class="token string">"短信发送失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//其他失败</span>    WEIXIN_CALLBACK_PARAM_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">601</span><span class="token punctuation">,</span> <span class="token string">"回调参数不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    WEIXIN_FETCH_ACCESSTOKEN_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">602</span><span class="token punctuation">,</span> <span class="token string">"获取access_token失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    WEIXIN_FETCH_USERINFO_ERROR <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">603</span><span class="token punctuation">,</span> <span class="token string">"获取用户信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 响应状态码</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">// 响应信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、恢复制造的异常"><a href="#3、恢复制造的异常" class="headerlink" title="3、恢复制造的异常"></a>3、恢复制造的异常</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"is_deleted"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、自定义异常"><a href="#4、自定义异常" class="headerlink" title="4、自定义异常"></a>4、自定义异常</h4><p><font color="red">目标</font>：使用一个或较少的异常类，可以捕获和显示所有的异常信息。</p><p><font color="red">方案</font>：因此，我们可以创建一个自定义异常类（必须是运行时异常），在程序中抛出这个自定义异常对象，并在统一异常处理器中捕获自定义异常对象</p><h5 id="1、创建自定义异常类"><a href="#1、创建自定义异常类" class="headerlink" title="1、创建自定义异常类"></a>1、创建自定义异常类</h5><p>完整查看github源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token comment">//状态码</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">//错误消息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、添加异常处理方法-1"><a href="#2、添加异常处理方法-1" class="headerlink" title="2、添加异常处理方法"></a>2、添加异常处理方法</h5><p>UnifiedExceptionHandler类中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义异常 */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、修改Controller"><a href="#3、修改Controller" class="headerlink" title="3、修改Controller"></a>3、修改Controller</h5><p>在AdminIntegralGradeController的方法中添加异常处理，业务中需要的位置抛出BusinessException自定义异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"新增积分等级"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"积分等级对象"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">IntegralGrade</span> integralGrade<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//如果借款额度为空就手动抛出一个自定义的异常！</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>integralGrade<span class="token punctuation">.</span><span class="token function">getBorrowAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//BORROW_AMOUNT_NULL_ERROR(-201, "借款额度不能为空"),</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>BORROW_AMOUNT_NULL_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> integrationService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>integralGrade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"保存成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"保存失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205052210065.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205052210621.png"></p><h4 id="5、异常处理优化"><a href="#5、异常处理优化" class="headerlink" title="5、异常处理优化"></a>5、异常处理优化</h4><p><font color="red">目标</font>：以优雅的 Assert(断言) 方式来校验业务的异常情况，消除 if else</p><h5 id="1、什么是断言"><a href="#1、什么是断言" class="headerlink" title="1、什么是断言"></a>1、什么是断言</h5><p>用断言的方式封装异常的抛出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>srb<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTests</span> <span class="token punctuation">{</span>    <span class="token comment">//if else的用法</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"用户不存在."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//断言的用法：更为简洁</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 另一种写法</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span>notNull <span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"用户不存在."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、自定义断言"><a href="#2、自定义断言" class="headerlink" title="2、自定义断言"></a>2、自定义断言</h5><p>引入自定义断言，类路径：<code>com.kk.common.exception.Assert</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Assert</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 断言对象不为空     * obj 为空则抛异常     *     * @param obj     * @param responseEnum     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">notNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ResponseEnum</span> responseEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"obj is null....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span> <span class="token punctuation">(</span>responseEnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">完整的源代码</font>：Assert.java</p><h5 id="3、修改controller"><a href="#3、修改controller" class="headerlink" title="3、修改controller"></a>3、修改controller</h5><p>在controller中用断言替换if else</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>integralGrade<span class="token punctuation">.</span><span class="token function">getBorrowAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>BORROW_AMOUNT_NULL_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、Controller上层异常"><a href="#6、Controller上层异常" class="headerlink" title="6、Controller上层异常"></a>6、Controller上层异常</h4><h5 id="1、异常分类"><a href="#1、异常分类" class="headerlink" title="1、异常分类"></a>1、异常分类</h5><p>对异常按阶段进行分类，大体可以分成：进入Controller前的异常 和 业务层异常，具体可以参考下图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205052240355.png"></p><h5 id="2、处理Controller上层异常"><a href="#2、处理Controller上层异常" class="headerlink" title="2、处理Controller上层异常"></a>2、处理Controller上层异常</h5><p>UnifiedExceptionHandler中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Controller上一层相关异常     */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token class-name">NoHandlerFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">MissingPathVariableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">MissingServletRequestParameterException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">TypeMismatchException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">ServletRequestBindingException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">ConversionNotSupportedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">MissingServletRequestPartException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token class-name">AsyncRequestTimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleServletException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//SERVLET_ERROR(-102, "servlet请求异常"),</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>SERVLET_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span>SERVLET_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、测试-1"><a href="#3、测试-1" class="headerlink" title="3、测试"></a>3、测试</h5><p>在save测试用例中输入非法的json参数，则得到下面的结果。我们可以在控制台日志中查看具体的错误原因。前端只需要返回相对简单友好的提示即可。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205052245586.png"></p><h3 id="五、统一日志处理"><a href="#五、统一日志处理" class="headerlink" title="五、统一日志处理"></a>五、统一日志处理</h3><h4 id="1、Logback日志"><a href="#1、Logback日志" class="headerlink" title="1、Logback日志"></a>1、Logback日志</h4><h5 id="1-什么是日志"><a href="#1-什么是日志" class="headerlink" title="1.什么是日志"></a>1.什么是日志</h5><p>通过日志查看程序的运行过程，运行信息，异常信息等</p><h5 id="2-日志级别"><a href="#2-日志级别" class="headerlink" title="2.日志级别"></a>2.日志级别</h5><p>日志记录器（Logger）的行为是分等级的。如下表所示：</p><p>分为：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</p><p><font color="red">默认</font>情况下，spring boot从控制台打印出来的日志级别只有<font color="red">INFO及以上级别</font>，可以配置日志级别</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 设置日志级别</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> ERROR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式能将ERROR级别以及以上级别的日志输出到控制台上，其他级别将不会输出</p><h5 id="3-创建日志文件"><a href="#3-创建日志文件" class="headerlink" title="3.创建日志文件"></a>3.创建日志文件</h5><p>spring boot内部使用Logback作为日志实现的框架。</p><p><font color="red">先删除前面在application.yml中的日志级别配置</font></p><p>resources 中创建 logback-spring.xml （默认日志文件的名字）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062025917.png"></p><h5 id="4、创建测试日志输出"><a href="#4、创建测试日志输出" class="headerlink" title="4、创建测试日志输出"></a>4、创建测试日志输出</h5><p>将以下日志输出到任意controller的方法中即可，例如list方法中</p><p>前提：类上记得加 <code>@Slf4j</code>，注入 log.info </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"积分等级列表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"hi i'm helen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>warn <span class="token punctuation">(</span><span class="token string">"warning!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span>error <span class="token punctuation">(</span><span class="token string">"it's a error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntegralGrade</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> integralGradeService<span class="token punctuation">.</span>list <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span>ok <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>data <span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、基本配置说明"><a href="#2、基本配置说明" class="headerlink" title="2、基本配置说明"></a>2、基本配置说明</h4><h5 id="1-configuration"><a href="#1-configuration" class="headerlink" title="1.configuration"></a>1.configuration</h5><p>日志配置的根节点</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-contextName"><a href="#2-contextName" class="headerlink" title="2.contextName"></a>2.contextName</h5><p><contextname>是    <configuration>的子节点。</configuration></contextname></p><p>每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextname>设置成其他名字，用于区分不同的应用程序。</contextname></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">&gt;</span></span>kkSrb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-property"><a href="#3-property" class="headerlink" title="3.property"></a>3.property</h5><p><property>是    <configuration>的子节点，用来定义变量。</configuration></property></p><p><property>     有两个属性，name和value：name的值是变量的名称，value是变量的值。</property></p><p>通过<property>    定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。</property></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 日志的输出目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:/project/finance/srb_log/core<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--控制台日志格式：彩色日志--&gt;</span><span class="token comment">&lt;!-- magenta:洋红 --&gt;</span><span class="token comment">&lt;!-- boldMagenta:粗红--&gt;</span><span class="token comment">&lt;!-- cyan:青色 --&gt;</span><span class="token comment">&lt;!-- white:白色 --&gt;</span><span class="token comment">&lt;!-- magenta:洋红 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) %highlight([%-5level]) %green(%logger) %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--文件日志格式--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_LOG_PATTERN<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%date{yyyy-MM-dd HH:mm:ss} [%-5level] %thread %file:%line %logger %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--编码--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ENCODING<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、appender"><a href="#4、appender" class="headerlink" title="4、appender"></a>4、appender</h5><p><appender>     是<configuration>的子节点，是负责写日志的组件</configuration></appender></p><p><appender>    有两个必要属性name和class：name指定appender名称，class指定appender的全限定名</appender></p><p><encoder>       对日志进行格式化</encoder></p><p><pattern>        定义日志的具体输出格式</pattern></p><p><charset>        编码方式</charset></p><p><strong>4.1控制台日志配置</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 控制台日志 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.2文件日志配置</strong> </p><p><file>表示日志文件的位置，如果上级目录不存在会自动创建，没有默认值。</file></p><p><append>默认 true，日志被追加到文件结尾，如果是 false，服务重启后清空现存文件。</append></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 文件日志 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${FILE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、logger"><a href="#5、logger" class="headerlink" title="5、logger"></a>5、logger</h5><p><logger>可以是    <configuration>的子节点，用来设置某一个包或具体某一个类的日志打印级别、指定<appender></appender></configuration></logger></p><p>name：    用来指定受此logger约束的某一个包或者具体的某一个类</p><p>level：    用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF。默认继承上级的级别</p><p><logger>    可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger</appender-ref></logger></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 日志记录器  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h5><p>测试日志记录的控制台输出、文件输出、以及日志级别</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062051381.png"></p><h4 id="3、多环境配置"><a href="#3、多环境配置" class="headerlink" title="3、多环境配置"></a>3、多环境配置</h4><h5 id="springProfile"><a href="#springProfile" class="headerlink" title="springProfile"></a>springProfile</h5><p>在一个基于Spring boot开发的项目里，常常需要有多套环境的配置：开发，测试以及产品。</p><p>使用springProfile 可以分别配置开发（dev），测试（test）以及生产（prod）等不同的环境</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 开发环境和测试环境 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev,test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 生产环境 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">注意</font>：需要注释原始配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 日志记录器  --&gt;</span><span class="token comment">&lt;!--&lt;logger name="com.kk" level="INFO"&gt;--&gt;</span>    <span class="token comment">&lt;!--&lt;appender-ref ref="CONSOLE"/&gt;--&gt;</span>    <span class="token comment">&lt;!--&lt;appender-ref ref="FILE"/&gt;--&gt;</span><span class="token comment">&lt;!--&lt;/logger&gt;--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、滚动日志-★"><a href="#4、滚动日志-★" class="headerlink" title="4、滚动日志 ★"></a>4、滚动日志 ★</h4><p><font color="red">问题</font>：生产环境下，如果系统长时间运行，那么日志文件会变得越来越大，系统读取和写入日志的时间会越来越慢，严重的情况会耗尽系统内存，导致系统宕机。</p><p><font color="red">解决方案</font>：可以设置滚动日志。</p><h5 id="1-设置时间滚动策略"><a href="#1-设置时间滚动策略" class="headerlink" title="1.设置时间滚动策略"></a>1.设置时间滚动策略</h5><p>RollingFileAppender是    Appender的另一个实现，表示滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将旧日志备份到其他文件</p><p><rollingpolicy>是    <appender>的子节点，用来定义滚动策略。</appender></rollingpolicy></p><p>TimeBasedRollingPolicy：    最常用的滚动策略，根据时间来制定滚动策略。</p><p><filenamepattern>：    包含文件名及转换符， “%d”可以包含指定的时间格式，如：%d{yyyy-MM-dd}。如果直接使用 %d，默认格式是 yyyy-MM-dd。</filenamepattern></p><p><maxhistory>：    可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxhistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</maxhistory></maxhistory></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ROLLING_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  要区别于其他的appender中的文件名字  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log-rolling.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${FILE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 设置滚动日志记录的滚动策略 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 日志归档路径以及格式 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/info/log-rolling-%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--归档日志文件保留的最大数量--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-设置触发滚动时机"><a href="#2-设置触发滚动时机" class="headerlink" title="2.设置触发滚动时机"></a>2.设置触发滚动时机</h5><p>放在<rollingpolicy>的子节点的位置里面，基于实践策略的触发滚动策略</rollingpolicy></p><p><maxfilesize>设置触发滚动条件：单个文件大于100M时生成新的文件</maxfilesize></p><p><font color="red"><strong>注意：修改日志文件名</strong>  </font>此时 <filenamepattern>${log.path}/info/log-rolling-%d{yyyy-MM-dd}<font color="red"><strong>.%i</strong></font>.log</filenamepattern></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>1KB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5、完整的日志配置文件"><a href="#5、完整的日志配置文件" class="headerlink" title="5、完整的日志配置文件"></a>5、完整的日志配置文件</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">&gt;</span></span>kkSrb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 日志的输出目录 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:/project/test/srb_log/core<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--控制台日志格式：彩色日志--&gt;</span>    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>    <span class="token comment">&lt;!-- boldMagenta:粗红--&gt;</span>    <span class="token comment">&lt;!-- cyan:青色 --&gt;</span>    <span class="token comment">&lt;!-- white:白色 --&gt;</span>    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) %highlight([%-5level]) %green(%logger) %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--文件日志格式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%date{yyyy-MM-dd HH:mm:ss} [%-5level] %thread %file:%line %logger %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--编码--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ENCODING<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 控制台日志 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 文件日志 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${FILE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ROLLING_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--  要区别于其他的appender中的文件名字  --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log-rolling.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${FILE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>${ENCODING}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 设置滚动日志记录的滚动策略 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 日志归档路径以及格式 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/info/log-rolling-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--归档日志文件保留的最大数量--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>1KB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    &lt;logger name="com.kk" level="INFO"&gt;--&gt;</span>    <span class="token comment">&lt;!--        &lt;appender-ref ref="CONSOLE" /&gt;--&gt;</span>    <span class="token comment">&lt;!--        &lt;appender-ref ref="FILE" /&gt;--&gt;</span>    <span class="token comment">&lt;!--    &lt;/logger&gt;--&gt;</span>    <span class="token comment">&lt;!-- 开发环境和测试环境 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev,test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 生产环境 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ROLLING_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ⅲ、前端架构搭建"><a href="#Ⅲ、前端架构搭建" class="headerlink" title="Ⅲ、前端架构搭建"></a>Ⅲ、前端架构搭建</h2><h3 id="一、搭建前端平台"><a href="#一、搭建前端平台" class="headerlink" title="一、搭建前端平台"></a>一、搭建前端平台</h3><h4 id="1、vue-element-admin"><a href="#1、vue-element-admin" class="headerlink" title="1、vue-element-admin"></a>1、<strong>vue-element-admin</strong></h4><p>vue-element-admin是基于element-ui 的一套后台管理<font color="red">系统集成方案</font>。</p><p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></p><p><strong>项目在线预览：</strong><a href="https://panjiachen.gitee.io/vue-element-admin/#/login?redirect=%2Fdashboard">https://panjiachen.gitee.io/vue-element-admin</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062135460.png"></p><h4 id="2、vue-admin-template"><a href="#2、vue-admin-template" class="headerlink" title="2、vue-admin-template"></a>2、<strong>vue-admin-template</strong></h4><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><p>vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板<font color="red">（最少精简版）</font>，可作为模板进行二次开发。</p><p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a></p><p><strong>根据用户角色来动态生成侧边栏的分支：</strong><a href="https://github.com/PanJiaChen/vue-admin-template/tree/permission-control">https://github.com/PanJiaChen/vue-admin-template/tree/permission-control</a></p><h5 id="2、安装和运行"><a href="#2、安装和运行" class="headerlink" title="2、安装和运行"></a>2、安装和运行</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># clone 项目</span><span class="token function">git</span> clone https<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment"># 重命名,删掉自带的 .git文件夹</span><span class="token comment"># 进入目录</span><span class="token builtin class-name">cd</span> FrontEndCode<span class="token comment"># 安装依赖</span><span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 启动。执行后，浏览器自动弹出并访问http://localhost:9528/</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062156091.png"></p><h4 id="3、前端配置"><a href="#3、前端配置" class="headerlink" title="3、前端配置"></a>3、前端配置</h4><h5 id="1、禁用ESLint语法检查"><a href="#1、禁用ESLint语法检查" class="headerlink" title="1、禁用ESLint语法检查"></a>1、禁用ESLint语法检查</h5><p>vue.config.js 第30行处禁用ESLint语法检查</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">lintOnSave<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2、添加prettier格式化配置"><a href="#2、添加prettier格式化配置" class="headerlink" title="2、添加prettier格式化配置"></a>2、添加prettier格式化配置</h5><p>在vue项目根目录下新建一个文件.prettierrc</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、修改页面标题"><a href="#3、修改页面标题" class="headerlink" title="3、修改页面标题"></a>3、修改页面标题</h5><p>src/settings.js 第3行处修改页面标题</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062211618.png"></p><h5 id="4、国际化设置"><a href="#4、国际化设置" class="headerlink" title="4、国际化设置"></a>4、国际化设置</h5><p>src/main.js 第7行处修改语言</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> locale <span class="token keyword">from</span> <span class="token string">'element-ui/lib/locale/lang/zh-CN'</span> <span class="token comment">// lang i18n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试平台语言的修改</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062329256.png"></p><h5 id="5、下拉菜单修改"><a href="#5、下拉菜单修改" class="headerlink" title="5、下拉菜单修改"></a>5、下拉菜单修改</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062331557.png"></p><h5 id="6、登录页修改"><a href="#6、登录页修改" class="headerlink" title="6、登录页修改"></a>6、登录页修改</h5><p>src/views/login/index.vue</p><p>修改页面标题、登录按钮等</p><h3 id="二、系统路由配置"><a href="#二、系统路由配置" class="headerlink" title="二、系统路由配置"></a>二、系统路由配置</h3><h4 id="1、组件定义"><a href="#1、组件定义" class="headerlink" title="1、组件定义"></a>1、<strong>组件定义</strong></h4><h5 id="1、创建vue组件"><a href="#1、创建vue组件" class="headerlink" title="1、创建vue组件"></a>1、创建vue组件</h5><p>在src/views文件夹下创建以下文件夹和文件</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062339340.png"></p><h5 id="2、list-vue"><a href="#2、list-vue" class="headerlink" title="2、list.vue"></a>2、list.vue</h5><p>core/integral-grade/list.vue</p><p>注意，最底下保留一行，不然vscode报错</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="app-container"&gt;积分等级列表&lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3、form-vue"><a href="#3、form-vue" class="headerlink" title="3、form.vue"></a>3、form.vue</h5><p>core/integral-grade/orm.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="app-container"&gt;    积分等级表单  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、路由定义"><a href="#2、路由定义" class="headerlink" title="2、路由定义"></a>2、路由定义</h4><p>修改 src/router/index.js 文件，重新定义constantRoutes，拷贝到 dashboard路由节点 下面</p><p><font color="red"><strong>注意：</strong>每个路由的name不能相同</font></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/core/integral-grade'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>    redirect<span class="token operator">:</span> <span class="token string">'/core/integral-grade/list'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'coreIntegralGrade'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'积分等级管理'</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token string">'el-icon-s-marketing'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    alwaysShow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'coreIntegralGradeList'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/core/integral-grade/list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        meta<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'积分等级列表'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'create'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'coreIntegralGradeCreate'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/core/integral-grade/form'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        meta<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'新增积分等级'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token operator">:</span> <span class="token string">'edit/:id'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'coreIntegralGradeEdit'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/core/integral-grade/form'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        meta<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'编辑积分等级'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        hidden<span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、前端开发流程"><a href="#三、前端开发流程" class="headerlink" title="三、前端开发流程"></a>三、前端开发流程</h3><h4 id="1、全栈开发流程"><a href="#1、全栈开发流程" class="headerlink" title="1、全栈开发流程"></a>1、全栈开发流程</h4><h5 id="1、前端调用流程"><a href="#1、前端调用流程" class="headerlink" title="1、前端调用流程"></a>1、前端调用流程</h5><p>下图是开发过程中涉及到和几个核心的模块，我们已经完成了路由的配置和页面组件的创建，接下来我们需要进一步完善页面组件的模板 &lt;template&gt;部分，以及脚本&lt;script&gt;等部分的开发，然后创建前后端对接需要的api模块，最后通过api模块向后端接口发起调用。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205072259818.png"></p><h5 id="2、nginx反向代理配置"><a href="#2、nginx反向代理配置" class="headerlink" title="2、nginx反向代理配置"></a>2、nginx反向代理配置</h5><p>目前，应用程序的前后端基本架构如下：srb-admin是前端程序，直接调用后端的srb-core微服务</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205080942459.png"></p><p>为了能够让前端程序能够同时对接多个后端服务，我们可以使用多种解决方案，例如nginx反向代理、微服务网关等。这里我们先使用nginx作为前后端中间的反向代理层，架构如下</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205080956814.png"></p><p>nginx的配置</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>core<span class="token operator">/</span> <span class="token punctuation">{</span>               <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8110</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>sms<span class="token operator">/</span> <span class="token punctuation">{</span>               <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8120</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>oss<span class="token operator">/</span> <span class="token punctuation">{</span>                       <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8130</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx的命令</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">start nginx <span class="token comment">#启动</span>nginx <span class="token operator">-</span>s stop <span class="token comment">#停止</span>nginx <span class="token operator">-</span>s reload <span class="token comment">#重新加载配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前端的配置： .env.development</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"># base api：连接到nginx<span class="token constant">VUE_APP_BASE_API</span> <span class="token operator">=</span> <span class="token string">'http://localhost'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3、mock-server"><a href="#3、mock-server" class="headerlink" title="3、mock-server"></a>3、mock-server</h5><p>VUE_APP_BASE_API 的 修改会影响到平台模拟登录功能的mock数据，因此需要修改mock-server的地址</p><p>修改 mock/mock-server.js 文件 第37行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">url<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/dev-api</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 src/api/user.js中的接口调用，为每一个远程调用添加配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">baseURL<span class="token operator">:</span> <span class="token string">'/dev-api'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205081822995.png"></p><h4 id="2、前端组件开发"><a href="#2、前端组件开发" class="headerlink" title="2、前端组件开发"></a>2、前端组件开发</h4><h5 id="1、定义api模块"><a href="#1、定义api模块" class="headerlink" title="1、定义api模块"></a>1、定义api模块</h5><p>创建文件 src/api/core/integral-grade.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// @ 符号在vue.config.js 中配置， 表示 'src' 路径的别名</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token operator">:</span> <span class="token string">'/admin/core/integralGrade/list'</span><span class="token punctuation">,</span>      method<span class="token operator">:</span> <span class="token string">'get'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、定义页面组件脚本"><a href="#2、定义页面组件脚本" class="headerlink" title="2、定义页面组件脚本"></a>2、定义页面组件脚本</h5><p>src/views/core/integral-grade/list.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import integralGradeApi from '@/api/core/integral-grade'export default {  // 定义数据模型  data() {    return {      list: [] // 数据列表    }  },  // 页面渲染成功后获取数据  created() {    this.fetchData()  },  // 定义方法  methods: {    fetchData() {      // 调用api      integralGradeApi.list().then(response =&gt; {        this.list = response.data.list      })    }  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、定义页面组件模板"><a href="#3、定义页面组件模板" class="headerlink" title="3、定义页面组件模板"></a>3、定义页面组件模板</h5><p>src/views/core/integral-grade/list.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="app-container"&gt;    &lt;!-- 表格 --&gt;    &lt;el-table :data="list" border stripe&gt;      &lt;el-table-column type="index" width="50" /&gt;      &lt;el-table-column prop="borrowAmount" label="借款额度" /&gt;      &lt;el-table-column prop="integralStart" label="积分区间开始" /&gt;      &lt;el-table-column prop="integralEnd" label="积分区间结束" /&gt;    &lt;/el-table&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、axios响应拦截器修改"><a href="#4、axios响应拦截器修改" class="headerlink" title="4、axios响应拦截器修改"></a>4、axios响应拦截器修改</h5><p>src/utils/request.js 中 将第49行的 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我们的后端接口统一结果判断0为成功的响应结果，而mock数据判断20000位正确的结果</p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h3 id="四、完善积分模块"><a href="#四、完善积分模块" class="headerlink" title="四、完善积分模块"></a>四、完善积分模块</h3><h4 id="1、删除数据"><a href="#1、删除数据" class="headerlink" title="1、删除数据"></a>1、<strong>删除数据</strong></h4><h5 id="1-定义api"><a href="#1-定义api" class="headerlink" title="1.定义api"></a>1.定义api</h5><p> src/api/core/integral-grade.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">removeById</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/admin/core/integralGrade/remove/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'delete'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-页面组件模板"><a href="#2-页面组件模板" class="headerlink" title="2.页面组件模板"></a>2.页面组件模板</h5><p>src/views/core/integral-grade/list.vue，在table组件中添加<font color="red">删除列</font></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-table-column label="操作" width="200" align="center"&gt;    &lt;template slot-scope="scope"&gt;        &lt;el-button                   type="danger"                   size="mini"                   icon="el-icon-delete"                   @click="removeById(scope.row.id)"                   &gt;            删除        &lt;/el-button&gt;    &lt;/template&gt;&lt;/el-table-column&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-删除数据脚本"><a href="#3-删除数据脚本" class="headerlink" title="3.删除数据脚本"></a>3.删除数据脚本</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 根据id删除数据</span>    <span class="token function">removeById</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// debugger</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token string">'此操作将永久删除该记录, 是否继续?'</span><span class="token punctuation">,</span> <span class="token string">'提示'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>        cancelButtonText<span class="token operator">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'warning'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> integralGradeApi<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            message<span class="token operator">:</span> response<span class="token punctuation">.</span>message<span class="token punctuation">,</span>            type<span class="token operator">:</span> <span class="token string">'success'</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch的error'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">===</span> <span class="token string">'cancel'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              type<span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>              message<span class="token operator">:</span> <span class="token string">'已取消删除'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、新增数据"><a href="#2、新增数据" class="headerlink" title="2、新增数据"></a>2、新增数据</h4><h5 id="1-定义api-1"><a href="#1-定义api-1" class="headerlink" title="1.定义api"></a>1.定义api</h5><p> src/api/core/integral-grade.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">save</span><span class="token punctuation">(</span><span class="token parameter">integralGrade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token string">'/admin/core/integralGrade/save'</span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> integralGrade    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-定义页面data"><a href="#2-定义页面data" class="headerlink" title="2.定义页面data"></a>2.定义页面data</h5><p>src/views/core/integral-grade/form.vue，完善data定义</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  data() {    return {      integralGrade: {}, // 初始化数据      saveBtnDisabled: false // 保存按钮是否禁用，防止表单重复提交    }  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-页面组件模板"><a href="#3-页面组件模板" class="headerlink" title="3.页面组件模板"></a>3.页面组件模板</h5><p>src/views/core/integral-grade/form.vue，完善template</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="app-container"&gt;    &lt;!-- 输入表单 --&gt;    &lt;el-form label-width="120px"&gt;      &lt;el-form-item label="借款额度"&gt;        &lt;el-input-number v-model="integralGrade.borrowAmount" :min="0" /&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="积分区间开始"&gt;        &lt;el-input-number v-model="integralGrade.integralStart" :min="0" /&gt;      &lt;/el-form-item&gt;      &lt;el-form-item label="积分区间结束"&gt;        &lt;el-input-number v-model="integralGrade.integralEnd" :min="0" /&gt;      &lt;/el-form-item&gt;      &lt;el-form-item&gt;        &lt;el-button :disabled="saveBtnDisabled" type="primary" @click="saveOrUpdate()"&gt;          保存        &lt;/el-button&gt;      &lt;/el-form-item&gt;    &lt;/el-form&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-新增数据脚本"><a href="#4-新增数据脚本" class="headerlink" title="4.新增数据脚本"></a>4.新增数据脚本</h5><p>src/views/core/integral-grade/form.vue，引入api</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> integralGradeApi <span class="token keyword">from</span> <span class="token string">'@/api/core/integral-grade'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义保存方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 禁用保存按钮</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>saveBtnDisabled <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 新增数据</span>    <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// debugger</span>      integralGradeApi<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>integralGrade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          type<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>          message<span class="token operator">:</span> response<span class="token punctuation">.</span>message        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/core/integral-grade/list'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、回显数据"><a href="#3、回显数据" class="headerlink" title="3、回显数据"></a>3、回显数据</h4><h5 id="1-列表页编辑按钮"><a href="#1-列表页编辑按钮" class="headerlink" title="1.列表页编辑按钮"></a>1.列表页编辑按钮</h5><p>src/views/core/integral-grade/list.vue，表格“操作”列中增加“修改”按钮</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link :to="'/core/integral-grade/edit/' + scope.row.id" style="margin-right:5px;" &gt;&lt;el-button type="primary" size="mini" icon="el-icon-edit"&gt;修改&lt;/el-button&gt;&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-定义api"><a href="#2-定义api" class="headerlink" title="2.定义api"></a>2.定义api</h5><p>src/api/core/integral-grade.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">getById</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/admin/core/integralGrade/get/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'get'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-获取数据脚本"><a href="#3-获取数据脚本" class="headerlink" title="3.获取数据脚本"></a>3.获取数据脚本</h5><p>src/views/core/integral-grade/form.vue，methods中定义回显方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 根据id查询记录</span><span class="token function">fetchDataById</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    integralGradeApi<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>integralGrade <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>record    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面渲染成功后获取数据</p><p>因为已在路由中定义如下内容：<font color="red">path: ‘edit/:id’</font>/，因此可以使用 <font color="red">this.$route.params.id</font> 获取路由中的id</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//页面渲染成功</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchDataById</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、更新数据"><a href="#4、更新数据" class="headerlink" title="4、更新数据"></a>4、更新数据</h4><h5 id="1-定义api-2"><a href="#1-定义api-2" class="headerlink" title="1.定义api"></a>1.定义api</h5><p>src/api/core/integral-grade.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">updateById</span><span class="token punctuation">(</span><span class="token parameter">integralGrade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token operator">:</span> <span class="token string">'/admin/core/integralGrade/update'</span><span class="token punctuation">,</span>      method<span class="token operator">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>      data<span class="token operator">:</span> integralGrade    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-更新数据脚本"><a href="#2-更新数据脚本" class="headerlink" title="2.更新数据脚本"></a>2.更新数据脚本</h5><p>src/views/core/integral-grade/form.vue，methods中定义updateData</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 根据id更新记录</span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据的获取</span>    integralGradeApi<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>integralGrade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> response<span class="token punctuation">.</span>message        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/core/integral-grade/list'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完善saveOrUpdate方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 禁用保存按钮</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>saveBtnDisabled <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>integralGrade<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5><h2 id="参考地址-↓"><a href="#参考地址-↓" class="headerlink" title="参考地址 ↓"></a>参考地址 ↓</h2><p>1、Springboot 启动注解扫描：<a href="https://blog.csdn.net/m0_50932526/article/details/122936434">https://blog.csdn.net/m0_50932526/article/details/122936434</a></p><br><p>2、异常：org.apache.ibatis.binding.BindingException: Invalid bound statement (not fou</p><p>需要指定扫描包路径为具体路径，之前是 <strong>@MapperScan({“com.kk.srb”})</strong>,现在是**@MapperScan({“com.kk.srb.core.mapper”})**</p><p><a href="https://www.freesion.com/article/7476436940/">https://www.freesion.com/article/7476436940/</a></p><br><p>3、vue项目 出现 <code>Failed to compile.</code></p><p>编译错误，可能是指定的路径和文件不匹配</p><p><img src="https://v1.mykkto.cn/image/blog/2022/project/shangrongbao/202205062355727.png"></p><br><p>4、 &lt; 标签开头如果不是成对存在，需用  <code>\</code> 转义 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="项目-金融" scheme="https://mykkto.github.io/categories/%E9%A1%B9%E7%9B%AE-%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="nginx" scheme="https://mykkto.github.io/tags/nginx/"/>
    
    <category term="springboot" scheme="https://mykkto.github.io/tags/springboot/"/>
    
    <category term="vue" scheme="https://mykkto.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JVM-01-字节码</title>
    <link href="https://mykkto.github.io/posts/6ae84987.html"/>
    <id>https://mykkto.github.io/posts/6ae84987.html</id>
    <published>2022-04-16T13:00:12.000Z</published>
    <updated>2022-11-12T15:07:08.023Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、JVM概述"><a href="#一、JVM概述" class="headerlink" title="一、JVM概述"></a>一、JVM概述</h2><h3 id="1、Java的生态"><a href="#1、Java的生态" class="headerlink" title="1、Java的生态"></a>1、Java的生态</h3><h4 id="1、Oracle-JDK与Open-JDK-关系"><a href="#1、Oracle-JDK与Open-JDK-关系" class="headerlink" title="1、Oracle JDK与Open JDK 关系"></a>1、Oracle JDK与Open JDK 关系</h4><h5 id="Oracle与OpenJDK之间的主要区别："><a href="#Oracle与OpenJDK之间的主要区别：" class="headerlink" title="Oracle与OpenJDK之间的主要区别："></a>Oracle与OpenJDK之间的主要区别：</h5><ol><li>Oracle JDK版本将每三年发布一次LTS版本，而OpenJDK版本每三个月发布一次。</li><li>Oracle JDK将更多地关注稳定性，它重视更多的企业级用户，而OpenJDK经常发布以支持其他性能，这可能会导致不稳定。</li><li>Oracle JDK支持长期发布的更改，而Open JDK仅支持计划和完成下一个发行版。</li><li>Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。 使用Oracle平台时会产生一些许可影响。如Oracle 宣布的那样，在没有商业许可的情况下，在2019年1月之后发布的Oracle Java SE 8的公开更新将无法用于商业，商业或生产用途。但是，OpenJDK是完全开源的，可以自由使用。</li><li>Oracle JDK的构建过程基于OpenJDK，因此OpenJDK与Oracle JDK之间没有技术差异。</li><li>顶级公司正在使用Oracle JDK，例如Android Studio，Minecraft和IntelliJ IDEA开发工具，其中Open JDK不太受欢迎。</li><li>Oracle JDK具有Flight Recorder，Java Mission Control和Application Class-Data Sharing功能，Open JDK具有Font Renderer功能，这是OpenJDK与Oracle JDK之间的显着差异。</li><li>Oracle JDK具有良好的GC选项和更好的渲染器，而OpenJDK具有更少的GC选项，并且由于其包含自己的渲染器的分布，因此具有较慢的图形渲染器选项。</li><li>在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能。</li><li>与OpenJDK相比，Oracle JDK的开源社区较少，OpenJDK社区用户的表现优于Oracle JDK发布的功能，以提高性能。</li><li>如果使用Oracle JDK会产生许可影响，而OpenJDK没有这样的问题，并且可以以任何方式使用，以满足完全开源和免费使用。</li><li>Oracle JDK在运行JDK时不会产生任何问题，而OpenJDK在为某些用户运行JDK时会产生一些问题。</li><li>根据使用方的使用和许可协议，现有应用程序可以从Oracle JDK迁移到Open JDK，反之亦然。</li><li>Oracle JDK将从其10.0.X版本将收费，用户必须付费或必须依赖OpenJDK才能使用其免费版本。</li><li>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本。</li><li>Oracle JDK以前的1.0版以前的版本是由Sun开发的，后来被Oracle收购并为其他版本维护，而OpenJDK最初只基于Java SDK或JDK版本7。</li><li>Oracle JDK发布时大多数功能都是开源的，其中一些功能免于开源，并且根据Sun的许可授权，而OpenJDK发布了所有功能，如开源和免费。</li><li>Oracle JDK完全由Oracle公司开发，而Open JDK项目由IBM，Apple，SAP AG，Redhat等顶级公司加入和合作。</li></ol><h4 id="2、JDK与JVM是什么关系"><a href="#2、JDK与JVM是什么关系" class="headerlink" title="2、JDK与JVM是什么关系"></a>2、JDK与JVM是什么关系</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220416210355.png"></p><h5 id="1、如何理解Java是跨平台的语言"><a href="#1、如何理解Java是跨平台的语言" class="headerlink" title="1、如何理解Java是跨平台的语言"></a>1、如何理解Java是跨平台的语言</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220416210431.png"></p><p>当Java源代码成功编译成字节码后，如果想在不同的平台上面运行，则无须再次编译<br>这个优势不再那么吸引人了。Python、PHP、Perl、Ruby、Lisp等有强大的解释器。跨平台似乎已经快成为一门语言必选的特性。</p><h5 id="2、如何理解JVM跨语言的平台"><a href="#2、如何理解JVM跨语言的平台" class="headerlink" title="2、如何理解JVM跨语言的平台"></a>2、如何理解JVM跨语言的平台</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220416210508.png"></p><p>Java虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，<code>它只关心“字节码”文件。</code></p><p><strong>Java不是最强大的语言，但是JVM是最强大的虚拟机。</strong></p><h4 id="3、Java发展的几个重大事件"><a href="#3、Java发展的几个重大事件" class="headerlink" title="3、Java发展的几个重大事件"></a>3、Java发展的几个重大事件</h4><p>2000年，JDK 1.3发布，<code>Java HotSpot Virtual Machine正式发布，成为Java的默认虚拟机。</code><br>2002年，JDK 1.4发布，古老的Classic虚拟机退出历史舞台。<br>2003年年底，<code>Java平台的Scala正式发布，同年Groovy也加入了 Java阵营。</code><br>2006年，JDK 6发布。同年，<code>Java开源并建立了 OpenJDK</code>。顺理成章，<code>Hotspot虚拟机也成为了 OpenJDK中的默认虚拟机。</code><br>2007年，<code>Java平台迎来了新伙伴Clojure。</code><br>2008 年，Oracle 收购了 BEA,得到了 <code>JRockit 虚拟机</code>。<br>2009年，Twitter宣布把后台大部分程序从Ruby迁移到Scala，这是Java平台的又一次大规模应用。<br>2010年，Oracle收购了Sun，<code>获得Java商标和最具价值的HotSpot虚拟机</code>。此时，Oracle拥有市场占用率最高的两款虚拟机HotSpot和JRockit，并计划在未来对它们进行整合：HotRockit.  JCP组织管理：Java语言<br>2011年，JDK7发布。在JDK 1.7u4中，<code>正式启用了新的垃圾回收器G1</code>。<br>2017年，JDK9发布。<code>将G1设置为默认GC，替代CMS (被标记为Deprecated)</code><br>同年，<code>IBM的J9开源</code>，形成了现在的Open J9社区<br>2018年，Android的Java侵权案判决，Google赔偿Oracle计88亿美元<br>同年，JDK11发布，LTS版本的JDK<code>,发布革命性的ZGC,调整JDK授权许可</code><br>2019年，JDK12发布，加入RedHat领导开发的<code>Shenandoah GC</code></p><h3 id="2、JVM的架构"><a href="#2、JVM的架构" class="headerlink" title="2、JVM的架构"></a>2、JVM的架构</h3><h4 id="1、JVM架构图"><a href="#1、JVM架构图" class="headerlink" title="1、JVM架构图"></a>1、JVM架构图</h4><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417095344.png"></h3><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417095602.png"></p><p><strong>这个架构可以分成三层看：</strong></p><p>最上层：javac编译器将编译好的字节码class文件，通过java 类装载器执行机制，把对象或class文件存放在 jvm划分内存区域。<br>中间层：称为Runtime Data Area，主要是在Java代码运行时用于存放数据的，从左至右为方法区(永久代、元数据区)、堆(共享,GC回收对象区域)、栈、程序计数器、寄存器、本地方法栈(私有)。<br>最下层：解释器、JIT(just in time)编译器和 GC（Garbage Collection，垃圾回收器）</p><h4 id="2、JVM脉络"><a href="#2、JVM脉络" class="headerlink" title="2、JVM脉络"></a>2、JVM脉络</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417095808.png"></p><h2 id="二、字节码文件概述"><a href="#二、字节码文件概述" class="headerlink" title="二、字节码文件概述"></a>二、字节码文件概述</h2><h3 id="1、字节码文件跨平台"><a href="#1、字节码文件跨平台" class="headerlink" title="1、字节码文件跨平台"></a>1、字节码文件跨平台</h3><p><strong>Class文件结构不仅仅是Java虚拟机的执行入口，更是Java生态圈的基础和核心。</strong></p><h4 id="1、class文件里是什么"><a href="#1、class文件里是什么" class="headerlink" title="1、class文件里是什么"></a>1、class文件里是什么</h4><p><strong>字节码文件里是什么？</strong></p><p>源代码经过编译器编译之后便会生成一个字节码文件，字节码是一种二进制的类文件，它的内容是JVM的指令，而不像C、C++经由编译器直接生成机器码。</p><p>随着Java平台的不断发展，在将来，Class文件的内容也一定会做进一步的扩充，但是其基本的格式和结构不会做重大调整。</p><h4 id="2、☆-class文件的编译器"><a href="#2、☆-class文件的编译器" class="headerlink" title="2、☆ class文件的编译器"></a>2、☆ class文件的编译器</h4><h5 id="1、从位置上理解"><a href="#1、从位置上理解" class="headerlink" title="1、从位置上理解"></a>1、从位置上理解</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417101023.png"></p><h5 id="2、前端编译器的种类"><a href="#2、前端编译器的种类" class="headerlink" title="2、前端编译器的种类"></a>2、前端编译器的种类</h5><p>Java源代码的编译结果是字节码，那么肯定需要有一种编译器能够将Java源码编译为字节码，承担这个重要责任的就是配置在path环境变量中的<code>javac编译器</code>。javac是一种能够将Java源码编译为字节码的<code>前端编译器</code>。</p><p>HotSpot VM并没有强制要求前端编译器只能使用javac来编译字节码，其实只要编译结果符合JVM规范都可以被JVM所识别即可。<br>在Java的前端编译器领域，除了javac之外，还有一种被大家经常用到的前端编译器，那就是内置在Eclipse中的<code>ECJ (Eclipse Compiler for Java)</code>编译器。和Javac的全量式编译不同，ECJ是一种增量式编译器。</p><p>默认情况下，IntelliJ IDEA 使用 javac 编译器。(还可以自己设置为AspectJ编译器 ajc)</p><h5 id="3、前端编译器的任务"><a href="#3、前端编译器的任务" class="headerlink" title="3、前端编译器的任务"></a>3、前端编译器的任务</h5><p>前端编译器的主要任务就是负责将符合Java语法规范的<code>Java代码</code>转换为符合JVM规范的<code>字节码文件</code>。</p><h4 id="3、前端编译器的局限性"><a href="#3、前端编译器的局限性" class="headerlink" title="3、前端编译器的局限性"></a>3、前端编译器的局限性</h4><p>前端编译器并不会直接涉及编译优化等方面的技术，而是将这些具体优化细节移交给HotSpot的JIT编译器负责。</p><p>复习：AOT(静态提前编译器，Ahead Of Time Compiler)</p><p>jdk9引入了AOT编译器(静态提前编译器，Ahead Of Time Compiler)</p><p>Java 9 引入了实验性 AOT 编译工具jaotc。它借助了 Graal 编译器，将所输入的 Java 类文件转换为机器码，并存放至生成的动态共享库之中。</p><p>所谓 AOT 编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。<br>.java -&gt; .class -&gt; .so</p><p>最大好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少Java应用给人带来“第一次运行慢”的不良体验。</p><p>缺点：<br>破坏了java“一次编译，到处运行”，必须为每个不同硬件、OS编译对应的发行包。<br>降低了Java链接过程的动态性，加载的代码在编译期就必须全部已知。</p><p>还需要继续优化中，最初只支持Linux x64 java base</p><h3 id="2、Class对象对应类型"><a href="#2、Class对象对应类型" class="headerlink" title="2、Class对象对应类型"></a>2、Class对象对应类型</h3><blockquote><p>（1）class：<br>外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）interface：接口<br>（3）[]：数组<br>（4）enum：枚举<br>（5）annotation：注解@interface<br>（6）primitive type：基本数据类型<br>（7）void</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c4 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c5 <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c6 <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c7 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c8 <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c9 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c10 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c11 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只要元素类型与维度一样，就是同一个Class</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c10 <span class="token operator">==</span> c11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、字节码指令"><a href="#3、字节码指令" class="headerlink" title="3、字节码指令"></a>3、字节码指令</h3><h4 id="1、什么是字节码指令"><a href="#1、什么是字节码指令" class="headerlink" title="1、什么是字节码指令"></a>1、什么是字节码指令</h4><p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的<code>操作码（opcode）</code>以及跟随其后的零至多个代表此操作所需参数的<code>操作数（operand）</code>所构成。虚拟机中许多指令并不包含操作数，只有一个操作码。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417101919.png"></p><h4 id="2、☆-面试题"><a href="#2、☆-面试题" class="headerlink" title="2、☆ 面试题"></a>2、☆ 面试题</h4><p><strong>i++和++i有什么区别</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCodeInterview</span> <span class="token punctuation">{</span>    <span class="token comment">//面试题： i++和++i有什么区别？</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//++i;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        i <span class="token operator">*=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//包装类对象的缓存问题</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        Integer x = 5;</span><span class="token comment">//        int y = 5;</span>        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417102212.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father.x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son.x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Father</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、如何解读class文件"><a href="#4、如何解读class文件" class="headerlink" title="4、如何解读class文件"></a>4、如何解读class文件</h3><p>方式一：一个一个二进制的看。这里用到的是Notepad++,需要安装一个HEX-Editor插件，或者使用Binary Viewer</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417102826.png"></p><p>方式二：使用javap指令：jdk自带的反解析工具<br>方式三：使用IDEA插件：jclasslib 或jclasslib bytecode viewer客户端工具。（可视化更好）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417102924.png"></p><h2 id="三、Class文件结构细节"><a href="#三、Class文件结构细节" class="headerlink" title="三、Class文件结构细节"></a>三、Class文件结构细节</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="1、class文件结构概述"><a href="#1、class文件结构概述" class="headerlink" title="1、class文件结构概述"></a>1、class文件结构概述</h4><p>Class文件的结构并不是一成不变的，随着Java虚拟机的不断发展，总是不可避免地会对Class文件结构做出一些调整，但是其基本结构和框架是非常稳定的。<br>Class文件的总体结构如下：</p><ul><li>魔数</li><li>Class文件版本</li><li>常量池</li><li>访问标识(或标志)</li><li>类索引，父类索引，接口索引集合</li><li>字段表集合</li><li>方法表集合</li><li>属性表集合</li></ul><h4 id="2、结构图表"><a href="#2、结构图表" class="headerlink" title="2、结构图表"></a>2、结构图表</h4><p> 这是一张Java字节码总的结构表，我们按照上面的顺序逐一进行解读就可以了。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417103240.png"></p><h3 id="2、魔数"><a href="#2、魔数" class="headerlink" title="2、魔数"></a>2、魔数</h3><p><strong>Magic Number（魔数）：class文件的标志</strong></p><ul><li><p>每个 Class 文件开头的4个字节的无符号整数称为魔数（Magic Number）</p></li><li><p>它的唯一作用是确定这个文件是否为一个能被虚拟机接受的有效合法的Class文件。即：魔数是Class文件的标识符。</p></li><li><p>魔数值固定为0xCAFEBABE。不会改变。</p></li><li><p>如果一个Class文件不以0xCAFEBABE开头，虚拟机在进行文件校验的时候就会直接抛出以下错误：</p><blockquote><p>Error: A JNI error has occurred, please check your installation and try again<br>Exception in thread “main” java.lang.ClassFormatError: Incompatible magic value 1885430635 in class file StringTest</p></blockquote></li><li><p>使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑，因为文件扩展名可以随意地改动。</p></li></ul><h3 id="3、高版本执行低版本Class"><a href="#3、高版本执行低版本Class" class="headerlink" title="3、高版本执行低版本Class"></a>3、高版本执行低版本Class</h3><p><strong>不同版本的Java编译器编译的Class文件对应的版本是不一样的。目前，高版本的Java虚拟机可以执行由低版本编译器生成的Class文件,但是低版本的Java虚拟机不能执行由高版本编译器生成的Class文件。否则JVM会抛出java.lang.UnsupportedClassVersionError异常。 （向下兼容）</strong></p><p>在实际应用中，由于开发环境和生产环境的不同，可能会导致该问题的发生。因此，需要我们在开发时，特别注意开发编译的JDK版本和生产环境中的JDK版本是否一致。</p><h4 id="class文件版本号"><a href="#class文件版本号" class="headerlink" title="class文件版本号"></a>class文件版本号</h4><ul><li>紧接着魔数的 4 个字节存储的是 Class 文件的版本号。同样也是4个字节。第5个和第6个字节所代表的含义就是编译的副版本号minor_version，而第7个和第8个字节就是编译的主版本号major_version。</li><li>它们共同构成了class文件的格式版本号。譬如某个 Class 文件的主版本号为 M，副版本号为 m，那么这个Class 文件的格式版本号就确定为 M.m。</li><li>版本号和Java编译器的对应关系如下表：</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417162510.png"></p><ul><li><p>Java 的版本号是从45开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1。</p></li><li><p>虚拟机JDK版本为1.k （k &gt;= 2）时，对应的class文件格式版本号的范围为45.0 - 44+k.0 （含两端）。</p></li></ul><h3 id="4、☆-常量池"><a href="#4、☆-常量池" class="headerlink" title="4、☆ 常量池"></a>4、☆ 常量池</h3><p><strong>常量池：class文件的基石？作用是？</strong></p><h4 id="1、为什么需要常量池计数器"><a href="#1、为什么需要常量池计数器" class="headerlink" title="1、为什么需要常量池计数器"></a>1、为什么需要常量池计数器</h4><p><strong>constant_pool_count （常量池计数器）</strong></p><ul><li><p>由于常量池的数量不固定，时长时短，所以需要放置两个字节来表示常量池容量计数值。</p></li><li><p>常量池容量计数值（u2类型）：从1开始，表示常量池中有多少项常量。即constant_pool_count=1表示常量池中有0个常量项。</p></li><li><p>Demo的值为：</p><ul><li><p>其值为0x0016,掐指一算，也就是22。<br>需要注意的是，这实际上只有21项常量。索引为范围是1-21。为什么呢？<br>通常我们写代码时都是从0开始的，但是这里的常量池却是从1开始，因为它把第0项常量空出来了。这是为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示。</p></li><li><pre><code class="java">int[] arr = new int[10];arr[0];arr[1];ar[10 - 1];<pre class="line-numbers language-none"><code class="language-none">    #### 2、常量池表**constant_pool []（常量池）**- constant_pool是一种表结构，以 1 ~ constant_pool_count - 1为索引。表明了后面有多少个常量项。- 常量池主要存放两大类常量：`字面量（Literal）`和`符号引用（Symbolic References）`- 它包含了class文件结构及其子结构中引用的所有字符串常量、类或接口名、字段名和其他常量。常量池中的每一项都具备相同的特征。第1个字节作为类型标记，用于确定该项的格式，这个字节称为tag byte （标记字节、标签字节）。![](https://v1.mykkto.cn/image/blog/2022/jvm/20220417163310.png)##### 1、字面量和符号引用1、字面量和符号引用在对这些常量解读前，我们需要搞清楚几个概念。常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。如下表：![](https://v1.mykkto.cn/image/blog/2022/jvm/20220417164111.png)```javaString str = "mykk";final int NUM = 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><p>2、全限定名<br>com/kk/test/Demo这个就是类的全限定名，仅仅是把包名的”.”替换成”/“，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个“;”表示全限定名结束。</p><p>3、简单名称<br>简单名称是指没有类型和参数修饰的方法或者字段名称，上面例子中的类的add()方法和num字段的简单名称分别是add和num。</p><p>4、描述符<br><code>描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。</code>根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示，详见下表:   （数据类型：基本数据类型 、 引用数据类型）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417164344.png"></p><p>用描述符来描述方法时，按照先参数列表，后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。如：<br>方法java.lang.String toString()的描述符为() Ljava/lang/String;，<br>方法int abc(int[] x, int y)的描述符为([II) I。</p><h5 id="2、谈谈你对符号引用、直接引用的理解？"><a href="#2、谈谈你对符号引用、直接引用的理解？" class="headerlink" title="2、谈谈你对符号引用、直接引用的理解？"></a>2、谈谈你对符号引用、直接引用的理解？</h5><p>这里说明下符号引用和直接引用的区别与关联：<br>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中。<br>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了。</p><h5 id="3、常量类型和结构"><a href="#3、常量类型和结构" class="headerlink" title="3、常量类型和结构"></a>3、常量类型和结构</h5><p>常量池中每一项常量都是一个表，JDK1.7之后共有14种不同的表结构数据。如下表格所示：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417165020.png"></p><p>这14种表（或者常量项结构）的共同点是：表开始的第一位是一个u1类型的标志位（tag），代表当前这个常量项使用的是哪种表结构，即哪种常量类型。</p><p>在常量池列表中，CONSTANT_Utf8_info常量项是一种使用改进过的UTF-8编码格式来存储诸如文字字符串、类或者接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息。</p><p>这14种常量项结构还有一个特点是，其中13个常量项占用的字节固定，只有CONSTANT_Utf8_info占用字节不固定，其大小由length决定。为什么呢？因为从常量池存放的内容可知，其存放的是字面量和符号引用，最终这些内容都会是一个字符串，这些字符串的大小是在编写程序时才确定，比如你定义一个类，类名可以取长取短，所以在没编译前，大小不固定，编译后，通过utf-8编码，就可以知道其长度。</p><h4 id="3、访问标识"><a href="#3、访问标识" class="headerlink" title="3、访问标识"></a>3、访问标识</h4><p><strong>访问标识(access_flag、访问标志、访问标记)</strong></p><ul><li><p>在常量池后，紧跟着访问标记。该标记使用两个字节表示，用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否定义为 abstract 类型；如果是类的话，是否被声明为 final 等。各种访问标记如下所示：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417165620.png"></p></li><li><p>类的访问权限通常为 ACC_ 开头的常量。</p></li><li><p>每一种类型的表示都是通过设置访问标记的32位中的特定位来实现的。比如，若是public final的类，则该标记为ACC_PUBLIC | ACC_FINAL。</p></li><li><p>使用ACC_SUPER可以让类更准确地定位到父类的方法super.method(),现代编译器都会设置并且使用这个标记。</p></li></ul><h4 id="4、类索引、父类索引、接口索引集合"><a href="#4、类索引、父类索引、接口索引集合" class="headerlink" title="4、类索引、父类索引、接口索引集合"></a>4、类索引、父类索引、接口索引集合</h4><ul><li><p>在访问标记后，会指定该类的类别、父类类别以及实现的接口，格式如下：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417165738.png"></p></li><li><p>这三项数据来确定这个类的继承关系。</p><ul><li>类索引用于确定这个类的全限定名</li><li>父类索引用于确定这个类的父类的全限定名。由于 Java语言不允许多重继承，所以父类索引只有一个，除了java.lang.Object 之外，所有的Java类都有父类，因此除了java.lang.Object 外，所有Java类的父类索引都不为 0。</li><li>接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按 implements 语句（如果这个类本身是一个接口，则应当是 extends 语句）后的接口顺序从左到右排列在接口索引集合中。</li></ul></li><li><p>this_class（类索引）</p><ul><li>字节无符号整数，指向常量池的索引。它提供了类的全限定名,如com/kk/java1/Demo。this_class的值必须是对常量池表中某项的一个有效索引值。常量池在这个索引处的成员必须为CONSTANT_Class_info类型结构体，该结构体表示这个class文件所定义的类或接口。</li></ul></li><li><p>super_class （父类索引）</p><ul><li>2字节无符号整数，指向常量池的索引。它提供了当前类的父类的全限定名。如果我们没有继承任何类，其默认继承的是java/lang/Object类。同时，由于Java不支持多继承，所以其父类只有一个。</li><li>superclass指向的父类不能是final。</li></ul></li><li><p>interfaces</p><ul><li>指向常量池索引集合，它提供了一个符号引用到所有已实现的接口</li><li>由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引，表示接口的每个索引也是一个指向常量池的CONSTANT_Class (当然这里就必须是接口，而不是类)。</li><li>interfaces_count (接口计数器)<ul><li>interfaces_count项的值表示当前类或接口的直接超接口数量。</li></ul></li><li>interfaces [](接口索引集合)<ul><li>interfaces []中每个成员的值必须是对常量池表中某项的有效索引值，它的长度为 interfaces_count。 每个成员 interfaces[i]必须为 CONSTANT_Class_info结构，其中 0 &lt;= i &lt; interfaces_count。在 interfaces[]中，各成员所表示的接口顺序和对应的源代码中给定的接口顺序（从左至右）一样，即<code> interfaces[0]对应的是源代码中最左边的接口。</code></li></ul></li></ul></li></ul><h4 id="5、字段表集合"><a href="#5、字段表集合" class="headerlink" title="5、字段表集合"></a>5、字段表集合</h4><h5 id="1、字段计数器"><a href="#1、字段计数器" class="headerlink" title="1、字段计数器"></a>1、字段计数器</h5><ul><li>fields_count的值表示当前class文件fields表的成员个数。使用两个字节来表示。</li><li>fields表中每个成员都是一个field_info结构，用于表示该类或接口所声明的所有类字段或者实例字段，不包括方法内部声明的变量，也不包括从父类或父接口继承的那些字段</li></ul><h5 id="2、字段表，fields"><a href="#2、字段表，fields" class="headerlink" title="2、字段表，fields []"></a>2、字段表，fields []</h5><ul><li><p>fields表中的每个成员都必须是一个fields_info结构的数据项，用于表示当前类或接口中某个字段的完整描述。</p></li><li><p>一个字段的信息包括如下这些信息。这些信息中，<code>各个修饰符都是布尔值，要么有，要么没有</code>。</p><ul><li>作用域（public、private、protected修饰符）</li><li>是实例变量还是类变量（static修饰符）</li><li>可变性（final）</li><li>并发可见性（volatile修饰符，是否强制从主内存读写）</li><li>可否序列化（transient修饰符）</li><li>字段数据类型（基本数据类型、对象、数组）</li><li>字段名称</li></ul></li><li><p>字段表结构</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417171658.png"></p></li></ul><h4 id="6、方法表集合"><a href="#6、方法表集合" class="headerlink" title="6、方法表集合"></a>6、方法表集合</h4><h5 id="1、方法计数器"><a href="#1、方法计数器" class="headerlink" title="1、方法计数器"></a>1、方法计数器</h5><ul><li>methods_count的值表示当前class文件methods表的成员个数。使用两个字节来表示。</li><li>methods 表中每个成员都是一个method_info结构。</li></ul><h5 id="2、方法表"><a href="#2、方法表" class="headerlink" title="2、方法表"></a>2、方法表</h5><ul><li><p>methods表中的每个成员都必须是一个method_info结构，用于表示当前类或接口中某个方法的完整描述。如果某个method_info结构的access_flags项既没有设置 ACC_NATIVE 标志也没有设置ACC_ABSTRACT标志，那么该结构中也应包含实现这个方法所用的Java虚拟机指令。</p></li><li><p>method_info结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法和类或接口初始化方法</p></li><li><p>方法表的结构实际跟字段表是一样的，方法表结构如下：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417211001.png"></p></li></ul><h4 id="7、属性表集合"><a href="#7、属性表集合" class="headerlink" title="7、属性表集合"></a>7、属性表集合</h4><h5 id="1、属性计数器"><a href="#1、属性计数器" class="headerlink" title="1、属性计数器"></a>1、属性计数器</h5><p>attributes_count的值表示当前class文件属性表的成员个数。属性表中每一项都是一个attribute_info结构。</p><h5 id="2、属性表"><a href="#2、属性表" class="headerlink" title="2、属性表"></a>2、属性表</h5><ul><li><p>ConstantValue 属性</p><ul><li><p>ConstantValue 属性表示一个常量字段的值。位于 field_info结构的属性表中。</p></li><li><pre><code class="java">ConstantValue_attribute {    u2 attribute_name_index;    u4 attribute_length;    u2 constantvalue_index;//字段值在常量池中的索引，常量池在该索引处的项给出该属性表示的常量值。（例如，值是long型的，在常量池中便是CONSTANT_Long）}<pre class="line-numbers language-none"><code class="language-none">- Deprecated 属性  - Deprecated 属性是在 JDK 1.1 为了支持注释中的关键词@deprecated 而引入的。    ```java    Deprecated_attribute {        u2 attribute_name_index;         u4 attribute_length;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li><li><p>Code 属性</p><ul><li><p>Code属性就是存放方法体里面的代码。但是，并非所有方法表都有Code属性。像接口或者抽象方法，他们没有具体的方法体，因此也就不会有Code属性了。<br>Code属性表的结构,如下图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417213251.png"></p><p>可以看到：Code属性表的前两项跟属性表是一致的，即Code属性表遵循属性表的结构，后面那些则是他自定义的结构。</p></li></ul></li><li><p>InnerClasses 属性</p><ul><li>为了方便说明特别定义一个表示类或接口的 Class 格式为 C。如果 C 的常量池中包含某个CONSTANT_Class_info 成员，且这个成员所表示的类或接口不属于任何一个包，那么 C 的ClassFile 结构的属性表中就必须含有对应的 InnerClasses 属性。InnerClasses 属性是在 JDK 1.1 中为了支持内部类和内部接口而引入的,位于 ClassFile结构的属性表。</li></ul></li><li><p>LineNumberTable 属性</p><ul><li><p>LineNumberTable 属性是可选变长属性，位于 Code结构的属性表。</p></li><li><p>LineNumberTable属性是用来描述Java源码行号与字节码行号之间的对应关系。这个属性可以用来在调试的时候定位代码执行的行数。</p></li><li><p>start_pc,即字节码行号;line_number，即Java源代码行号。</p></li><li><p>在 Code 属性的属性表中,LineNumberTable 属性可以按照任意顺序出现，此外，多个 LineNumberTable属性可以共同表示一个行号在源文件中表示的内容，即 LineNumberTable 属性不需要与源文件的行一一对应。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417220235.png"></p></li></ul></li><li><p>LocalVariableTable 属性</p><ul><li><p> LocalVariableTable 是可选变长属性，位于 Code属性的属性表中。它被调试器用于确定方法在执行过程中局部变量的信息。在 Code 属性的属性表中，LocalVariableTable 属性可以按照任意顺序出现。 Code 属性中的每个局部变量最多只能有一个 LocalVariableTable 属性。</p></li><li><p>start pc + length表示这个变量在字节码中的生命周期起始和结束的偏移位置（this生命周期从头0到结尾）</p></li><li><p>index就是这个变量在局部变量表中的槽位（槽位可复用）</p></li><li><p>name就是变量名称</p></li><li><p>Descriptor表示局部变量类型描述</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417220124.png"></p></li></ul></li><li><p>Signature 属性</p><ul><li>Signature 属性是可选的定长属性，位于 ClassFile， field_info<br>或 method_info结构的属性表中。在 Java 语言中，任何类、 接口、 初始化方法或成员的泛型签名如果包含了类型变量（ Type Variables） 或参数化类型（ Parameterized Types），则 Signature 属性会为它记录泛型签名信息。</li></ul></li><li><p>SourceFile属性</p><ul><li><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417213613.png"></li></ul></li><li><p>其他属性</p><ul><li>Java虚拟机中预定义的属性有20多个，这里就不一一介绍了，通过上面几个属性的介绍，只要领会其精髓，其他属性的解读也是易如反掌。</li></ul></li></ul><h3 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h3><h2 id="四、javap"><a href="#四、javap" class="headerlink" title="四、javap"></a>四、javap</h2><p><strong>oracle官方的反解析工具：javap</strong></p><h3 id="1、解析字节码的作用"><a href="#1、解析字节码的作用" class="headerlink" title="1、解析字节码的作用"></a>1、解析字节码的作用</h3><p>通过反编译生成的字节码文件，我们可以深入的了解java代码的工作机制。但是，自己分析类文件结构太麻烦了！除了使用第三方的jclasslib工具之外，oracle官方也提供了工具：javap。</p><p>javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（字节码指令）、局部变量表、异常表和代码行偏移量映射表、常量池等信息。</p><p>通过局部变量表，我们可以查看局部变量的作用域范围、所在槽位等信息，甚至可以看到槽位复用等信息。</p><h3 id="2、javac-g操作"><a href="#2、javac-g操作" class="headerlink" title="2、javac -g操作"></a>2、javac -g操作</h3><p>解析字节码文件得到的信息中，有些信息（如局部变量表、指令和代码行偏移量映射表、常量池中方法的参数名称等等）需要在使用javac编译成class文件时，指定参数才能输出。</p><p>比如，你直接javac xx.java，就不会在生成对应的局部变量表等信息，如果你使用<code>javac -g xx.java</code>就可以生成所有相关信息了。如果你使用的eclipse或IDEA，则默认情况下，eclipse、IDEA在编译时会帮你生成局部变量表、指令和代码行偏移量映射表等信息的。</p><h3 id="3、javap的用法"><a href="#3、javap的用法" class="headerlink" title="3、javap的用法"></a>3、javap的用法</h3><p>javap的用法格式：<br><strong>javap <options> <classes></classes></options></strong></p><p>其中，classes就是你要反编译的class文件。</p><p>在命令行中直接输入javap或javap -help可以看到javap的options有如下选项：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/jvm/20220417224639.png"></p><p> -help  –help  -?      输出此用法消息<br> -version               版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。<br> -public                仅显示公共类和成员<br> -protected             显示受保护的/公共类和成员<br> -p  -private           显示所有类和成员<br> -package               显示程序包/受保护的/公共类 和成员 (默认)<br> -sysinfo               显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列,源文件名)<br> -constants             显示静态最终常量</p><p> -s                     输出内部类型签名<br> -l                     输出行号和本地变量表<br> -c                     对代码进行反汇编<br> -v  -verbose           输出附加信息（包括行号、本地变量表，反汇编等详细信息）</p><p> -classpath <path>      指定查找用户类文件的位置<br> -cp <path>             指定查找用户类文件的位置<br> -bootclasspath <path>  覆盖引导类文件的位置</path></path></path></p><p><strong>一般常用的是-v -l -c三个选项。</strong></p><p>javap -l 会输出行号和本地变量表信息。<br>javap -c 会对当前class字节码进行反编译生成汇编代码。<br>javap -v classxx 除了包含-c内容外，还会输出行号、局部变量表信息、常量池等信息。</p><h3 id="4、使用举例"><a href="#4、使用举例" class="headerlink" title="4、使用举例"></a>4、使用举例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNTS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"www.mykkto.com"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        info <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">JavapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">JavapTest</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">methodPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">char</span> <span class="token function">showGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>希望输出的信息比较完整的话，使用如下操作：</p><p><strong>javac JavapTest.java</strong></p><p><strong>javap -v -p JavapTest.class</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">J:<span class="token punctuation">\</span><span class="token number">0</span> 大厂素材<span class="token punctuation">\</span>jvm<span class="token punctuation">\</span>00Test<span class="token operator">&gt;</span>javac JavapTest.javaJ:<span class="token punctuation">\</span><span class="token number">0</span> 大厂素材<span class="token punctuation">\</span>jvm<span class="token punctuation">\</span>00Test<span class="token operator">&gt;</span>javap -v -p JavapTest.classClassfile /J:/0 大厂素材/jvm/00Test/JavapTest.class  Last modified <span class="token number">2022</span>-4-17<span class="token punctuation">;</span> size <span class="token number">1141</span> bytes  MD5 checksum 16833cad2e0187d03ccf1baecaa23808  Compiled from <span class="token string">"JavapTest.java"</span>public class com.kk.test.JavapTest  minor version: <span class="token number">0</span>  major version: <span class="token number">52</span>  flags: ACC_PUBLIC, ACC_SUPERConstant pool:   <span class="token comment">#1 = Methodref          #16.#42        // java/lang/Object."&lt;init&gt;":()V</span>   <span class="token comment">#2 = String             #43            // java</span>   <span class="token comment">#3 = Fieldref           #15.#44        // com/kk/test/JavapTest.info:Ljava/lang/String;</span>   <span class="token comment">#4 = Fieldref           #15.#45        // com/kk/test/JavapTest.flag:Z</span>   <span class="token comment">#5 = Fieldref           #15.#46        // com/kk/test/JavapTest.num:I</span>   <span class="token comment">#6 = Fieldref           #15.#47        // com/kk/test/JavapTest.gender:C</span>   <span class="token comment">#7 = Fieldref           #48.#49        // java/lang/System.out:Ljava/io/PrintStream;</span>   <span class="token comment">#8 = Class              #50            // java/lang/StringBuilder</span>   <span class="token comment">#9 = Methodref          #8.#42         // java/lang/StringBuilder."&lt;init&gt;":()V</span>  <span class="token comment">#10 = Methodref          #8.#51         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>  <span class="token comment">#11 = Methodref          #8.#52         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span>  <span class="token comment">#12 = Methodref          #8.#53         // java/lang/StringBuilder.toString:()Ljava/lang/String;</span>  <span class="token comment">#13 = Methodref          #54.#55        // java/io/PrintStream.println:(Ljava/lang/String;)V</span>  <span class="token comment">#14 = String             #56            // www.mykkto.com</span>  <span class="token comment">#15 = Class              #57            // com/kk/test/JavapTest</span>  <span class="token comment">#16 = Class              #58            // java/lang/Object</span>  <span class="token comment">#17 = Utf8               num</span>  <span class="token comment">#18 = Utf8               I</span>  <span class="token comment">#19 = Utf8               flag</span>  <span class="token comment">#20 = Utf8               Z</span>  <span class="token comment">#21 = Utf8               gender</span>  <span class="token comment">#22 = Utf8               C</span>  <span class="token comment">#23 = Utf8               info</span>  <span class="token comment">#24 = Utf8               Ljava/lang/String;</span>  <span class="token comment">#25 = Utf8               COUNTS</span>  <span class="token comment">#26 = Utf8               ConstantValue</span>  <span class="token comment">#27 = Integer            1</span>  <span class="token comment">#28 = Utf8               &lt;init&gt;</span>  <span class="token comment">#29 = Utf8               ()V</span>  <span class="token comment">#30 = Utf8               Code</span>  <span class="token comment">#31 = Utf8               LineNumberTable</span>  <span class="token comment">#32 = Utf8               (Z)V</span>  <span class="token comment">#33 = Utf8               methodPrivate</span>  <span class="token comment">#34 = Utf8               getNum</span>  <span class="token comment">#35 = Utf8               (I)I</span>  <span class="token comment">#36 = Utf8               showGender</span>  <span class="token comment">#37 = Utf8               ()C</span>  <span class="token comment">#38 = Utf8               showInfo</span>  <span class="token comment">#39 = Utf8               &lt;clinit&gt;</span>  <span class="token comment">#40 = Utf8               SourceFile</span>  <span class="token comment">#41 = Utf8               JavapTest.java</span>  <span class="token comment">#42 = NameAndType        #28:#29        // "&lt;init&gt;":()V</span>  <span class="token comment">#43 = Utf8               java</span>  <span class="token comment">#44 = NameAndType        #23:#24        // info:Ljava/lang/String;</span>  <span class="token comment">#45 = NameAndType        #19:#20        // flag:Z</span>  <span class="token comment">#46 = NameAndType        #17:#18        // num:I</span>  <span class="token comment">#47 = NameAndType        #21:#22        // gender:C</span>  <span class="token comment">#48 = Class              #59            // java/lang/System</span>  <span class="token comment">#49 = NameAndType        #60:#61        // out:Ljava/io/PrintStream;</span>  <span class="token comment">#50 = Utf8               java/lang/StringBuilder</span>  <span class="token comment">#51 = NameAndType        #62:#63        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>  <span class="token comment">#52 = NameAndType        #62:#64        // append:(I)Ljava/lang/StringBuilder;</span>  <span class="token comment">#53 = NameAndType        #65:#66        // toString:()Ljava/lang/String;</span>  <span class="token comment">#54 = Class              #67            // java/io/PrintStream</span>  <span class="token comment">#55 = NameAndType        #68:#69        // println:(Ljava/lang/String;)V</span>  <span class="token comment">#56 = Utf8               www.mykkto.com</span>  <span class="token comment">#57 = Utf8               com/kk/test/JavapTest</span>  <span class="token comment">#58 = Utf8               java/lang/Object</span>  <span class="token comment">#59 = Utf8               java/lang/System</span>  <span class="token comment">#60 = Utf8               out</span>  <span class="token comment">#61 = Utf8               Ljava/io/PrintStream;</span>  <span class="token comment">#62 = Utf8               append</span>  <span class="token comment">#63 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span>  <span class="token comment">#64 = Utf8               (I)Ljava/lang/StringBuilder;</span>  <span class="token comment">#65 = Utf8               toString</span>  <span class="token comment">#66 = Utf8               ()Ljava/lang/String;</span>  <span class="token comment">#67 = Utf8               java/io/PrintStream</span>  <span class="token comment">#68 = Utf8               println</span>  <span class="token comment">#69 = Utf8               (Ljava/lang/String;)V</span><span class="token punctuation">{</span>  private int num<span class="token punctuation">;</span>    descriptor: I    flags: ACC_PRIVATE  boolean flag<span class="token punctuation">;</span>    descriptor: Z    flags:  protected char gender<span class="token punctuation">;</span>    descriptor: C    flags: ACC_PROTECTED  public java.lang.String info<span class="token punctuation">;</span>    descriptor: Ljava/lang/String<span class="token punctuation">;</span>    flags: ACC_PUBLIC  public static final int COUNTS<span class="token punctuation">;</span>    descriptor: I    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL    ConstantValue: int <span class="token number">1</span>  public com.kk.test.JavapTest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags: ACC_PUBLIC    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span>: aload_0         <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object."&lt;init&gt;":()V</span>         <span class="token number">4</span>: aload_0         <span class="token number">5</span>: ldc           <span class="token comment">#2                  // String java</span>         <span class="token number">7</span>: putfield      <span class="token comment">#3                  // Field info:Ljava/lang/String;</span>        <span class="token number">10</span>: <span class="token builtin class-name">return</span>      LineNumberTable:        line <span class="token number">16</span>: <span class="token number">0</span>        line <span class="token number">14</span>: <span class="token number">4</span>        line <span class="token number">18</span>: <span class="token number">10</span>  private com.kk.test.JavapTest<span class="token punctuation">(</span>boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span>Z<span class="token punctuation">)</span>V    flags: ACC_PRIVATE    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token number">0</span>: aload_0         <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object."&lt;init&gt;":()V</span>         <span class="token number">4</span>: aload_0         <span class="token number">5</span>: ldc           <span class="token comment">#2                  // String java</span>         <span class="token number">7</span>: putfield      <span class="token comment">#3                  // Field info:Ljava/lang/String;</span>        <span class="token number">10</span>: aload_0        <span class="token number">11</span>: iload_1        <span class="token number">12</span>: putfield      <span class="token comment">#4                  // Field flag:Z</span>        <span class="token number">15</span>: <span class="token builtin class-name">return</span>      LineNumberTable:        line <span class="token number">19</span>: <span class="token number">0</span>        line <span class="token number">14</span>: <span class="token number">4</span>        line <span class="token number">20</span>: <span class="token number">10</span>        line <span class="token number">21</span>: <span class="token number">15</span>  private void methodPrivate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags: ACC_PRIVATE    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span>: <span class="token builtin class-name">return</span>      LineNumberTable:        line <span class="token number">24</span>: <span class="token number">0</span>  int getNum<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span>I<span class="token punctuation">)</span>I    flags:    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token number">0</span>: aload_0         <span class="token number">1</span>: getfield      <span class="token comment">#5                  // Field num:I</span>         <span class="token number">4</span>: iload_1         <span class="token number">5</span>: iadd         <span class="token number">6</span>: ireturn      LineNumberTable:        line <span class="token number">26</span>: <span class="token number">0</span>  protected char showGender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>C    flags: ACC_PROTECTED    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span>: aload_0         <span class="token number">1</span>: getfield      <span class="token comment">#6                  // Field gender:C</span>         <span class="token number">4</span>: ireturn      LineNumberTable:        line <span class="token number">29</span>: <span class="token number">0</span>  public void showInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags: ACC_PUBLIC    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span>: bipush        <span class="token number">10</span>         <span class="token number">2</span>: istore_1         <span class="token number">3</span>: getstatic     <span class="token comment">#7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>         <span class="token number">6</span>: new           <span class="token comment">#8                  // class java/lang/StringBuilder</span>         <span class="token number">9</span>: dup        <span class="token number">10</span>: invokespecial <span class="token comment">#9                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span>        <span class="token number">13</span>: aload_0        <span class="token number">14</span>: getfield      <span class="token comment">#3                  // Field info:Ljava/lang/String;</span>        <span class="token number">17</span>: invokevirtual <span class="token comment">#10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>        <span class="token number">20</span>: iload_1        <span class="token number">21</span>: invokevirtual <span class="token comment">#11                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span>        <span class="token number">24</span>: invokevirtual <span class="token comment">#12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>        <span class="token number">27</span>: invokevirtual <span class="token comment">#13                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>        <span class="token number">30</span>: <span class="token builtin class-name">return</span>      LineNumberTable:        line <span class="token number">32</span>: <span class="token number">0</span>        line <span class="token number">33</span>: <span class="token number">3</span>        line <span class="token number">34</span>: <span class="token number">30</span>  static <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags: ACC_STATIC    Code:      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">0</span>         <span class="token number">0</span>: ldc           <span class="token comment">#14                 // String www.mykkto.com</span>         <span class="token number">2</span>: astore_0         <span class="token number">3</span>: <span class="token builtin class-name">return</span>      LineNumberTable:        line <span class="token number">11</span>: <span class="token number">0</span>        line <span class="token number">12</span>: <span class="token number">3</span><span class="token punctuation">}</span>SourceFile: <span class="token string">"JavapTest.java"</span>J:<span class="token punctuation">\</span><span class="token number">0</span> 大厂素材<span class="token punctuation">\</span>jvm<span class="token punctuation">\</span>00Test<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>1、通过javap命令可以查看一个java类反汇编得到的Class文件版本号、常量池、访问标识、变量表、指令代码行号表等等信息。不显示类索引、父类索引、接口索引集合、<clinit>()、<init>()等结构</init></clinit></p><p>2、通过对前面例子代码反汇编文件的简单分析，可以发现，一个方法的执行通常会涉及下面几块内存的操作：<br>（1）java栈中：局部变量表、操作数栈。<br>（2）java堆。通过对象的地址引用去操作。<br>（3）常量池。<br>（4）其他如帧数据区、方法区的剩余部分等情况，测试中没有显示出来，这里说明一下。</p><p>3、平常，我们比较关注的是java类中每个方法的反汇编中的指令操作过程，这些指令都是顺序执行的，可以参考官方文档查看每个指令的含义，很简单：<br><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html</a></p><h2 id="五、字节码指令集与解析概述"><a href="#五、字节码指令集与解析概述" class="headerlink" title="五、字节码指令集与解析概述"></a>五、字节码指令集与解析概述</h2><p>Java字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令。</p><p>Java 虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需参数（称为操作数，Operands）而构成。由于 Java 虚拟机采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。</p><p>由于限制了 Java 虚拟机操作码的长度为一个字节（即 0～255），这意味着指令集的操作码总数不可能超过 256 条。</p><p>官方文档：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html</a></p><p>熟悉虚拟机的指令对于动态字节码生成、反编译Class文件、Class文件修补都有着非常重要的价值。因此，阅读字节码作为了解 Java 虚拟机的基础技能，需要熟练掌握常见指令。</p><h3 id="1、字节码与数据类型"><a href="#1、字节码与数据类型" class="headerlink" title="1、字节码与数据类型"></a>1、字节码与数据类型</h3><p>在Java虚拟机的指令集中，大多数的指令都包含了其操作所对应的数据类型信息。例如，iload指令用于从局部变量表中加载int型的数据到操作数栈中，而fload指令加载的则是float类型的数据。</p><p>对于大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：</p><ul><li>i代表对int类型的数据操作</li><li>l代表long类型的数据操作</li><li>s代表short类型的数据操作</li><li>b代表byte类型的数据操作</li><li>c代表char类型的数据操作</li><li>f代表float类型的数据操作</li><li>d代表double类型的数据操作</li></ul><p>也有一些指令的助记符中没有明确地指明操作类型的字母，如arraylength指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象。</p><p>还有另外一些指令，如无条件跳转指令goto则是与数据类型无关的。</p><p>大部分的指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型。编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。与之类似，在处理boolean、byte、short和char类型的数组时，也会转换为使用对应的int类型的字节码指令来处理。因此，大多数对于boolean、byte、short和char类型数据的操作，实际上都是使用相应的int类型作为运算类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> b1 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、指令分类"><a href="#2、指令分类" class="headerlink" title="2、指令分类"></a>2、指令分类</h3><p>由于完全介绍和学习这些指令需要花费大量时间。为了让大家能够更快地熟悉和了解这些基本指令，这里将JVM中的字节码指令集按用途大致分成 9 类。</p><ul><li>加载与存储指令</li><li>算术指令</li><li>类型转换指令</li><li>对象的创建与访问指令</li><li>方法调用与返回指令</li><li>操作数栈管理指令</li><li>控制转移指令</li><li>异常处理指令</li><li>同步控制指令</li></ul><p>(说在前面)在做值相关操作时：</p><ul><li>一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用中等取得数据，这些数据（可能是值，可能是对象的引用）被压入操作数栈。</li><li>一个指令，也可以从操作数栈中取出一到多个值（pop多次），完成赋值、加减乘除、方法传参、系统调用等等操作。</li></ul><h2 id="六、★-字节码指令"><a href="#六、★-字节码指令" class="headerlink" title="六、★ 字节码指令"></a>六、★ 字节码指令</h2><h3 id="1、加载与存储指令"><a href="#1、加载与存储指令" class="headerlink" title="1、加载与存储指令"></a>1、加载与存储指令</h3><h3 id="2、算术指令"><a href="#2、算术指令" class="headerlink" title="2、算术指令"></a>2、算术指令</h3><h3 id="3、类型转换指令"><a href="#3、类型转换指令" class="headerlink" title="3、类型转换指令"></a>3、类型转换指令</h3><h3 id="4、对象的创建与访问指令"><a href="#4、对象的创建与访问指令" class="headerlink" title="4、对象的创建与访问指令"></a>4、对象的创建与访问指令</h3><h3 id="5、方法调用与返回指令"><a href="#5、方法调用与返回指令" class="headerlink" title="5、方法调用与返回指令"></a>5、方法调用与返回指令</h3><h3 id="6、操作数栈管理指令"><a href="#6、操作数栈管理指令" class="headerlink" title="6、操作数栈管理指令"></a>6、操作数栈管理指令</h3><h3 id="7、控制转移指令"><a href="#7、控制转移指令" class="headerlink" title="7、控制转移指令"></a>7、控制转移指令</h3><h3 id="8、异常处理指令"><a href="#8、异常处理指令" class="headerlink" title="8、异常处理指令"></a>8、异常处理指令</h3><h3 id="9、同步控制指令"><a href="#9、同步控制指令" class="headerlink" title="9、同步控制指令"></a>9、同步控制指令</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="高阶篇" scheme="https://mykkto.github.io/categories/%E9%AB%98%E9%98%B6%E7%AF%87/"/>
    
    
    <category term="jvm" scheme="https://mykkto.github.io/tags/jvm/"/>
    
    <category term="字节码" scheme="https://mykkto.github.io/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>历来面基题【长期】</title>
    <link href="https://mykkto.github.io/posts/c1193e28.html"/>
    <id>https://mykkto.github.io/posts/c1193e28.html</id>
    <published>2022-04-09T03:06:12.000Z</published>
    <updated>2022-11-12T15:07:08.031Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p>初稿没想好怎么定义，把最近遇到的面试题大概梳理下（可能比较潦草，暂时没花时间排版）</p><h2 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h2><p>一些题目会贴出问题方案，部分暂时没有归纳，不过在此站都能搜索得到，提下</p><p>本站采用<strong>全文搜索</strong>，可以方便的检索到问题以及方案。</p><ul><li>数据库三范式（收集需求和怎么设计数据库的）</li><li>Spring、SpringBoot、SpringCloud区别，展开<ul><li>Spring特性用法，事务，jdbc模板之类</li><li>SpringBoot零配置……可以的话自定义配置聊下</li><li>SpringCloud分两部分说（netfix,alibaba），每个组件用法说下，可以的话原理展开下</li></ul></li><li>Seata ID(1)+组件(3)扩展说明，用法及区别<ul><li>这边ID用到的雪花算法，懂的话可以展开，如果会写的话，说出实现算法的原理最佳，以及雪花的缺陷（时钟问题），解决方案</li><li>三个组件原理本站也有写</li></ul></li><li>数据库优化，索引失效哪些情况</li><li>数据库，物化视图<ul><li>物化视图与普通的视图相比的区别是物化视图是建立的副本，它类似于一张表，需要占用存储空间。而对一个物化视图查询的执行效率与查询一个表是一样的。</li><li>其实就是存在物理内存的副本表，但是性能和视图一样</li></ul></li><li>最近项目描述及其展开说明（这个不用多说了吧）</li><li>同步集合用过哪些，说明，以及分布式锁说明<ul><li>这边之前想展开AQS说明但是讲了很多了口干舌燥的，水也不够喝了</li><li>一方面对底层也是大概了解，FIFO内的Node深入API的话未必答的全面</li><li>分布锁可以分为三个实现展开（lua、redission、zookeeper），lua又分为单体和集群都可以展开说明</li><li>lua 集群实现分布式锁，可以聊下redlock，redission底层就是…..</li><li>redission 底层自旋的看门口狗(watchdog)机制可以说下</li></ul></li><li>es用过说下，倒排索引机制原理说下</li><li>多线程扩展聊了CAS<ul><li>基本介绍下CAS，优缺点，缺点方案解决</li><li>几种原子类说明，跟volatile可见性比较</li><li>可以的话原子类原理展开，LongAdder快的原因</li></ul></li><li>Synchronized用过吗<ul><li>可以的话说明下用法，然后展开下锁升级（无锁-偏锁-轻锁-重锁）</li><li>可以提下JUC中的读写锁（ReentrantReadWriteLock），大概说下读写四种情况以及锁降级</li><li>自述完读写锁，可以提下更高效的邮戳锁（StampedLock），优缺点说下，特点说下（名字就可以看出是不重入锁）</li></ul></li><li>redis击穿、穿透、雪崩<ul><li>说下是什么，解决方案</li><li>布隆过滤器实现原理</li></ul></li></ul><h2 id="参考文档-↓"><a href="#参考文档-↓" class="headerlink" title="参考文档 ↓"></a>参考文档 ↓</h2><p>物化视图：<a href="https://baijiahao.baidu.com/s?id=1709212821591222829&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1709212821591222829&amp;wfr=spider&amp;for=pc</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/bigdata/flink/202206271903615.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试题" scheme="https://mykkto.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="原理" scheme="https://mykkto.github.io/tags/%E5%8E%9F%E7%90%86/"/>
    
    <category term="java" scheme="https://mykkto.github.io/tags/java/"/>
    
    <category term="分布式" scheme="https://mykkto.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="数据库" scheme="https://mykkto.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ShardingSphere分库分表【作废】</title>
    <link href="https://mykkto.github.io/posts/97bfaea3.html"/>
    <id>https://mykkto.github.io/posts/97bfaea3.html</id>
    <published>2022-04-09T01:01:02.000Z</published>
    <updated>2022-11-12T15:07:08.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、学英语"><a href="#1、学英语" class="headerlink" title="1、学英语"></a>1、学英语</h3><p>博主是个二流子，英语不会但又格外喜欢</p><p>ShardingSphere(塞腚-菲儿)【分片-球】、Proxy(普拉克谁)【代理】</p><h3 id="2、分库分表"><a href="#2、分库分表" class="headerlink" title="2、分库分表"></a>2、分库分表</h3><h4 id="1、什么是分库分表"><a href="#1、什么是分库分表" class="headerlink" title="1、什么是分库分表"></a>1、什么是分库分表</h4><p><strong>分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成，将数据大表拆分成若干数据表组成，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。</strong></p><h4 id="2、分库分表方式"><a href="#2、分库分表方式" class="headerlink" title="2、分库分表方式"></a>2、分库分表方式</h4><p><strong>分库分表</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220411233301.png"></p><p>分库分表包括<code>分库</code>和<code>分表</code>两个部分：</p><p>在生产中通常包括：<strong>垂直分库、水平分库、垂直分表、水平分表</strong>四种方式。</p><p><strong>水平拆分：</strong>根据表中数据的逻辑关系，将表中的数据按照某种条件拆分到多台数据库上。</p><p><strong>垂直拆分：</strong>把单一的表拆分成多个表，并分散到不同的数据库（主机）上</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220411233652.png"></p><h4 id="2-1-垂直分库"><a href="#2-1-垂直分库" class="headerlink" title="2.1 垂直分库"></a>2.1 垂直分库</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/%E5%9B%BE3png.png"></p><h4 id="2-2-垂直分表"><a href="#2-2-垂直分表" class="headerlink" title="2.2 垂直分表"></a>2.2 垂直分表</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/%E5%9B%BE2.png"></p><h4 id="2-3-水平分表"><a href="#2-3-水平分表" class="headerlink" title="2.3 水平分表"></a>2.3 水平分表</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220411232915.png"></p><h4 id="2-4-水平分库"><a href="#2-4-水平分库" class="headerlink" title="2.4 水平分库"></a>2.4 水平分库</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/%E5%9B%BE4.png"></p><h4 id="3、为什么要分库分表"><a href="#3、为什么要分库分表" class="headerlink" title="3、为什么要分库分表"></a>3、为什么要分库分表</h4><p>一般的机器（4核16G），单库的MySQL并发（QPS+TPS）超过了2k，系统基本就宕机了。最好是并发量控制在1k左右。</p><ul><li>QPS：每秒并发量</li><li>TPS：每秒吞吐量</li></ul><p>分库分表目的：解决高并发，和数据量大的问题。</p><h4 id="4、分库分表的场景"><a href="#4、分库分表的场景" class="headerlink" title="4、分库分表的场景"></a>4、分库分表的场景</h4><p>（1）在数据库设计时候考虑垂直分库和垂直分表 </p><p>（2）随着数据库数据量增加，不要马上考虑做水平切分，首<code>先考虑缓存处理，读写分离，使用索引</code>等等方式，如果这些方式不能根本解决问题了，</p><p>再考虑做水平分库和水平分表</p><h4 id="5、分库分表带来的问题"><a href="#5、分库分表带来的问题" class="headerlink" title="5、分库分表带来的问题"></a>5、分库分表带来的问题</h4><p>• 事务一致性问题</p><p>• 跨节点关联查询的问题 ( Join )。 </p><p>• 跨节点分页、分组、排序问题。 </p><p>• 存在多数据源管理的问题</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="二、Sharding-JDBC快速入门"><a href="#二、Sharding-JDBC快速入门" class="headerlink" title="二、Sharding-JDBC快速入门"></a>二、Sharding-JDBC快速入门</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="http://shardingsphere.apache.org/index_zh.html">http://shardingsphere.apache.org/index_zh.html</a></p><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>Sharding-JDBC是当当网研发的开源分布式数据库中间件，从3.0 开始Sharding-JDBC 被包含在Sharding-Sphere中，</p><p>之后该项目进入进入Apache孵化器，4.版本之后的版本为Apache版本。</p><p>定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><h4 id="Sharding-JDBC架构图："><a href="#Sharding-JDBC架构图：" class="headerlink" title="Sharding-JDBC架构图："></a><strong>Sharding-JDBC架构图：</strong></h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220412141303.png"></p><h4 id="Sharding-Proxy架构图："><a href="#Sharding-Proxy架构图：" class="headerlink" title="Sharding-Proxy架构图："></a><strong>Sharding-Proxy架构图：</strong></h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220412141632.png"></p><h4 id="Sharding-Jdbc混合架构："><a href="#Sharding-Jdbc混合架构：" class="headerlink" title="Sharding-Jdbc混合架构："></a>Sharding-Jdbc混合架构：</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220412142051.png"></p><p>ShardingSphere-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻量级 OLTP（连接事务处理） 应用；ShardingSphere-Proxy 提供静态入口以及异构语言的支持，适用于 OLAP（连接数据分析） 应用以及对分片数据库进行管理和运维的场景。</p><p>Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。</p><h4 id="与jdbc性能对比"><a href="#与jdbc性能对比" class="headerlink" title="与jdbc性能对比"></a>与jdbc性能对比</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413201213.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413201228.png"></p><h3 id="2、需求说明"><a href="#2、需求说明" class="headerlink" title="2、需求说明"></a>2、需求说明</h3><h4 id="1、案例一：水平分表"><a href="#1、案例一：水平分表" class="headerlink" title="1、案例一：水平分表"></a>1、案例一：水平分表</h4><p>手动创建两张表，t_order_1和t_order_2，这两张表是订单表，拆分后的表，通过Sharding-Jdbc向课程表插入数据，按照一定的分片规则，<strong>主键为偶数的进入t_order_1，另一部分数据进入t_order_2</strong>，通过Sharding-Jdbc 查询数据，根据 SQL语句的内容从t_order_1或t_order_2查询数据。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413232842.png"></p><h4 id="2、案例二、水平分库"><a href="#2、案例二、水平分库" class="headerlink" title="2、案例二、水平分库"></a>2、案例二、水平分库</h4><p>在案例一的基础上，扩展出两个数据库，根据 user_id </p><p>偶数入库，sharding_jdbc1</p><p>奇数入库，sharding_jdbc2</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413233510.png"></p><h4 id="3、案例三、垂直分库"><a href="#3、案例三、垂直分库" class="headerlink" title="3、案例三、垂直分库"></a>3、案例三、垂直分库</h4><p>按照业余去区分库</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220416204322.png"></p><h3 id="3、项目搭建"><a href="#3、项目搭建" class="headerlink" title="3、项目搭建"></a>3、项目搭建</h3><h4 id="1、技术选型"><a href="#1、技术选型" class="headerlink" title="1、技术选型"></a>1、技术选型</h4><p>springboot2.2.1+MybatisPlus+Sharding-JDBC+Druid连接池</p><p>阿里镜像：比较快</p><p><a href="https://start.aliyun.com/">https://start.aliyun.com/</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413200217.png"></p><p><strong>建表</strong></p><p>两张结构一样</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413214847.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>course_1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>course_1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程老师'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cstatus<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程状态'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>course_2<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>course_2<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程老师'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>cstatus<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程状态'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、建model"><a href="#2、建model" class="headerlink" title="2、建model"></a>2、建model</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413200115.png"></p><h4 id="3、导pom"><a href="#3、导pom" class="headerlink" title="3、导pom"></a>3、导pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0-RC1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、基础业务代码"><a href="#4、基础业务代码" class="headerlink" title="4、基础业务代码"></a>4、基础业务代码</h4><h5 id="1、entiry"><a href="#1、entiry" class="headerlink" title="1、entiry"></a>1、entiry</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>entiry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> cid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cstatus<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、mapper"><a href="#2、mapper" class="headerlink" title="2、mapper"></a>2、mapper</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CourseMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CourseMapper</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、扫描配置"><a href="#3、扫描配置" class="headerlink" title="3、扫描配置"></a>3、扫描配置</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.kk.shardingjdbc.entiry.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingjdbcApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">ShardingjdbcApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、写-application-properties"><a href="#5、写-application-properties" class="headerlink" title="5、写 application.properties"></a>5、写 application.properties</h4><h5 id="mysql-数据源-8-0的话"><a href="#mysql-数据源-8-0的话" class="headerlink" title="mysql 数据源 8.0的话"></a>mysql 数据源 8.0的话</h5><p>驱动包路径要加 <strong>cj</strong>，<code>com.mysql.cj.jdbc.Driver</code></p><p>url要加**时区[?serverTimezone=GMT%2B8]**，<code>jdbc:mysql://localhost:3306/sharding_jdbc1?serverTimezone=GMT%2B8</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># sharding分片策略</span><span class="token comment"># 配置数据源，给数据源起别名</span>spring.shardingsphere.datasource.names=s1<span class="token comment"># 配置数据源具体内容，包含连接池，驱动，地址，用户名和密码</span>spring.shardingsphere.datasource.s1.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.s1.driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name=com.mysql.jdbc.Driverspring.shardingsphere.datasource.s1.url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sharding_jdbc1spring.shardingsphere.datasource.s1.username=rootspring.shardingsphere.datasource.s1.password=a1b2c3<span class="token comment"># 指定 course 表分布情况，配置表在哪个数据库里面，表名称都是什么 s1.course_1 , s1.course_2</span><span class="token comment">#course 是表的前缀，  {1,2}是表的后缀，表示有course1 和 course2</span>spring.shardingsphere.sharding.tables.course.actual<span class="token punctuation">-</span>data<span class="token punctuation">-</span>nodes=s1.course_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span><span class="token comment"># 指定 以course为前缀的表里面主键 cid 。生成策略 SNOWFLAKE（雪花算法）</span>spring.shardingsphere.sharding.tables.course.key<span class="token punctuation">-</span>generator.column=cidspring.shardingsphere.sharding.tables.course.key<span class="token punctuation">-</span>generator.type=SNOWFLAKE<span class="token comment"># 指定分片策略，约定 cid值为偶数添加到表 course_1, 奇数到 course_2</span><span class="token comment">#course 是表的前缀</span><span class="token comment">#第二行的取模后，+1 操作防止取模后为 0</span>spring.shardingsphere.sharding.tables.course.table<span class="token punctuation">-</span>strategy.inline.sharding<span class="token punctuation">-</span>column=cidspring.shardingsphere.sharding.tables.course.table<span class="token punctuation">-</span>strategy.inline.algorithm<span class="token punctuation">-</span>expression=course_$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>cid % 2 + 1<span class="token punctuation">}</span><span class="token comment"># 打开sql 输出日志</span>spring.shardingsphere.props.sql.show=true<span class="token comment"># 解决一个实体对应两个表问题</span>spring.main.allow<span class="token punctuation">-</span>bean<span class="token punctuation">-</span>definition<span class="token punctuation">-</span>overriding=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、测试类"><a href="#6、测试类" class="headerlink" title="6、测试类"></a>6、测试类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>entiry<span class="token punctuation">.</span></span><span class="token class-name">Course</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">CourseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ShardingjdbcApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CourseMapper</span> courseMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Course</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCname <span class="token punctuation">(</span><span class="token string">"java"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setUserId <span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCstatus <span class="token punctuation">(</span><span class="token string">"Normal"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            courseMapper<span class="token punctuation">.</span>insert <span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span>eq <span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">,</span><span class="token number">721132131354411008L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Course</span> course <span class="token operator">=</span> courseMapper<span class="token punctuation">.</span>selectOne <span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>course <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220413224245.png"></p><h3 id="4、案例二"><a href="#4、案例二" class="headerlink" title="4、案例二"></a>4、案例二</h3><p>基于案例一扩展</p><h4 id="1、当前库结构"><a href="#1、当前库结构" class="headerlink" title="1、当前库结构"></a>1、当前库结构</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220414205043.png"></p><h4 id="2、application-properties"><a href="#2、application-properties" class="headerlink" title="2、application.properties"></a>2、application.properties</h4><pre class="line-numbers language-application.properties" data-language="application.properties"><code class="language-application.properties"># sharding分片策略# 配置数据源，给数据源起别名spring.shardingsphere.datasource.names=s1,s2# 配置数据源具体内容，包含连接池，驱动，地址，用户名和密码spring.shardingsphere.datasource.s1.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.s1.driver-class-name=com.mysql.cj.jdbc.Driverspring.shardingsphere.datasource.s1.url=jdbc:mysql://localhost:3306/sharding_jdbc1?serverTimezone=GMT%2B8spring.shardingsphere.datasource.s1.username=rootspring.shardingsphere.datasource.s1.password=a1b2c3# 配置数据源具体内容，包含连接池，驱动，地址，用户名和密码spring.shardingsphere.datasource.s2.type=com.alibaba.druid.pool.DruidDataSourcespring.shardingsphere.datasource.s2.driver-class-name=com.mysql.cj.jdbc.Driverspring.shardingsphere.datasource.s2.url=jdbc:mysql://localhost:3306/sharding_jdbc2?serverTimezone=GMT%2B8spring.shardingsphere.datasource.s2.username=rootspring.shardingsphere.datasource.s2.password=a1b2c3#---------------------------------------------------------------------------------------------------# 指定 course 表分布情况，配置表在哪个数据库里面，表名称都是什么 s1.course_1 , s1.course_2#course 是表的前缀，  {1,2}是表的后缀，表示有course1 和 course2#spring.shardingsphere.sharding.tables.course.actual-data-nodes=s1.course_$-&gt;{1..2}# 配置两个数据库spring.shardingsphere.sharding.tables.course.actual-data-nodes=s$-&gt;{1..2}.course_$-&gt;{1..2}# 指定 以course为前缀的表里面主键 cid 。生成策略 SNOWFLAKE（雪花算法）spring.shardingsphere.sharding.tables.course.key-generator.column=cidspring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE# 指定分片策略，约定 cid值为偶数添加到表 course_1, 奇数到 course_2#course 是表的前缀#第二行的取模后，+1 操作防止取模后为 0spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cidspring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$-&gt;{cid % 2 + 1}# 指定数据库分片策略#约定user_id是偶数添加m1，是奇数添加m2spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_idspring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=s$-&gt;{user_id % 2 + 1}# 打开sql 输出日志spring.shardingsphere.props.sql.show=true# 解决一个实体对应两个表问题spring.main.allow-bean-definition-overriding=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>entiry<span class="token punctuation">.</span></span><span class="token class-name">Course</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">CourseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ShardingjdbcApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CourseMapper</span> courseMapper<span class="token punctuation">;</span>    <span class="token comment">//----------------以下是水平分库测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Course</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setUserId <span class="token punctuation">(</span><span class="token number">0L</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCname <span class="token punctuation">(</span><span class="token string">"java"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCstatus <span class="token punctuation">(</span><span class="token string">"Normal"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            courseMapper<span class="token punctuation">.</span>insert <span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span>isNotNull <span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        courseMapper<span class="token punctuation">.</span>delete <span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//----------------以下是水平分表测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Course</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCname <span class="token punctuation">(</span><span class="token string">"java"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setUserId <span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            course<span class="token punctuation">.</span>setCstatus <span class="token punctuation">(</span><span class="token string">"Normal"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            courseMapper<span class="token punctuation">.</span>insert <span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span>eq <span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">,</span> <span class="token number">721132131354411008L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Course</span> course <span class="token operator">=</span> courseMapper<span class="token punctuation">.</span>selectOne <span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、案例三"><a href="#5、案例三" class="headerlink" title="5、案例三"></a>5、案例三</h3><h4 id="1、建表"><a href="#1、建表" class="headerlink" title="1、建表"></a>1、建表</h4><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><h2 id="三、Sharding-JDBC执行原理"><a href="#三、Sharding-JDBC执行原理" class="headerlink" title="三、Sharding-JDBC执行原理"></a>三、Sharding-JDBC执行原理</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><h3 id="2、-1"><a href="#2、-1" class="headerlink" title="2、"></a>2、</h3><h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><h3 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h3><h3 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h3><h2 id="四、分库分表分类"><a href="#四、分库分表分类" class="headerlink" title="四、分库分表分类"></a>四、分库分表分类</h2><h3 id="1、-1"><a href="#1、-1" class="headerlink" title="1、"></a>1、</h3><h3 id="2、-2"><a href="#2、-2" class="headerlink" title="2、"></a>2、</h3><h3 id="3、-1"><a href="#3、-1" class="headerlink" title="3、"></a>3、</h3><h3 id="4、-1"><a href="#4、-1" class="headerlink" title="4、"></a>4、</h3><h3 id="5、-1"><a href="#5、-1" class="headerlink" title="5、"></a>5、</h3><h2 id="五、Mysql主从搭建"><a href="#五、Mysql主从搭建" class="headerlink" title="五、Mysql主从搭建"></a>五、Mysql主从搭建</h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><strong><a href="/posts/d9c3bea0#toc-heading-4">路由：nacos高可用搭建</a></strong></p><h2 id="六、读写分离"><a href="#六、读写分离" class="headerlink" title="六、读写分离"></a>六、读写分离</h2><h3 id="1、-2"><a href="#1、-2" class="headerlink" title="1、"></a>1、</h3><h3 id="2、-3"><a href="#2、-3" class="headerlink" title="2、"></a>2、</h3><h3 id="3、-2"><a href="#3、-2" class="headerlink" title="3、"></a>3、</h3><h3 id="4、-2"><a href="#4、-2" class="headerlink" title="4、"></a>4、</h3><h3 id="5、-2"><a href="#5、-2" class="headerlink" title="5、"></a>5、</h3><h2 id="参考文档-↓"><a href="#参考文档-↓" class="headerlink" title="参考文档 ↓"></a>参考文档 ↓</h2><p><a href="https://blog.csdn.net/unique_perfect/article/details/116134490">https://blog.csdn.net/unique_perfect/article/details/116134490</a></p><p><a href="https://www.kuangstudy.com/zl/sharding#1369532356595126274">https://www.kuangstudy.com/zl/sharding#1369532356595126274</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="https://mykkto.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="ShardingSphere" scheme="https://mykkto.github.io/tags/ShardingSphere/"/>
    
    <category term="分库分表" scheme="https://mykkto.github.io/tags/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    
    <category term="jdbc" scheme="https://mykkto.github.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本语言基础</title>
    <link href="https://mykkto.github.io/posts/fafe363a.html"/>
    <id>https://mykkto.github.io/posts/fafe363a.html</id>
    <published>2022-04-03T15:17:13.000Z</published>
    <updated>2022-11-12T15:07:08.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>Lua是一种轻量、小巧的脚本语言，用标准C语言编写并以源代码形式开发。设计的目的是为了嵌入到其他应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><h3 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h3><p>跟其他语言进行比较，Lua有其自身的特点：</p><p>（1）轻量级</p><pre class="line-numbers language-none"><code class="language-none">Lua用标准C语言编写并以源代码形式开发，编译后仅仅一百余千字节，可以很方便的嵌入到其他程序中。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）可扩展</p><pre class="line-numbers language-none"><code class="language-none">Lua提供非常丰富易于使用的扩展接口和机制，由宿主语言(通常是C或C++)提供功能，Lua可以使用它们，就像内置的功能一样。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）支持面向过程编程和函数式编程</p><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><p>Lua在不同的系统中得到大量应用，场景的应用场景如下:</p><p>游戏开发、独立应用脚本、web应用脚本、扩展和数据库插件、系统安全上。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h3><p>在linux上安装Lua非常简单，只需要下载源码包并在终端解压、编译即可使用。</p><p>Lua的官网地址为:<code>https://www.lua.org</code></p><h3 id="2、下载并且解压"><a href="#2、下载并且解压" class="headerlink" title="2、下载并且解压"></a>2、下载并且解压</h3><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><pre class="line-numbers language-none"><code class="language-none">wget https://www.lua.org/ftp/lua-5.4.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、安装依赖"><a href="#2、安装依赖" class="headerlink" title="2、安装依赖"></a>2、安装依赖</h4><p>libreadline-dev依赖包，需要通过命令来进行安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y readline-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxvf lua-5.4.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、编译安装"><a href="#4、编译安装" class="headerlink" title="4、编译安装"></a>4、编译安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> lua-5.4.1<span class="token function">make</span> linux<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、验证"><a href="#5、验证" class="headerlink" title="5、验证"></a>5、验证</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">lua <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、Lua的语法"><a href="#三、Lua的语法" class="headerlink" title="三、Lua的语法"></a>三、Lua的语法</h2><h3 id="1、第一个程序"><a href="#1、第一个程序" class="headerlink" title="1、第一个程序"></a>1、第一个程序</h3><h4 id="1、进入控制台操作"><a href="#1、进入控制台操作" class="headerlink" title="1、进入控制台操作"></a>1、进入控制台操作</h4><p>1、用 <code>lua</code>进入</p><p>2、编写输出语句，print(“xxxx”)</p><p>3、ctrl+D 退出控制台</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404120524.png"></p><h4 id="2、lua-文件运行"><a href="#2、lua-文件运行" class="headerlink" title="2、lua 文件运行"></a>2、lua 文件运行</h4><p>1、创建 test.lua</p><p>2、编写语句，保存</p><p>3、运行</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404121521.png"></p><p>3、lua直接运行</p><p>1、创建 test2.lua</p><p>2、编写语句的时候前缀加上声明，可以直接运行</p><p><code>#!/usr/local/bin/lua</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404121846.png"></p><p>3、文件赋权限，运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> test2.lua./test2.lua<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404122053.png"></p><h3 id="2、注释"><a href="#2、注释" class="headerlink" title="2、注释"></a>2、注释</h3><h4 id="1、单行注释的语法为："><a href="#1、单行注释的语法为：" class="headerlink" title="1、单行注释的语法为："></a>1、单行注释的语法为：</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--注释内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、多行注释的语法为"><a href="#2、多行注释的语法为" class="headerlink" title="2、多行注释的语法为:"></a>2、多行注释的语法为:</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--[[注释内容注释内容--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、取消多行"><a href="#3、取消多行" class="headerlink" title="3、取消多行"></a>3、取消多行</h4><p>如果想取消多行注释，只需要在第一个–之前在加一个-即可，如：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">---[[</span>注释内容注释内容<span class="token comment">--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、标识符"><a href="#3、标识符" class="headerlink" title="3、标识符"></a>3、标识符</h3><p>换句话说标识符就是我们的<strong>变量名</strong>，Lua定义变量名以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上0个或多个字母，下划线，数字（0到9）。这块建议大家最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这样定义的，容易发生冲突。注意Lua是区分大小写字母的。</p><p>简单来说参考java规范就好</p><h3 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h3><p>下列是Lua的关键字，大家在定义常量、变量或其他用户自定义标识符都要避免使用以下这些关键字：</p><table><thead><tr><th>and</th><th>break</th><th>do</th><th>else</th></tr></thead><tbody><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td>goto</td><td></td><td></td></tr></tbody></table><p>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。这个也是上面我们不建议这么定义标识符的原因。</p><h3 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h3><p>Lua中支持的运算符有算术运算符、关系运算符、逻辑运算符、其他运算符。</p><p>算术运算符:</p><pre class="line-numbers language-none"><code class="language-none">+   加法-减法*乘法/除法%取余^乘幂-负号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">10+20--&gt;3020-10--&gt;1010*20--&gt;20020/10--&gt;23%2--&gt;110^2--&gt;100-10--&gt;-10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关系运算符</p><pre class="line-numbers language-none"><code class="language-none">==等于~=不等于&gt;大于&lt;小于&gt;=大于等于&lt;=小于等于<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">10==10--&gt;true10~=10--&gt;false20&gt;10--&gt;true20&lt;10--&gt;false20&gt;=10--&gt;true20&lt;=10--&gt;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑运算符</p><pre class="line-numbers language-none"><code class="language-none">and逻辑与 A and B     &amp;&amp;   or逻辑或 A or B     ||not逻辑非  取反，如果为true,则返回false  !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>逻辑运算符可以作为if的判断条件，返回的结果如下:</p><pre class="line-numbers language-none"><code class="language-none">A = trueB = trueA and B--&gt;trueA or  B --&gt;truenot A --&gt;false------------------------------------------------------------------------------------------------A = trueB = falseA and B--&gt;falseA or  B --&gt;truenot A --&gt;false------------------------------------------------------------------------------------------------A = falseB = trueA and B--&gt;falseA or  B --&gt;truenot A --&gt;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他运算符</p><pre class="line-numbers language-none"><code class="language-none">..连接两个字符串#一元预算法，返回字符串或表的长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">&gt; "HELLO ".."WORLD"--&gt;HELLO WORLD&gt; #"HELLO"--&gt;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="6、全局变量-amp-局部变量"><a href="#6、全局变量-amp-局部变量" class="headerlink" title="6、全局变量&amp;局部变量"></a>6、全局变量&amp;局部变量</h3><p>在Lua语言中，全局变量无须声明即可使用。在默认情况下，变量总是认为是全局的，如果未提前赋值，默认为nil:</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404123008.png"></p><p>要想声明一个局部变量，需要使用local来声明</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404123115.png"></p><h3 id="7、Lua数据类型"><a href="#7、Lua数据类型" class="headerlink" title="7、Lua数据类型"></a>7、Lua数据类型</h3><p>Lua有8个数据类型</p><pre class="line-numbers language-none"><code class="language-none">nil(空，无效值)boolean(布尔，true/false)number(数值)string(字符串)function(函数)table（表）thread(线程)userdata（用户数据）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用type函数测试给定变量或者的类型：</p><pre class="line-numbers language-none"><code class="language-none">print(type(nil))--&gt;nilprint(type(true))               --&gt; booleanprint(type(1.1*1.1))             --&gt; numberprint(type("Hello world"))      --&gt; stringprint(type(type(X)))            --&gt; string  ，type函数返回的也是字符串类型print(type(print))              --&gt; functionprint(type(type))               --&gt;functionprint(type{})--&gt;tableprint(type(io.stdin))--&gt;userdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h5><p>nil是一种只有一个nil值的类型，它的作用可以用来与其他所有值进行区分，也可以当想要移除一个变量时，只需要将该变量名赋值为nil,垃圾回收就会会释放该变量所占用的内存。</p><h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5><p>boolean类型具有两个值，true和false。boolean类型一般被用来做条件判断的真与假。在Lua语言中，只会将false和nil视为假，其他的都视为真，特别是在条件检测中0和空字符串都会认为是真，这个和我们熟悉的大多数语言不太一样。</p><h5 id="number"><a href="#number" class="headerlink" title="number"></a>number</h5><p>在Lua5.3版本开始，Lua语言为数值格式提供了两种选择:integer(整型)和float(双精度浮点型)[和其他语言不太一样，float不代表单精度类型]。</p><p>数值常量的表示方式:</p><pre class="line-numbers language-none"><code class="language-none">&gt;4--&gt;4&gt;0.4--&gt;0.4&gt;4.75e-3--&gt;0.00475&gt;4.75e3--&gt;4750<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不管是整型还是双精度浮点型，使用type()函数来取其类型，都会返回的是number</p><pre class="line-numbers language-none"><code class="language-none">&gt;type(3)--&gt;number&gt;type(3.3)--&gt;number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以它们之间是可以相互转换的，同时，具有相同算术值的整型值和浮点型值在Lua语言中是相等的</p><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><p>Lua语言中的字符串即可以表示单个字符，也可以表示一整本书籍。在Lua语言中，操作100K或者1M个字母组成的字符串的程序很常见。</p><p>可以使用单引号或双引号来声明字符串</p><pre class="line-numbers language-none"><code class="language-none">&gt;a = "hello"&gt;b = 'world'&gt;print(a)--&gt;hello&gt;print(b) --&gt;world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果声明的字符串比较长或者有多行，则可以使用如下方式进行声明</p><pre class="line-numbers language-none"><code class="language-none">html = [[&lt;html&gt;&lt;head&gt;&lt;title&gt;Lua-string&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="http://www.lua.org"&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p>​    table是Lua语言中最主要和强大的数据结构。使用表， Lua 语言可以以一种简单、统一且高效的方式表示数组、集合、记录和其他很多数据结构。 Lua语言中的表本质上是一种辅助数组。这种数组比Java中的数组更加灵活，可以使用数值做索引，也可以使用字符串或其他任意类型的值作索引(除nil外)。</p><p>创建表的最简单方式:</p><pre class="line-numbers language-none"><code class="language-none">&gt; a = {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建数组:</p><p>​    我们都知道数组就是相同数据类型的元素按照一定顺序排列的集合，那么使用table如何创建一个数组呢?</p><pre class="line-numbers language-none"><code class="language-none">&gt;arr = {"TOM","JERRY","ROSE"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    要想获取数组中的值，我们可以通过如下内容来获取:</p><pre class="line-numbers language-none"><code class="language-none">print(arr[0])nilprint(arr[1])TOMprint(arr[2])JERRYprint(arr[3])ROSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    从上面的结果可以看出来，数组的下标默认是从1开始的。所以上述创建数组，也可以通过如下方式来创建</p><pre class="line-numbers language-none"><code class="language-none">&gt;arr = {}&gt;arr[1] = "TOM"&gt;arr[2] = "JERRY"&gt;arr[3] = "ROSE"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们说过了，表的索引即可以是数字，也可以是字符串等其他的内容，所以我们也可以将索引更改为字符串来创建</p><pre class="line-numbers language-none"><code class="language-none">&gt;arr = {}&gt;arr["X"] = 10&gt;arr["Y"] = 20&gt;arr["Z"] = 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，如果想要获取这些数组中的值，可以使用下面的方式</p><pre class="line-numbers language-none"><code class="language-none">方式一&gt;print(arr["X"])&gt;print(arr["Y"])&gt;print(arr["Z"])方式二&gt;print(arr.X)&gt;print(arr.Y)&gt;print(arr.Z)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前table的灵活不进于此，还有更灵活的声明方式</p><pre class="line-numbers language-none"><code class="language-none">&gt;arr = {"TOM",X=10,"JERRY",Y=20,"ROSE",Z=30}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何获取上面的值?</p><pre class="line-numbers language-none"><code class="language-none">TOM :  arr[1]10  :  arr["X"] | arr.XJERRY: arr[2]20  :  arr["Y"] | arr.YROESE?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="function"><a href="#function" class="headerlink" title="function"></a>function</h5><p>在 Lua语言中，函数（ Function ）是对语句和表达式进行抽象的主要方式。</p><p>定义函数的语法为:</p><pre class="line-numbers language-none"><code class="language-none">function functionName(params)end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数被调用的时候，传入的参数个数与定义函数时使用的参数个数不一致的时候，Lua 语言会通过 抛弃多余参数和将不足的参数设为 nil 的方式来调整参数的个数。</p><pre class="line-numbers language-none"><code class="language-none">function  f(a,b)print(a,b)endf()--&gt; nil  nilf(2)--&gt; 2 nilf(2,6)--&gt; 2 6f(2.6.8)--&gt; 2 6 (8被丢弃)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变长参数函数</p><pre class="line-numbers language-none"><code class="language-none">function add(...)a,b,c=...print(a)print(b)print(c)endadd(1,2,3)  --&gt; 1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数返回值可以有多个，这点和Java不太一样</p><pre class="line-numbers language-none"><code class="language-none">function f(a,b)return a,bendx,y=f(11,22)--&gt; x=11,y=22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h5><p>thread翻译过来是线程的意思，在Lua中，thread用来表示执行的独立线路，用来执行协同程序。</p><h5 id="userdata"><a href="#userdata" class="headerlink" title="userdata"></a>userdata</h5><p>userdata是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型。</p><h3 id="8、Lua控制结构"><a href="#8、Lua控制结构" class="headerlink" title="8、Lua控制结构"></a>8、Lua控制结构</h3><p>Lua 语言提供了一组精简且常用的控制结构，包括用于条件执行的证 以及用于循环的 while、 repeat 和 for。 所有的控制结构语法上都有一个显式的终结符： end 用于终结 if、 for 及 while 结构， until 用于终结 repeat 结构。</p><h5 id="if-then-elseif-else"><a href="#if-then-elseif-else" class="headerlink" title="if then elseif else"></a>if then elseif else</h5><p>if语句先测试其条件，并根据条件是否满足执行相应的 then 部分或 else 部分。 else 部分 是可选的。</p><pre class="line-numbers language-none"><code class="language-none">function testif(a) if a&gt;0 then print("a是正数") endendfunction testif(a) if a&gt;0 then print("a是正数") else print("a是负数") endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要编写嵌套的 if 语句，可以使用 elseif。 它类似于在 else 后面紧跟一个if。根据传入的年龄返回不同的结果，如</p><pre class="line-numbers language-none"><code class="language-none">age&lt;=18 青少年，age&gt;18 , age &lt;=45 青年age&gt;45 , age&lt;=60 中年人age&gt;60 老年人function show(age)if age&lt;=18 then return "青少年"elseif age&gt;18 and age&lt;=45 then return "青年"elseif age&gt;45 and age&lt;=60 then return "中年人"elseif age&gt;60 then return "老年人"endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>顾名思义，当条件为真时 while 循环会重复执行其循环体。 Lua 语言先测试 while 语句 的条件，若条件为假则循环结束；否则， Lua 会执行循环体并不断地重复这个过程。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">while 条件 do  循环体end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例子:实现数组的循环</p><pre class="line-numbers language-none"><code class="language-none">function testWhile() local i = 1 while i&lt;=10 do  print(i)  i=i+1 endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h5><p>顾名思义， repeat-until语句会重复执行其循环体直到条件为真时结束。 由于条件测试在循环体之后执行，所以循环体至少会执行一次。</p><p>语法</p><pre class="line-numbers language-none"><code class="language-none">repeat 循环体 until 条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">function testRepeat() local i = 10 repeat  print(i)  i=i-1 until i &lt; 1end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>数值型for循环</p><p>语法</p><pre class="line-numbers language-none"><code class="language-none">for param=exp1,exp2,exp3 do 循环体end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>param的值从exp1变化到exp2之前的每次循环会执行 循环体，并在每次循环结束后将步长(step)exp3增加到param上。exp3可选，如果不设置默认为1</p><p>人话：从输出1开始，每次 +10，小于100（1，11，21，…,91）</p><pre class="line-numbers language-none"><code class="language-none">for i = 1,100,10 doprint(i)end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>泛型for循环</p><p>泛型for循环通过一个迭代器函数来遍历所有值，类似于java中的foreach语句。</p><p>语法</p><pre class="line-numbers language-none"><code class="language-none">for i,v in ipairs(x) do循环体end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>i是数组索引值，v是对应索引的数组元素值，ipairs是Lua提供的一个迭代器函数，用来迭代数组，x是要遍历的数组。</p><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">arr = {"TOME","JERRY","ROWS","LUCY"}for i,v in ipairs(arr) do print(i,v)end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述实例输出的结果为</p><pre class="line-numbers language-none"><code class="language-none">1TOM2JERRY3ROWS4LUCY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果将arr的值进行修改为</p><pre class="line-numbers language-none"><code class="language-none">arr = {"TOME","JERRY","ROWS",x="JACK","LUCY"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样的代码在执行的时候，就只能看到和之前一样的结果，而其中的x为JACK就无法遍历出来，缺失了数据，如果解决呢?</p><p>我们可以将迭代器函数变成pairs,如</p><pre class="line-numbers language-none"><code class="language-none">for i,v in pairs(arr) do print(i,v)end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述实例就输出的结果为</p><pre class="line-numbers language-none"><code class="language-none">1TOM2JERRY3ROWS4LUCYxJACK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、OpenResty"><a href="#四、OpenResty" class="headerlink" title="四、OpenResty"></a>四、OpenResty</h2><h3 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h3><h4 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>OpenResty是一个基于Nginx与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。所以本身OpenResty内部就已经集成了Nginx和Lua，所以我们使用起来会更加方便。</p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><p><strong><a href="/posts/829b453d">详情可见【OpenResty】</a></strong></p><h5 id="1、拉取"><a href="#1、拉取" class="headerlink" title="1、拉取"></a>1、拉取</h5><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull openresty/openresty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2、挂载并启动"><a href="#2、挂载并启动" class="headerlink" title="2、挂载并启动"></a>2、挂载并启动</h5><p><strong>说明下：</strong></p><ul><li>完全基于上面的nginx配置的三个部分，唯一修改的是 <code>nginx.conf</code>配置文件，这边挂载改成了 <code>nginx2.conf</code>，用于保留之前的（自己懒而已）</li><li>新增了，lua文件挂载</li><li>修改了容器内的挂载位置，因为 openresty容器位置不一样了(外部还是不变，容器内的位置变了)</li></ul><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 443<span class="token punctuation">:</span>443 <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>name openresty <span class="token punctuation">-</span>v /root/nginx/www<span class="token punctuation">:</span>/usr/local/openresty/nginx/html <span class="token punctuation">-</span>v /root/nginx/conf/nginx2.conf<span class="token punctuation">:</span>/usr/local/openresty/nginx/conf/nginx.conf <span class="token punctuation">-</span>v /root/nginx/logs<span class="token punctuation">:</span>/usr/local/openresty/nginx/logs <span class="token punctuation">-</span>v  /root/nginx/lls/<span class="token punctuation">:</span>/usr/local/openresty/nginx/ssl <span class="token punctuation">-</span>v  /root/nginx/lua/<span class="token punctuation">:</span>/usr/local/openresty/nginx/lua  openresty/openresty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、ngx-lua的使用"><a href="#2、ngx-lua的使用" class="headerlink" title="2、ngx_lua的使用"></a>2、ngx_lua的使用</h3><p>使用Lua编写Nginx脚本的基本构建块是指令。指令用于指定何时运行用户Lua代码以及如何使用结果。下图显示了执行指令的顺序。 </p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404144653.png"></p><p>先来解释下*的作用</p><pre class="line-numbers language-none"><code class="language-none">*：无 ， 即 xxx_by_lua ,指令后面跟的是 lua指令*:_file，即 xxx_by_lua_file 指令后面跟的是 lua文件*:_block,即 xxx_by_lua_block 在0.9.17版后替换init_by_lua_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="init-by-lua"><a href="#init-by-lua" class="headerlink" title="init_by_lua*"></a>init_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令在每次Nginx重新加载配置时执行，可以用来完成一些耗时模块的加载，或者初始化一些全局配置。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="init-worker-by-lua"><a href="#init-worker-by-lua" class="headerlink" title="init_worker_by_lua*"></a>init_worker_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="set-by-lua"><a href="#set-by-lua" class="headerlink" title="set_by_lua*"></a>set_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令只要用来做变量赋值，这个指令一次只能返回一个值，并将结果赋值给Nginx中指定的变量。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rewrite-by-lua"><a href="#rewrite-by-lua" class="headerlink" title="rewrite_by_lua*"></a>rewrite_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令用于执行内部URL重写或者外部重定向，典型的如伪静态化URL重写，本阶段在rewrite处理阶段的最后默认执行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="access-by-lua"><a href="#access-by-lua" class="headerlink" title="access_by_lua*"></a>access_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令用于访问控制。例如，如果只允许内网IP访问。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="content-by-lua"><a href="#content-by-lua" class="headerlink" title="content_by_lua*"></a>content_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令是应用最多的指令，大部分任务是在这个阶段完成的，其他的过程往往为这个阶段准备数据，正式处理基本都在本阶段。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="header-filter-by-lua"><a href="#header-filter-by-lua" class="headerlink" title="header_filter_by_lua*"></a>header_filter_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令用于设置应答消息的头部信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="body-filter-by-lua"><a href="#body-filter-by-lua" class="headerlink" title="body_filter_by_lua*"></a>body_filter_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令是对响应数据进行过滤，如截断、替换。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="log-by-lua"><a href="#log-by-lua" class="headerlink" title="log_by_lua*"></a>log_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令用于在log请求处理阶段，用Lua代码处理日志，但并不替换原有log处理。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="balancer-by-lua"><a href="#balancer-by-lua" class="headerlink" title="balancer_by_lua*"></a>balancer_by_lua*</h4><pre class="line-numbers language-none"><code class="language-none">该指令主要的作用是用来实现上游服务器的负载均衡器算法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ssl-certificate-by"><a href="#ssl-certificate-by" class="headerlink" title="ssl_certificate_by_*"></a>ssl_certificate_by_*</h4><pre class="line-numbers language-none"><code class="language-none">该指令作用在Nginx和下游服务开始一个SSL握手操作时将允许本配置项的Lua代码。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h4><pre class="line-numbers language-none"><code class="language-none">http://192.168.200.133?name=张三&amp;gender=1Nginx接收到请求后，根据gender传入的值，如果gender传入的是1，则在页面上展示张三先生,如果gender传入的是0，则在页面上展示张三女士,如果未传或者传入的不是1和2则在页面上展示张三。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现代码</p><p><strong>注意</strong>：加入配置文件的时候 #内容要去掉</p><pre class="line-numbers language-none"><code class="language-none">location /getByGender {default_type 'text/html';set_by_lua $name "#获取请求url上的值 name，genderlocal uri_args = ngx.req.get_uri_args()gender = uri_args['gender']name = uri_args['name']if gender=='1' thenreturn name..'先生'elseif gender=='0' thenreturn name..'女士'elsereturn nameend";#解决乱码问题charset utf-8;return 200 $name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649073290089.png" alt="1649073290089"></p><h3 id="3、ngx-lua操作Redis"><a href="#3、ngx-lua操作Redis" class="headerlink" title="3、ngx_lua操作Redis"></a>3、ngx_lua操作Redis</h3><h4 id="1、Api及其语句说明"><a href="#1、Api及其语句说明" class="headerlink" title="1、Api及其语句说明"></a>1、Api及其语句说明</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">lua<span class="token operator">-</span>resty<span class="token operator">-</span>redis提供了访问Redis的详细API，包括创建对接、连接、操作、数据处理等。这些API基本上与Redis的操作一一对应。（<span class="token number">1</span>）redis <span class="token operator">=</span> require <span class="token string">"resty.redis"</span>（<span class="token number">2</span>）new语法<span class="token punctuation">:</span> redis<span class="token punctuation">,</span>err <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>创建一个Redis对象。（<span class="token number">3</span>）connect语法<span class="token punctuation">:</span>ok<span class="token punctuation">,</span>err<span class="token operator">=</span>redis<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">[</span><span class="token punctuation">,</span>options_table<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>设置连接Redis的连接信息。ok<span class="token punctuation">:</span>连接成功返回 <span class="token number">1</span>，连接失败返回<span class="token keyword">nil</span>err<span class="token punctuation">:</span>返回对应的错误信息（<span class="token number">4</span>）set_timeout语法<span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> ，设置请求操作Redis的超时时间。（<span class="token number">5</span>）close语法<span class="token punctuation">:</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>关闭当前连接，成功返回<span class="token number">1</span>，失败返回<span class="token keyword">nil</span>和错误信息（<span class="token number">6</span>）redis命令对应的方法在lua<span class="token operator">-</span>resty<span class="token operator">-</span>redis中，所有的Redis命令都有自己的方法，方法名字和命令名字相同，只是全部为小写。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">location <span class="token operator">/</span><span class="token function">testRedis</span> <span class="token punctuation">{</span>    default_type <span class="token string">"text/html"</span><span class="token punctuation">;</span>    <span class="token function">content_by_lua_block</span><span class="token punctuation">{</span>        <span class="token keyword">local</span> redis <span class="token operator">=</span> require <span class="token string">"resty.redis"</span> <span class="token comment">-- 引入Redis</span>        <span class="token keyword">local</span> redisObj <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">--创建Redis对象</span>        redisObj<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">--设置超时数据为1s</span>        <span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> redisObj<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span> <span class="token comment">--设置redis连接信息，这边不要用127.0.0.1</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span> <span class="token comment">--判断是否连接成功</span>         ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"failed to connection redis"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>         <span class="token keyword">return</span>        <span class="token keyword">end</span>        ok<span class="token punctuation">,</span>err <span class="token operator">=</span> redisObj<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"TOM"</span><span class="token punctuation">)</span><span class="token comment">--存入数据</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span> <span class="token comment">--判断是否存入成功</span>         ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"failed to set username"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>         <span class="token keyword">return</span>        <span class="token keyword">end</span>        <span class="token keyword">local</span> res<span class="token punctuation">,</span>err <span class="token operator">=</span> redisObj<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token comment">--从redis中获取数据</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">--将数据写会消息体中</span>        redisObj<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404220444.png"></p><h3 id="4、ngx-lua操作Mysql"><a href="#4、ngx-lua操作Mysql" class="headerlink" title="4、ngx_lua操作Mysql"></a>4、ngx_lua操作Mysql</h3><h4 id="1、查询"><a href="#1、查询" class="headerlink" title="1、查询"></a>1、查询</h4><h5 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">driverClass</span><span class="token operator">=</span>com.mysql.jdbc.Driver<span class="token assign-left variable">url</span><span class="token operator">=</span>jdbc:mysql://10.0.4.7:3306/nginx_db<span class="token assign-left variable">username</span><span class="token operator">=</span>root<span class="token assign-left variable">password</span><span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、建库"><a href="#2、建库" class="headerlink" title="2、建库"></a>2、建库</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users<span class="token punctuation">(</span>   id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>   username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   birthday <span class="token keyword">date</span><span class="token punctuation">,</span>   salary <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">"TOM"</span><span class="token punctuation">,</span><span class="token string">"1988-11-11"</span><span class="token punctuation">,</span><span class="token number">10000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">"JERRY"</span><span class="token punctuation">,</span><span class="token string">"1989-11-11"</span><span class="token punctuation">,</span><span class="token number">20000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">"ROWS"</span><span class="token punctuation">,</span><span class="token string">"1990-11-11"</span><span class="token punctuation">,</span><span class="token number">30000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">"LUCY"</span><span class="token punctuation">,</span><span class="token string">"1991-11-11"</span><span class="token punctuation">,</span><span class="token number">40000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> users<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token string">"1992-11-11"</span><span class="token punctuation">,</span><span class="token number">50000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、Api详解"><a href="#3、Api详解" class="headerlink" title="3、Api详解"></a>3、Api详解</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">（<span class="token number">1</span>）引入<span class="token string">"resty.mysql"</span>模块<span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>（<span class="token number">2</span>）new创建一个MySQL连接对象，遇到错误时，db为<span class="token keyword">nil</span>，err为错误描述信息语法<span class="token punctuation">:</span> db<span class="token punctuation">,</span>err <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>（<span class="token number">3</span>）connect尝试连接到一个MySQL服务器语法<span class="token punctuation">:</span>ok<span class="token punctuation">,</span>err<span class="token operator">=</span>db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">,</span>options是一个参数的Lua表结构，里面包含数据库连接的相关信息    host<span class="token punctuation">:</span>服务器主机名或IP地址    port<span class="token punctuation">:</span>服务器监听端口，默认为<span class="token number">3306</span>    user<span class="token punctuation">:</span>登录的用户名    password<span class="token punctuation">:</span>登录密码    database<span class="token punctuation">:</span>使用的数据库名（<span class="token number">4</span>）set_timeout设置子请求的超时时间<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>，包括connect方法语法<span class="token punctuation">:</span>db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>（<span class="token number">5</span>）close关闭当前MySQL连接并返回状态。如果成功，则返回<span class="token number">1</span>；如果出现任何错误，则将返回<span class="token keyword">nil</span>和错误描述。语法<span class="token punctuation">:</span>db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>（<span class="token number">6</span>）send_query异步向远程MySQL发送一个查询。如果成功则返回成功发送的字节数；如果错误，则返回<span class="token keyword">nil</span>和错误描述语法<span class="token punctuation">:</span>bytes<span class="token punctuation">,</span>err<span class="token operator">=</span>db<span class="token punctuation">:</span><span class="token function">send_query</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>（<span class="token number">7</span>）read_result从MySQL服务器返回结果中读取一行数据。res返回一个描述OK包或结果集包的Lua表<span class="token punctuation">,</span>语法<span class="token punctuation">:</span>res<span class="token punctuation">,</span> err<span class="token punctuation">,</span> errcode<span class="token punctuation">,</span> sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token punctuation">,</span> err<span class="token punctuation">,</span> errcode<span class="token punctuation">,</span> sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token punctuation">:</span>rows指定返回结果集的最大值，默认为<span class="token number">4</span>如果是查询，则返回一个容纳多行的数组。每行是一个数据列的key<span class="token operator">-</span>value对，如    <span class="token punctuation">{</span>      <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">"TOM"</span><span class="token punctuation">,</span>birthday<span class="token operator">=</span><span class="token string">"1988-11-11"</span><span class="token punctuation">,</span>salary<span class="token operator">=</span><span class="token number">10000.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">"JERRY"</span><span class="token punctuation">,</span>birthday<span class="token operator">=</span><span class="token string">"1989-11-11"</span><span class="token punctuation">,</span>salary<span class="token operator">=</span><span class="token number">20000.0</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>如果是增删改，则返回类上如下数据    <span class="token punctuation">{</span>    insert_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    server_status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>    warning_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    affected_rows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>    message<span class="token operator">=</span><span class="token keyword">nil</span>    <span class="token punctuation">}</span>返回值<span class="token punctuation">:</span>res<span class="token punctuation">:</span>操作的结果集err<span class="token punctuation">:</span>错误信息errcode<span class="token punctuation">:</span>MySQL的错误码，比如<span class="token number">1064</span>sqlstate<span class="token punctuation">:</span>返回由<span class="token number">5</span>个字符组成的标准SQL错误码，比如<span class="token number">42000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、实现"><a href="#4、实现" class="headerlink" title="4、实现"></a>4、实现</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">location <span class="token operator">/</span><span class="token function">mysqlSearch</span><span class="token punctuation">{</span>    default_type <span class="token string">'text/html'</span><span class="token punctuation">;</span>    <span class="token function">content_by_lua_block</span><span class="token punctuation">{</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">{</span>            host<span class="token operator">=</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span> <span class="token operator">#</span>不要用<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"lua_db"</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        db<span class="token punctuation">:</span><span class="token function">send_query</span><span class="token punctuation">(</span><span class="token string">"select * from users where id =1"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>birthday<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span>    db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、-baby-chick-优化"><a href="#5、-baby-chick-优化" class="headerlink" title="5、:baby_chick:优化:"></a>5、<span class="github-emoji"><span>🐤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>优化:</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">location <span class="token operator">/</span><span class="token function">mysqlSearch</span> <span class="token punctuation">{</span>    default_type <span class="token string">'text/html'</span><span class="token punctuation">;</span>    <span class="token function">content_by_lua_block</span><span class="token punctuation">{</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">{</span>            host<span class="token operator">=</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"lua_db"</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> reqId <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>        db<span class="token punctuation">:</span><span class="token function">send_query</span><span class="token punctuation">(</span><span class="token string">"select * from users where id ="</span><span class="token operator">..</span>reqId<span class="token punctuation">)</span>        <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>birthday<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span>        db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404233016.png"></p><h5 id="6、-artificial-satellite-lua-cjson"><a href="#6、-artificial-satellite-lua-cjson" class="headerlink" title="6、:artificial_satellite:lua-cjson"></a>6、<span class="github-emoji"><span>🛰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>lua-cjson</h5><p>read_result()得到的结果res都是table类型，要想在页面上展示，就必须知道table的具体数据结构才能进行遍历获取。处理起来比较麻烦，接下来我们介绍一种简单方式cjson，使用它就可以将table类型的数据转换成json字符串，把json字符串展示在页面上即可。</p><p>步骤一：引入cjson</p><pre class="line-numbers language-none"><code class="language-none">local cjson = require "cjson"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>步骤二：调用cjson的encode方法进行类型转换</p><pre class="line-numbers language-none"><code class="language-none">cjson.encode(res) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优化代码：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">location <span class="token operator">/</span><span class="token function">mysqlSearch</span> <span class="token punctuation">{</span>    default_type <span class="token string">'text/html'</span><span class="token punctuation">;</span>    <span class="token function">content_by_lua_block</span><span class="token punctuation">{</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> cjson <span class="token operator">=</span> require <span class="token string">"cjson"</span>        <span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">{</span>            host<span class="token operator">=</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"lua_db"</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> reqId <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>        db<span class="token punctuation">:</span><span class="token function">send_query</span><span class="token punctuation">(</span><span class="token string">"select * from users where id ="</span><span class="token operator">..</span>reqId<span class="token punctuation">)</span>        <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">do</span>       ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>id<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>username<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>birthday<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>salary<span class="token punctuation">)</span>        <span class="token keyword">end</span>        db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404234615.png"></p><h4 id="2、增删改"><a href="#2、增删改" class="headerlink" title="2、增删改"></a>2、增删改</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">location <span class="token operator">/</span><span class="token function">mysql</span> <span class="token punctuation">{</span>    default_type <span class="token string">'text/html'</span><span class="token punctuation">;</span>    <span class="token function">content_by_lua_block</span><span class="token punctuation">{</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> cjson <span class="token operator">=</span> require <span class="token string">"cjson"</span>        <span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">{</span>            host<span class="token operator">=</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span>            port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>            user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>            database<span class="token operator">=</span><span class="token string">"lua_db"</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> reqId <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>        <span class="token keyword">local</span> reqType <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">'reqType'</span><span class="token punctuation">]</span>        db<span class="token punctuation">:</span><span class="token function">send_query</span><span class="token punctuation">(</span><span class="token string">"select * from users where id ="</span><span class="token operator">..</span>reqId<span class="token punctuation">)</span>        <span class="token keyword">if</span> reqType <span class="token operator">==</span> <span class="token string">'search'</span> <span class="token keyword">then</span>         <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">read_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">do</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>id<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>username<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>birthday<span class="token operator">..</span><span class="token string">","</span><span class="token operator">..</span>v<span class="token punctuation">.</span>salary<span class="token punctuation">)</span>         <span class="token keyword">end</span>        <span class="token keyword">elseif</span> reqType <span class="token operator">==</span> <span class="token string">'add'</span>  <span class="token keyword">then</span>            <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"insert into users(id,username,birthday,salary) values(6,'zhangsan','2023-11-11',32222.0)"</span><span class="token punctuation">)</span>        <span class="token keyword">elseif</span> reqType <span class="token operator">==</span> <span class="token string">'update'</span> <span class="token keyword">then</span>             <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"update users set username='lisi' where id = 6"</span><span class="token punctuation">)</span>        <span class="token keyword">elseif</span> reqType <span class="token operator">==</span> <span class="token string">'delete'</span>  <span class="token keyword">then</span>            <span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"delete from users where id = 6"</span><span class="token punctuation">)</span>        <span class="token keyword">end</span>            db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、Rdis缓存预热"><a href="#5、Rdis缓存预热" class="headerlink" title="5、Rdis缓存预热"></a>5、Rdis缓存预热</h3><p>使用ngx_lua模块完成Redis缓存预热。</p><p>步骤: </p><p>（1）先得有一张表(users)</p><p>（2）浏览器输入如下地址</p><pre class="line-numbers language-none"><code class="language-none">http://10.0.4.7?username=TOM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）从表中查询出符合条件的记录，此时获取的结果为table类型</p><p>（4）使用cjson将table数据转换成json字符串</p><p>（5）将查询的结果数据存入Redis中</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">init_by_lua_block</span><span class="token punctuation">{</span>redis <span class="token operator">=</span> require <span class="token string">"resty.redis"</span>    mysql <span class="token operator">=</span> require <span class="token string">"resty.mysql"</span>    cjson <span class="token operator">=</span> require <span class="token string">"cjson"</span><span class="token punctuation">}</span>location <span class="token operator">/</span><span class="token function">redisPreheat</span><span class="token punctuation">{</span>default_type <span class="token string">"text/html"</span><span class="token punctuation">;</span><span class="token function">content_by_lua_block</span><span class="token punctuation">{</span><span class="token comment">--获取请求的参数username</span><span class="token keyword">local</span> param <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token comment">--建立mysql数据库的连接</span><span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> ok<span class="token punctuation">,</span>err <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">"lua_db"</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span> ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"failed connect to mysql:"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token keyword">end</span><span class="token comment">--设置连接超时时间</span>db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">--查询数据</span><span class="token keyword">local</span> sql <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token keyword">not</span> param <span class="token keyword">then</span>sql<span class="token operator">=</span><span class="token string">"select * from users"</span><span class="token keyword">else</span>sql<span class="token operator">=</span><span class="token string">"select * from users where username="</span><span class="token operator">..</span><span class="token string">"'"</span><span class="token operator">..</span>param<span class="token operator">..</span><span class="token string">"'"</span><span class="token keyword">end</span><span class="token keyword">local</span> res<span class="token punctuation">,</span>err<span class="token punctuation">,</span>errcode<span class="token punctuation">,</span>sqlstate<span class="token operator">=</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> res <span class="token keyword">then</span> ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"failed to query from mysql:"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token keyword">end</span><span class="token comment">--连接redis</span><span class="token keyword">local</span> rd <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ok<span class="token punctuation">,</span>err <span class="token operator">=</span> rd<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"10.0.4.7"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span> ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"failed to connect to redis:"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token keyword">end</span>rd<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">--循环遍历数据</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">do</span> rd<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user_"</span><span class="token operator">..</span>v<span class="token punctuation">.</span>username<span class="token punctuation">,</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">end</span>ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>rd<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p><code>:</code>  + 英文字母有小图标</p><p><code>:c</code> —&gt;  <span class="github-emoji"><span>⏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>关于撤回，vim</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220404233431.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机语言" scheme="https://mykkto.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="nginx" scheme="https://mykkto.github.io/tags/nginx/"/>
    
    <category term="lua" scheme="https://mykkto.github.io/tags/lua/"/>
    
    <category term="openresty" scheme="https://mykkto.github.io/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Alibaba-Seata 处理分布式事务</title>
    <link href="https://mykkto.github.io/posts/e1138fa5.html"/>
    <id>https://mykkto.github.io/posts/e1138fa5.html</id>
    <published>2022-03-25T12:11:33.000Z</published>
    <updated>2022-11-12T15:07:08.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、分布式事务问题"><a href="#一、分布式事务问题" class="headerlink" title="一、分布式事务问题"></a>一、分布式事务问题</h2><h3 id="1、分布式前"><a href="#1、分布式前" class="headerlink" title="1、分布式前"></a>1、分布式前</h3><ul><li>单机单库没这个问题</li><li>从1：1  -&gt;  1：N  -&gt;  N：N</li></ul><h3 id="2、分布式之后"><a href="#2、分布式之后" class="headerlink" title="2、分布式之后"></a>2、分布式之后</h3><p>单体应用被拆分成微服务应用，原来的<code>三个模块</code>被拆分成<code>三个独立的应用</code>，分别使用三<code>个独立的数据源</code>，<br>业务操作需要调用三个服务来完成。此时<strong>每个服务内部的数据一致性由<code>本地</code>**事务来保证，但是<code>全局</code>**的数据一致性问题没法保证</strong>。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324225229.png"></p><h3 id="3、一句话"><a href="#3、一句话" class="headerlink" title="3、一句话"></a>3、一句话</h3><p>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p><h2 id="二、Seata简介"><a href="#二、Seata简介" class="headerlink" title="二、Seata简介"></a>二、Seata简介</h2><h3 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h3><p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><h3 id="2、能干嘛（★）"><a href="#2、能干嘛（★）" class="headerlink" title="2、能干嘛（★）"></a>2、能干嘛（★）</h3><h4 id="1、ID-1-组件-3"><a href="#1、ID-1-组件-3" class="headerlink" title="1、ID(1)+组件(3)"></a>1、ID(1)+组件(3)</h4><h5 id="1、ID"><a href="#1、ID" class="headerlink" title="1、ID"></a>1、ID</h5><p>全局唯一的事务ID：Transaction ID XID</p><h5 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h5><p>Transaction Coordinator (TC)<strong>【打工人】</strong></p><p><code>事务协调器</code>，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚；</p><p>Transaction Manager (TM)<strong>【老板】</strong></p><p><code>控制全局事务的边界</code>，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议；</p><p>Resource Manager (RM)<strong>【任务】</strong></p><p><code>控制分支事务</code>，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</p><h4 id="2、处理过程"><a href="#2、处理过程" class="headerlink" title="2、处理过程"></a>2、处理过程</h4><p>1、TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</p><p>2、XID 在微服务调用链路的上下文中传播；</p><p>3、RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</p><p>4、TM 向 TC 发起针对 XID 的全局提交或回滚决议；</p><p>5、TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325203440.png"></p><h3 id="3、怎么用"><a href="#3、怎么用" class="headerlink" title="3、怎么用"></a>3、怎么用</h3><h4 id="1、本地"><a href="#1、本地" class="headerlink" title="1、本地"></a>1、本地</h4><p>单体架构上，本地使用spring：<code>@Transactional</code></p><h4 id="2、全局"><a href="#2、全局" class="headerlink" title="2、全局"></a>2、全局</h4><p>分布式上，全局使用Seata：<code>@GlobalTransactional</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325203650.png"></p><h2 id="三、Seata-Server安装"><a href="#三、Seata-Server安装" class="headerlink" title="三、Seata-Server安装"></a>三、Seata-Server安装</h2><h3 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h3><h4 id="1、地址"><a href="#1、地址" class="headerlink" title="1、地址"></a>1、地址</h4><p><a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p><h4 id="2、下载地址"><a href="#2、下载地址" class="headerlink" title="2、下载地址"></a>2、下载地址</h4><p><a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p>选择 1.0.0 GA 稳定版</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325210759.png"></p><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>seata-server-1.0.0.zip 解压到指定目录并修改conf目录下的file.conf配置文件</p><h4 id="1、file-conf（service模块）"><a href="#1、file-conf（service模块）" class="headerlink" title="1、file.conf（service模块）"></a>1、file.conf（service模块）</h4><pre class="line-numbers language-file.conf" data-language="file.conf"><code class="language-file.conf">vgroup_mapping.my_test_tx_group = "fsp_tx_group"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325222219.png"></p><h4 id="2、file-conf（store模块）"><a href="#2、file-conf（store模块）" class="headerlink" title="2、file.conf（store模块）"></a>2、file.conf（store模块）</h4><pre class="line-numbers language-file.conf" data-language="file.conf"><code class="language-file.conf">mode = "db"url = "jdbc:mysql://127.0.0.1:3306/seata"user = "root"password = "你自己密码"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220325222634.png"></p><h3 id="3、导入建表sql"><a href="#3、导入建表sql" class="headerlink" title="3、导入建表sql"></a>3、导入建表sql</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- -------------------------------- The script used when storeMode is 'db' --------------------------------</span><span class="token comment">-- the table to store GlobalSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store BranchSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store lock data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h3><p>1、启动cacos，seate </p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220326194029.png"></p><p>2、查看 nacos 控制台</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220326194117.png"></p><h2 id="四、订单-库存-账户业务数据库准备"><a href="#四、订单-库存-账户业务数据库准备" class="headerlink" title="四、订单/库存/账户业务数据库准备"></a>四、订单/库存/账户业务数据库准备</h2><h3 id="1、实战业务说明"><a href="#1、实战业务说明" class="headerlink" title="1、实战业务说明"></a>1、实战业务说明</h3><h4 id="1、详细"><a href="#1、详细" class="headerlink" title="1、详细"></a>1、详细</h4><p><strong>这里我们会创建三个服务，一个订单服务，一个库存服务，一个账户服务。</strong></p><p>当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，<br>再通过远程调用账户服务来扣减用户账户里面的余额，<br>最后在订单服务中修改订单状态为已完成。</p><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p><h4 id="2、调用流程"><a href="#2、调用流程" class="headerlink" title="2、调用流程"></a>2、调用流程</h4><p>下订单—&gt;扣库存—&gt;减账户(余额)</p><h3 id="2、建库建表"><a href="#2、建库建表" class="headerlink" title="2、建库建表"></a>2、建库建表</h3><h4 id="0、建库"><a href="#0、建库" class="headerlink" title="0、建库"></a>0、建库</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_order<span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_storage<span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> seata_account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、订单"><a href="#1、订单" class="headerlink" title="1、订单"></a>1、订单</h4><p>seata_order：存储订单的数据库；</p><p><strong>表语句：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>count<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>money<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'金额'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态：0：创建中；1：已完结'</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、库存"><a href="#2、库存" class="headerlink" title="2、库存"></a>2、库存</h4><p>seata_storage：存储库存的数据库；</p><p><strong>表语句：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_storage <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总库存'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用库存'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余库存'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> seata_storage<span class="token punctuation">.</span>t_storage<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_storage<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、账户信息"><a href="#3、账户信息" class="headerlink" title="3、账户信息"></a>3、账户信息</h4><p>seata_account：存储账户信息的数据库。</p><p><strong>表语句：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_account <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总额度'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>used<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用余额'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>residue<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余可用额度'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> seata_account<span class="token punctuation">.</span>t_account<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span><span class="token punctuation">)</span>  <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_account<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、回滚日志表"><a href="#4、回滚日志表" class="headerlink" title="4、回滚日志表"></a>4、回滚日志表</h4><p><strong>按照上述3库分别建对应的回滚日志表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- the table to store seata xid data</span><span class="token comment">-- 0.7.0+ add context</span><span class="token comment">-- you must to init this sql for you business databese. the seata server not need it.</span><span class="token comment">-- 此脚本必须初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）</span><span class="token comment">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>context<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">LONGBLOB</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ext<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、效果"><a href="#5、效果" class="headerlink" title="5、效果"></a>5、效果</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220326200400.png"></p><h2 id="五、订单-库存-账户业务微服务准备"><a href="#五、订单-库存-账户业务微服务准备" class="headerlink" title="五、订单/库存/账户业务微服务准备"></a>五、订单/库存/账户业务微服务准备</h2><h3 id="1、业务需求"><a href="#1、业务需求" class="headerlink" title="1、业务需求"></a>1、业务需求</h3><p><strong>下订单-&gt;减库存-&gt;扣余额-&gt;改(订单)状态</strong></p><h3 id="2、新建订单Order-Module"><a href="#2、新建订单Order-Module" class="headerlink" title="2、新建订单Order-Module"></a>2、新建订单Order-Module</h3><h4 id="1、model"><a href="#1、model" class="headerlink" title="1、model"></a>1、model</h4><p>seata-order-service2001</p><h4 id="2、pom"><a href="#2、pom" class="headerlink" title="2、pom"></a>2、pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-order-service2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--nacos--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--seata--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--feign--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--web-actuator--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-druid--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.37<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、yml"><a href="#3、yml" class="headerlink" title="3、yml"></a>3、yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token comment">#自定义事务组名称需要与seata-server中的对应</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> fsp_tx_group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 106.52.23.202<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//106.52.23.202<span class="token punctuation">:</span>3306/seata_order    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、file-conf"><a href="#4、file-conf" class="headerlink" title="4、file.conf"></a>4、file.conf</h4><p>yml 同层目录下</p><p>需要修改的是 mysql url,username,password</p><pre class="line-numbers language-file.conf" data-language="file.conf"><code class="language-file.conf">transport {  # tcp udt unix-domain-socket  type = "TCP"  #NIO NATIVE  server = "NIO"  #enable heartbeat  heartbeat = true  #thread factory for netty  thread-factory {    boss-thread-prefix = "NettyBoss"    worker-thread-prefix = "NettyServerNIOWorker"    server-executor-thread-prefix = "NettyServerBizHandler"    share-boss-worker = false    client-selector-thread-prefix = "NettyClientSelector"    client-selector-thread-size = 1    client-worker-thread-prefix = "NettyClientWorkerThread"    # netty boss thread size,will not be used for UDT    boss-thread-size = 1    #auto default pin or 8    worker-thread-size = 8  }  shutdown {    # when destroy server, wait seconds    wait = 3  }  serialization = "seata"  compressor = "none"}service {  vgroup_mapping.fsp_tx_group = "default" #修改自定义事务组名称  default.grouplist = "127.0.0.1:8091"  enableDegrade = false  disable = false  max.commit.retry.timeout = "-1"  max.rollback.retry.timeout = "-1"  disableGlobalTransaction = false}client {  async.commit.buffer.limit = 10000  lock {    retry.internal = 10    retry.times = 30  }  report.retry.count = 5  tm.commit.retry.count = 1  tm.rollback.retry.count = 1}## transaction log storestore {  ## store mode: file、db  mode = "db"  ## file store  file {    dir = "sessionStore"    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions    max-branch-session-size = 16384    # globe session size , if exceeded throws exceptions    max-global-session-size = 512    # file buffer size , if exceeded allocate new buffer    file-write-buffer-cache-size = 16384    # when recover batch read size    session.reload.read_size = 100    # async, sync    flush-disk-mode = async  }  ## database store  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.    datasource = "dbcp"    ## mysql/oracle/h2/oceanbase etc.    db-type = "mysql"    driver-class-name = "com.mysql.jdbc.Driver"    url = "jdbc:mysql://106.52.23.202:3306/seata"    user = "root"    password = "root"    min-conn = 1    max-conn = 3    global.table = "global_table"    branch.table = "branch_table"    lock-table = "lock_table"    query-limit = 100  }}lock {  ## the lock store mode: local、remote  mode = "remote"  local {    ## store locks in user's database  }  remote {    ## store locks in the seata's server  }}recovery {  #schedule committing retry period in milliseconds  committing-retry-period = 1000  #schedule asyn committing retry period in milliseconds  asyn-committing-retry-period = 1000  #schedule rollbacking retry period in milliseconds  rollbacking-retry-period = 1000  #schedule timeout retry period in milliseconds  timeout-retry-period = 1000}transaction {  undo.data.validation = true  undo.log.serialization = "jackson"  undo.log.save.days = 7  #schedule delete expired undo_log in milliseconds  undo.log.delete.period = 86400000  undo.log.table = "undo_log"}## metrics settingsmetrics {  enabled = false  registry-type = "compact"  # multi exporters use comma divided  exporter-list = "prometheus"  exporter-prometheus-port = 9898}support {  ## spring  spring {    # auto proxy the DataSource bean    datasource.autoproxy = false  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、registry-conf"><a href="#5、registry-conf" class="headerlink" title="5、registry.conf"></a>5、registry.conf</h4><pre class="line-numbers language-registry.conf" data-language="registry.conf"><code class="language-registry.conf">registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"  nacos {    serverAddr = "106.52.23.202:8848"    namespace = ""    cluster = "default"  }  eureka {    serviceUrl = "http://localhost:8761/eureka"    application = "default"    weight = "1"  }  redis {    serverAddr = "localhost:6379"    db = "0"  }  zk {    cluster = "default"    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  consul {    cluster = "default"    serverAddr = "127.0.0.1:8500"  }  etcd3 {    cluster = "default"    serverAddr = "http://localhost:2379"  }  sofa {    serverAddr = "127.0.0.1:9603"    application = "default"    region = "DEFAULT_ZONE"    datacenter = "DefaultDataCenter"    cluster = "default"    group = "SEATA_GROUP"    addressWaitTime = "3000"  }  file {    name = "file.conf"  }}config {  # file、nacos 、apollo、zk、consul、etcd3  type = "file"  nacos {    serverAddr = "localhost"    namespace = ""  }  consul {    serverAddr = "127.0.0.1:8500"  }  apollo {    app.id = "seata-server"    apollo.meta = "http://192.168.1.204:8801"  }  zk {    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  etcd3 {    serverAddr = "http://localhost:2379"  }  file {    name = "file.conf"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、业务类"><a href="#6、业务类" class="headerlink" title="6、业务类"></a>6、业务类</h4><h5 id="1、domain"><a href="#1、domain" class="headerlink" title="1、domain"></a>1、domain</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">;</span>    <span class="token comment">/**     * 订单状态：0：创建中；1：已完结     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、dao"><a href="#2、dao" class="headerlink" title="2、dao"></a>2、dao</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建订单     */</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 修改订单金额     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OrderMapper.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.dao.OrderDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.domain.Order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        INSERT INTO `t_order` (`id`, `user_id`, `product_id`, `count`, `money`, `status`)        VALUES (NULL, #{userId}, #{productId}, #{count}, #{money}, 0);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE `t_order`        SET status = 1        WHERE user_id = #{userId} AND status = #{status};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、serivce"><a href="#3、serivce" class="headerlink" title="3、serivce"></a>3、serivce</h5><ul><li>OrderService<ul><li>OrderServiceImpl </li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建订单     */</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">OrderDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GlobalTransactional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态     * 简单说：     * 下订单-&gt;减库存-&gt;减余额-&gt;改状态     * rollbackFor = Exception.class ,任何异常都回滚     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fsp-create-order"</span><span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"===开始下单==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//本应用创建订单</span>        orderDao<span class="token punctuation">.</span>create <span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//远程调用库存服务扣减库存</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中扣减库存开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageService<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>order<span class="token punctuation">.</span>getProductId <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span>getCount <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中扣减库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//远程调用账户服务扣减余额</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中扣减余额开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>order<span class="token punctuation">.</span>getUserId <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span>getMoney <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中扣减余额结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改订单状态为已完成</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span>update <span class="token punctuation">(</span>order<span class="token punctuation">.</span>getUserId <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;order-service中修改订单状态结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;下单结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  AccountService</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-account-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减账户余额     */</span>    <span class="token comment">//@RequestMapping(value = "/account/decrease", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StorageService</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-storage-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减库存     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/storage/decrease"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、controller"><a href="#4、controller" class="headerlink" title="4、controller"></a>4、controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建订单     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/order/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"订单创建成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、Config配置"><a href="#7、Config配置" class="headerlink" title="7、Config配置"></a>7、Config配置</h4><ul><li>MybatisConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kk.springcloud.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DataSourceProxyConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    使用Seata对数据源进行代理 * @Author:         阿K * @CreateDate:     2022/3/27 13:31 * @Param: * @Return: **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.mapperLocations}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span> <span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setDataSource <span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setMapperLocations <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>getResources <span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setTransactionFactory <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span>getObject <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8、主启动"><a href="#8、主启动" class="headerlink" title="8、主启动"></a>8、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//取消数据源的自动创建</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataOrderMainApp2001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">SeataOrderMainApp2001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、新建库存Storage-Module"><a href="#3、新建库存Storage-Module" class="headerlink" title="3、新建库存Storage-Module"></a>3、新建库存Storage-Module</h3><h4 id="1、model-1"><a href="#1、model-1" class="headerlink" title="1、model"></a>1、model</h4><p>seata-storage-service2002</p><h4 id="2、pom-1"><a href="#2、pom-1" class="headerlink" title="2、pom"></a>2、pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-order-service2001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--nacos--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--seata--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--feign--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--web-actuator--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql-druid--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.37<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、yml-1"><a href="#3、yml-1" class="headerlink" title="3、yml"></a>3、yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>storage<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> fsp_tx_group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 106.52.23.202<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//106.52.23.202<span class="token punctuation">:</span>3306/seata_storage    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、file-conf-1"><a href="#4、file-conf-1" class="headerlink" title="4、file.conf"></a>4、file.conf</h4><pre class="line-numbers language-改动" data-language="改动"><code class="language-改动">vgroup_mapping.fsp_tx_group = "default"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-file.conf" data-language="file.conf"><code class="language-file.conf">transport {  # tcp udt unix-domain-socket  type = "TCP"  #NIO NATIVE  server = "NIO"  #enable heartbeat  heartbeat = true  #thread factory for netty  thread-factory {    boss-thread-prefix = "NettyBoss"    worker-thread-prefix = "NettyServerNIOWorker"    server-executor-thread-prefix = "NettyServerBizHandler"    share-boss-worker = false    client-selector-thread-prefix = "NettyClientSelector"    client-selector-thread-size = 1    client-worker-thread-prefix = "NettyClientWorkerThread"    # netty boss thread size,will not be used for UDT    boss-thread-size = 1    #auto default pin or 8    worker-thread-size = 8  }  shutdown {    # when destroy server, wait seconds    wait = 3  }  serialization = "seata"  compressor = "none"}service {  #vgroup-&gt;rgroup  vgroup_mapping.fsp_tx_group = "default"  #only support single node  default.grouplist = "127.0.0.1:8091"  #degrade current not support  enableDegrade = false  #disable  disable = false  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent  max.commit.retry.timeout = "-1"  max.rollback.retry.timeout = "-1"  disableGlobalTransaction = false}client {  async.commit.buffer.limit = 10000  lock {    retry.internal = 10    retry.times = 30  }  report.retry.count = 5  tm.commit.retry.count = 1  tm.rollback.retry.count = 1}transaction {  undo.data.validation = true  undo.log.serialization = "jackson"  undo.log.save.days = 7  #schedule delete expired undo_log in milliseconds  undo.log.delete.period = 86400000  undo.log.table = "undo_log"}support {  ## spring  spring {    # auto proxy the DataSource bean    datasource.autoproxy = false  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、registry-conf-1"><a href="#5、registry-conf-1" class="headerlink" title="5、registry.conf"></a>5、registry.conf</h4><pre class="line-numbers language-registry.conf\" data-language="registry.conf\"><code class="language-registry.conf\">registry {  # file 、nacos 、eureka、redis、zk  type = "nacos"  nacos {    serverAddr = "106.52.23.202:8848"    namespace = ""    cluster = "default"  }  eureka {    serviceUrl = "http://localhost:8761/eureka"    application = "default"    weight = "1"  }  redis {    serverAddr = "localhost:6381"    db = "0"  }  zk {    cluster = "default"    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  file {    name = "file.conf"  }}config {  # file、nacos 、apollo、zk  type = "file"  nacos {    serverAddr = "localhost"    namespace = ""    cluster = "default"  }  apollo {    app.id = "fescar-server"    apollo.meta = "http://192.168.1.204:8801"  }  zk {    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  file {    name = "file.conf"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、业务类-1"><a href="#6、业务类-1" class="headerlink" title="6、业务类"></a>6、业务类</h4><h5 id="1、domain-1"><a href="#1、domain-1" class="headerlink" title="1、domain"></a>1、domain</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 产品id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> productId<span class="token punctuation">;</span>    <span class="token comment">/**     * 总库存     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> total<span class="token punctuation">;</span>    <span class="token comment">/**     * 已用库存     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> used<span class="token punctuation">;</span>    <span class="token comment">/**     * 剩余库存     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> residue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、dao-1"><a href="#2、dao-1" class="headerlink" title="2、dao"></a>2、dao</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageDao</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减库存     */</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.dao.StorageDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.domain.Storage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE t_storage        SET used    = used + #{count},            residue = residue - #{count}        WHERE product_id = #{productId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、serivce-1"><a href="#3、serivce-1" class="headerlink" title="3、serivce"></a>3、serivce</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减库存     */</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">StorageDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageDao</span> storageDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 扣减库存     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;storage-service中扣减库存开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageDao<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;storage-service中扣减库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、controller-1"><a href="#4、controller-1" class="headerlink" title="4、controller"></a>4、controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">StorageService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token comment">/**     * 扣减库存     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/storage/decrease"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        storageService<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"扣减库存成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、Config配置-1"><a href="#7、Config配置-1" class="headerlink" title="7、Config配置"></a>7、Config配置</h4><ul><li>MybatisConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kk.springcloud.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DataSourceProxyConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    使用Seata对数据源进行代理 * @Author:         阿K * @CreateDate:     2022/3/27 13:31 * @Param: * @Return: **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.mapperLocations}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span> <span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setDataSource <span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setMapperLocations <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>getResources <span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setTransactionFactory <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span>getObject <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8、主启动-1"><a href="#8、主启动-1" class="headerlink" title="8、主启动"></a>8、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataStorageServiceApplication2002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">SeataStorageServiceApplication2002</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、新建账户Account-Module"><a href="#4、新建账户Account-Module" class="headerlink" title="4、新建账户Account-Module"></a>4、新建账户Account-Module</h3><h4 id="1、model-2"><a href="#1、model-2" class="headerlink" title="1、model"></a>1、model</h4><p>seata-account-service2003</p><h4 id="2、pom-2"><a href="#2、pom-2" class="headerlink" title="2、pom"></a>2、pom</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;    &lt;parent&gt;        &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt;        &lt;groupId&gt;com.kk&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;seata-account-service2003&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;!--nacos--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!--seata--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;seata-all&lt;/artifactId&gt;                    &lt;groupId&gt;io.seata&lt;/groupId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;io.seata&lt;/groupId&gt;            &lt;artifactId&gt;seata-all&lt;/artifactId&gt;            &lt;version&gt;1.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--feign--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;2.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.37&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.1.10&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、yml-2"><a href="#3、yml-2" class="headerlink" title="3、yml"></a>3、yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2003</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>account<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> fsp_tx_group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 106.52.23.202<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//106.52.23.202<span class="token punctuation">:</span>3306/seata_account    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、file-conf-2"><a href="#4、file-conf-2" class="headerlink" title="4、file.conf"></a>4、file.conf</h4><pre class="line-numbers language-file.conf" data-language="file.conf"><code class="language-file.conf">transport {  # tcp udt unix-domain-socket  type = "TCP"  #NIO NATIVE  server = "NIO"  #enable heartbeat  heartbeat = true  #thread factory for netty  thread-factory {    boss-thread-prefix = "NettyBoss"    worker-thread-prefix = "NettyServerNIOWorker"    server-executor-thread-prefix = "NettyServerBizHandler"    share-boss-worker = false    client-selector-thread-prefix = "NettyClientSelector"    client-selector-thread-size = 1    client-worker-thread-prefix = "NettyClientWorkerThread"    # netty boss thread size,will not be used for UDT    boss-thread-size = 1    #auto default pin or 8    worker-thread-size = 8  }  shutdown {    # when destroy server, wait seconds    wait = 3  }  serialization = "seata"  compressor = "none"}service {  vgroup_mapping.fsp_tx_group = "default" #修改自定义事务组名称  default.grouplist = "127.0.0.1:8091"  enableDegrade = false  disable = false  max.commit.retry.timeout = "-1"  max.rollback.retry.timeout = "-1"  disableGlobalTransaction = false}client {  async.commit.buffer.limit = 10000  lock {    retry.internal = 10    retry.times = 30  }  report.retry.count = 5  tm.commit.retry.count = 1  tm.rollback.retry.count = 1}## transaction log storestore {  ## store mode: file、db  mode = "db"  ## file store  file {    dir = "sessionStore"    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions    max-branch-session-size = 16384    # globe session size , if exceeded throws exceptions    max-global-session-size = 512    # file buffer size , if exceeded allocate new buffer    file-write-buffer-cache-size = 16384    # when recover batch read size    session.reload.read_size = 100    # async, sync    flush-disk-mode = async  }  ## database store  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.    datasource = "dbcp"    ## mysql/oracle/h2/oceanbase etc.    db-type = "mysql"    driver-class-name = "com.mysql.jdbc.Driver"    url = "jdbc:mysql://106.52.23.202:3306/seata"    user = "root"    password = "root"    min-conn = 1    max-conn = 3    global.table = "global_table"    branch.table = "branch_table"    lock-table = "lock_table"    query-limit = 100  }}lock {  ## the lock store mode: local、remote  mode = "remote"  local {    ## store locks in user's database  }  remote {    ## store locks in the seata's server  }}recovery {  #schedule committing retry period in milliseconds  committing-retry-period = 1000  #schedule asyn committing retry period in milliseconds  asyn-committing-retry-period = 1000  #schedule rollbacking retry period in milliseconds  rollbacking-retry-period = 1000  #schedule timeout retry period in milliseconds  timeout-retry-period = 1000}transaction {  undo.data.validation = true  undo.log.serialization = "jackson"  undo.log.save.days = 7  #schedule delete expired undo_log in milliseconds  undo.log.delete.period = 86400000  undo.log.table = "undo_log"}## metrics settingsmetrics {  enabled = false  registry-type = "compact"  # multi exporters use comma divided  exporter-list = "prometheus"  exporter-prometheus-port = 9898}support {  ## spring  spring {    # auto proxy the DataSource bean    datasource.autoproxy = false  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、registry-conf-2"><a href="#5、registry-conf-2" class="headerlink" title="5、registry.conf"></a>5、registry.conf</h4><pre class="line-numbers language-registry.conf" data-language="registry.conf"><code class="language-registry.conf">registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"  nacos {    serverAddr = "106.52.23.202:8848"    namespace = ""    cluster = "default"  }  eureka {    serviceUrl = "http://localhost:8761/eureka"    application = "default"    weight = "1"  }  redis {    serverAddr = "localhost:6379"    db = "0"  }  zk {    cluster = "default"    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  consul {    cluster = "default"    serverAddr = "127.0.0.1:8500"  }  etcd3 {    cluster = "default"    serverAddr = "http://localhost:2379"  }  sofa {    serverAddr = "127.0.0.1:9603"    application = "default"    region = "DEFAULT_ZONE"    datacenter = "DefaultDataCenter"    cluster = "default"    group = "SEATA_GROUP"    addressWaitTime = "3000"  }  file {    name = "file.conf"  }}config {  # file、nacos 、apollo、zk、consul、etcd3  type = "file"  nacos {    serverAddr = "localhost"    namespace = ""  }  consul {    serverAddr = "127.0.0.1:8500"  }  apollo {    app.id = "seata-server"    apollo.meta = "http://192.168.1.204:8801"  }  zk {    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  etcd3 {    serverAddr = "http://localhost:2379"  }  file {    name = "file.conf"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、业务类-2"><a href="#6、业务类-2" class="headerlink" title="6、业务类"></a>6、业务类</h4><h5 id="1、domain-2"><a href="#1、domain-2" class="headerlink" title="1、domain"></a>1、domain</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springclpid<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token comment">/**     * 总额度     */</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> total<span class="token punctuation">;</span>    <span class="token comment">/**     * 已用额度     */</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> used<span class="token punctuation">;</span>    <span class="token comment">/**     * 剩余额度     */</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> residue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、dao-2"><a href="#2、dao-2" class="headerlink" title="2、dao"></a>2、dao</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减账户余额     */</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kk.springcloud.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE t_account        SET          residue = residue - #{money},used = used + #{money}        WHERE          user_id = #{userId};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、serivce-2"><a href="#3、serivce-2" class="headerlink" title="3、serivce"></a>3、serivce</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 扣减账户余额     *     * @param userId 用户id     * @param money  金额     */</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">AccountDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span>getLogger <span class="token punctuation">(</span><span class="token class-name">AccountServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 扣减账户余额     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;account-service中扣减账户余额开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模拟超时异常，全局事务回滚</span>        <span class="token comment">//暂停几秒钟线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        accountDao<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"-------&gt;account-service中扣减账户余额结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、controller-2"><a href="#4、controller-2" class="headerlink" title="4、controller"></a>4、controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">AccountService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token comment">/**     * 扣减账户余额     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountService<span class="token punctuation">.</span>decrease <span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"扣减账户余额成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、Config配置-2"><a href="#7、Config配置-2" class="headerlink" title="7、Config配置"></a>7、Config配置</h4><ul><li>MybatisConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kk.springcloud.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DataSourceProxyConfig</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/* * @Description:    使用Seata对数据源进行代理 * @Author:         阿K * @CreateDate:     2022/3/27 13:31 * @Param: * @Return: **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.mapperLocations}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span> <span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setDataSource <span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setMapperLocations <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>getResources <span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span>setTransactionFactory <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span>getObject <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8、主启动-2"><a href="#8、主启动-2" class="headerlink" title="8、主启动"></a>8、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataAccountMainApp2003</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">SeataAccountMainApp2003</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Test"><a href="#六、Test" class="headerlink" title="六、Test"></a>六、Test</h2><h3 id="1、初始情况"><a href="#1、初始情况" class="headerlink" title="1、初始情况"></a>1、初始情况</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220327221856.png"></p><h3 id="2、正常下单"><a href="#2、正常下单" class="headerlink" title="2、正常下单"></a>2、正常下单</h3><h4 id="1、请求"><a href="#1、请求" class="headerlink" title="1、请求"></a>1、请求</h4><p><a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><h4 id="2、数据库情况"><a href="#2、数据库情况" class="headerlink" title="2、数据库情况"></a>2、数据库情况</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220327235131.png"></p><h3 id="3、无注解"><a href="#3、无注解" class="headerlink" title="3、无注解"></a>3、无注解</h3><p><strong>超时异常，没加@GlobalTransactional</strong></p><p>1、AccountServiceImpl添加超时</p><p>2、数据库情况</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220327235239.png"></p><p>3、故障情况</p><ul><li>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1</li><li>而且由于feign的重试机制，账户余额还有可能被多次扣减</li></ul><h3 id="4、有注解"><a href="#4、有注解" class="headerlink" title="4、有注解"></a>4、有注解</h3><p><strong>超时异常，添加@GlobalTransactional</strong></p><p>1、AccountServiceImpl添加超时</p><p>2、OrderServiceImpl@GlobalTransactional</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fsp-create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span>。。。。。。<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、结果</p><ul><li>下单后数据库数据并没有任何改变</li><li>记录都添加不进来</li></ul><h2 id="七、一部分补充"><a href="#七、一部分补充" class="headerlink" title="七、一部分补充"></a>七、一部分补充</h2><h3 id="1、再看TC-TM-RM三大组件"><a href="#1、再看TC-TM-RM三大组件" class="headerlink" title="1、再看TC/TM/RM三大组件"></a>1、再看TC/TM/RM三大组件</h3><p><strong>分布式事务的执行流程</strong></p><p>1、TM 开启分布式事务（TM 向 TC 注册全局事务记录）；</p><p>2、按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；</p><p>3、TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；</p><p>4、TC 汇总事务信息，决定分布式事务是提交还是回滚；</p><p>5、TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000204.png"></p><h3 id="2、AT模式如何做到对业务的无侵入"><a href="#2、AT模式如何做到对业务的无侵入" class="headerlink" title="2、AT模式如何做到对业务的无侵入"></a>2、AT模式如何做到对业务的无侵入</h3><h4 id="1、是什么-1"><a href="#1、是什么-1" class="headerlink" title="1、是什么"></a>1、是什么</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000223.png"></p><h4 id="2、一阶段加载"><a href="#2、一阶段加载" class="headerlink" title="2、一阶段加载"></a>2、一阶段加载</h4><p>在一阶段，Seata 会拦截“业务 SQL”，<br>1  解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，<br>2  执行“业务 SQL”更新业务数据，在业务数据更新之后，<br>3  其保存成“after image”，最后生成行锁。<br>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000410.png"></p><h4 id="3、二阶段提交"><a href="#3、二阶段提交" class="headerlink" title="3、二阶段提交"></a>3、二阶段提交</h4><p>二阶段如是顺利提交的话，<br>因为“业务 SQL”在一阶段已经提交至数据库，所以Seata框架只需将<code>一阶段保存的快照数据和行锁删掉，完成数据清理即可</code>。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000347.png"></p><h4 id="3、二阶段回滚"><a href="#3、二阶段回滚" class="headerlink" title="3、二阶段回滚"></a>3、二阶段回滚</h4><p>二阶段回滚：<br>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL”，还原业务数据。<br>回滚方式便是用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”，<br>如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000322.png"></p><h3 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220328000437.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="参考文档-↓"><a href="#参考文档-↓" class="headerlink" title="参考文档 ↓"></a>参考文档 ↓</h2><p>docker 安装问题：<a href="https://www.cnblogs.com/youngyajun/p/14002547.html">https://www.cnblogs.com/youngyajun/p/14002547.html</a></p><p>docker 网络问题：<a href="https://blog.csdn.net/tilyp/article/details/103371360">https://blog.csdn.net/tilyp/article/details/103371360</a></p><p>docker 运行问题：<a href="https://www.manongdao.com/article-2421258.html">https://www.manongdao.com/article-2421258.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式技术栈" scheme="https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="springcloud-alibaba" scheme="https://mykkto.github.io/tags/springcloud-alibaba/"/>
    
    <category term="seata" scheme="https://mykkto.github.io/tags/seata/"/>
    
    <category term="分布式事务" scheme="https://mykkto.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>云主机部署并同步更新二级域名</title>
    <link href="https://mykkto.github.io/posts/829b453d.html"/>
    <id>https://mykkto.github.io/posts/829b453d.html</id>
    <published>2022-03-20T08:17:13.000Z</published>
    <updated>2022-11-22T15:05:04.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、本地拉取配置"><a href="#一、本地拉取配置" class="headerlink" title="一、本地拉取配置"></a>一、本地拉取配置</h2><h3 id="1、创建并启动"><a href="#1、创建并启动" class="headerlink" title="1、创建并启动"></a>1、创建并启动</h3><h4 id="1、拉取"><a href="#1、拉取" class="headerlink" title="1、拉取"></a>1、拉取</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx<span class="token punctuation">-</span>test <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span>d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– name 容器命名</p><p>-v 映射目录</p><p>-d 设置容器后台运行</p><p>-p 本机端口映射 将容器的80端口映射到本机的80端口</p><h3 id="2、映射到本地"><a href="#2、映射到本地" class="headerlink" title="2、映射到本地"></a>2、映射到本地</h3><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><p>首先在本机创建nginx的一些文件存储目录</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>www</strong>: nginx存储网站网页的目录</p><p><strong>logs</strong>: nginx日志目录</p><p><strong>conf</strong>: nginx配置文件目录</p><h4 id="2、映射"><a href="#2、映射" class="headerlink" title="2、映射"></a>2、映射</h4><p>（1）先查看容器</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker ps <span class="token punctuation">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）映射</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker cp 481e121fb29f<span class="token punctuation">:</span>/etc/nginx/nginx.conf /root/nginx/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h3><p>需要说明下，ngxin-test 容器是为了获得容器的配置文件，最终使用的是 nginx-web</p><p>目前已经启动 nginx-test 80端口，若是 nginx-web指定的也是 80，就需要关闭 nginx-test了</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker stop nginx<span class="token punctuation">-</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1、新容器映射"><a href="#1、新容器映射" class="headerlink" title="1、新容器映射"></a>1、新容器映射</h4><p>创建新nginx容器nginx-web,并将<strong>www,logs,conf</strong>目录映射到本地</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx<span class="token punctuation">-</span>web <span class="token punctuation">-</span>v /root/nginx/www<span class="token punctuation">:</span>/usr/share/nginx/html <span class="token punctuation">-</span>v /root/nginx/conf/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf <span class="token punctuation">-</span>v /root/nginx/logs<span class="token punctuation">:</span>/var/log/nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、启动-1"><a href="#2、启动-1" class="headerlink" title="2、启动"></a>2、启动</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker start nginx<span class="token punctuation">-</span>web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="二、下载git"><a href="#二、下载git" class="headerlink" title="二、下载git"></a>二、下载git</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、配置github-代理"><a href="#2、配置github-代理" class="headerlink" title="2、配置github 代理"></a>2、配置github 代理</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global url.<span class="token string">"https://ghproxy.com/https://github.com"</span>.insteadOf <span class="token string">"https://github.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、拉取"><a href="#3、拉取" class="headerlink" title="3、拉取"></a>3、拉取</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone  https://github.com/mykkTo/mykkTo.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、剪切文件"><a href="#4、剪切文件" class="headerlink" title="4、剪切文件"></a>4、剪切文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /root/nginx/www/mykkTo.github.io/* /root/nginx/www<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、定时任务"><a href="#三、定时任务" class="headerlink" title="三、定时任务"></a>三、定时任务</h2><h3 id="1、编写shell脚本"><a href="#1、编写shell脚本" class="headerlink" title="1、编写shell脚本"></a>1、编写shell脚本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#删除原始静态页面数据以及拉取的文件夹</span><span class="token function">rm</span> -rf /root/nginx/www/*<span class="token function">rm</span> -rf /root/nginx/mykkTo.github.iopwd<span class="token comment">#拉取，剪切到80映射下</span><span class="token builtin class-name">cd</span>  /root/nginx/<span class="token function">git</span> clone https://github.com/mykkTo/mykkTo.github.io.git<span class="token function">mv</span> /root/nginx/mykkTo.github.io/* /root/nginx/www<span class="token comment">#复制令牌用户百度站长验证使用</span><span class="token function">cp</span> /root/nginx/baidu_verify_code-Os7hLX61vV.html /root/nginx/www/baidu_verify_code-Os7hLX61vV.html<span class="token comment">#替换文本，用于百度站长seo映射</span><span class="token function">sed</span> <span class="token string">'s/github.io/cn/g'</span> /root/nginx/www/baidu_urls.txt<span class="token operator">&gt;</span>/root/nginx/www/baidu_urls1.txt<span class="token function">sed</span> <span class="token string">'s/https/http/g'</span> /root/nginx/www/baidu_urls1.txt<span class="token operator">&gt;</span>/root/nginx/www/baidu_urls2.txt<span class="token builtin class-name">echo</span> <span class="token string">"============成功========="</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、创建定时任务"><a href="#2、创建定时任务" class="headerlink" title="2、创建定时任务"></a>2、创建定时任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321202335.png"></p><p><strong>补充：</strong></p><p>linux 黑洞，防止资源占用</p><p><code>/dev/null 2&gt;&amp;1</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#后缀加上</span>/root/nginx/synblog.sh /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>启动：</strong></p><p>这边设置没一个小时更新一次（需要注意centos7.6写法启动）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> crond start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、SSL证书"><a href="#四、SSL证书" class="headerlink" title="四、SSL证书"></a>四、SSL证书</h2><h3 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h3><p>数据加密：开启 HTTPS 绿色加密通道，网站数据的加密传输，防止网站核心数据被窃取或篡改。</p><p>简单来说，就是把 http 访问的变成 https，并且浏览器显示安全，不在是不安全了</p><h3 id="2、获取证书"><a href="#2、获取证书" class="headerlink" title="2、获取证书"></a>2、获取证书</h3><h4 id="1、下载-1"><a href="#1、下载-1" class="headerlink" title="1、下载"></a>1、下载</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331205350.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331205411.png"></p><h4 id="2、上传到服务器并解压"><a href="#2、上传到服务器并解压" class="headerlink" title="2、上传到服务器并解压"></a>2、上传到服务器并解压</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331205527.png"></p><h3 id="3、重挂载"><a href="#3、重挂载" class="headerlink" title="3、重挂载"></a>3、重挂载</h3><h4 id="1、删掉之前的容器"><a href="#1、删掉之前的容器" class="headerlink" title="1、删掉之前的容器"></a>1、删掉之前的容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker rm <span class="token punctuation">-</span>f nginx<span class="token punctuation">-</span>web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、重新挂载"><a href="#2、重新挂载" class="headerlink" title="2、重新挂载"></a>2、重新挂载</h4><p>1、新增了 443端口映射，目录挂载</p><p>2、容器外，在nginx底下，创建新目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span>   lls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331204305.png"></p><p>3、创建容器</p><p>多加了两个配置</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 443<span class="token punctuation">:</span>443 <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx<span class="token punctuation">-</span>web <span class="token punctuation">-</span>v /root/nginx/www<span class="token punctuation">:</span>/usr/share/nginx/html <span class="token punctuation">-</span>v /root/nginx/conf/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf <span class="token punctuation">-</span>v /root/nginx/logs<span class="token punctuation">:</span>/var/log/nginx <span class="token punctuation">-</span>v /root/nginx/lls/<span class="token punctuation">:</span>/etc/nginx/ssl nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、修改配置"><a href="#4、修改配置" class="headerlink" title="4、修改配置"></a>4、修改配置</h3><p>nginx.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">user</span>  nginx<span class="token punctuation">;</span><span class="token keyword">worker_processes</span>  auto<span class="token punctuation">;</span><span class="token keyword">error_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log notice<span class="token punctuation">;</span><span class="token keyword">pid</span>        <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone<span class="token operator">=</span>mylimit<span class="token punctuation">:</span><span class="token number">10</span>m rate<span class="token operator">=</span><span class="token number">2</span>r<span class="token operator">/</span>s<span class="token punctuation">;</span><span class="token keyword">include</span>       <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>    <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>    <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment">#gzip  on;</span>   <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>  <span class="token keyword">server</span><span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>        <span class="token comment">#对应的域名，把mykkto.cn改成你们自己的域名就可以了</span>        <span class="token keyword">server_name</span> mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>        <span class="token comment">#证书的两个配置文件</span>        <span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">/</span><span class="token number">7526194</span>_www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>        <span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">/</span><span class="token number">7526194</span>_www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>key<span class="token punctuation">;</span><span class="token comment">#以下都是一些加密规则</span>        <span class="token keyword">ssl_session_timeout</span> <span class="token number">5</span>m<span class="token punctuation">;</span>        <span class="token keyword">ssl_protocols</span> TLSv1 TLSv1<span class="token punctuation">.</span><span class="token number">1</span> TLSv1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">ssl_ciphers</span> ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">!</span>DHE<span class="token punctuation">;</span>        <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>        <span class="token comment">#这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token comment">#文件夹（这个其实挂载的就是外部的www目录下的静态资源）</span>                <span class="token keyword">root</span> <span class="token operator">/</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>                <span class="token comment">#主页文件</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>   <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment">#这边空格隔开，配置了两个，因为加了www也要配置</span>       <span class="token keyword">server_name</span> mykkto<span class="token punctuation">.</span>cn www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>       <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">443</span><span class="token operator">/</span>$<span class="token number">1</span> permanent<span class="token punctuation">;</span>  <span class="token comment"># location / {</span>  <span class="token comment">#     limit_req zone=mylimit;</span>  <span class="token comment">#}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、重启并测试"><a href="#5、重启并测试" class="headerlink" title="5、重启并测试"></a>5、重启并测试</h3><h4 id="1、重启"><a href="#1、重启" class="headerlink" title="1、重启"></a>1、重启</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker restart nginx<span class="token punctuation">-</span>web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h4><p>1、访问，<a href="http://www.mykkto.cnm,自动跳转/">www.mykkto.cnm，自动跳转</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331204859.png"></p><p>2、访问，mykkto.cn，自动跳转</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220331204919.png"></p><h2 id="五、IP黑名单限制"><a href="#五、IP黑名单限制" class="headerlink" title="五、IP黑名单限制"></a>五、IP黑名单限制</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><h4 id="1、用到什么技术栈"><a href="#1、用到什么技术栈" class="headerlink" title="1、用到什么技术栈"></a>1、用到什么技术栈</h4><p>首先，基本架构是  docker+nginx+lua+mysql这是最初的想法，但是作者用了docker搭建的nginx，lua模块集成不是很方便，所以替换成了，OpenResty。</p><h4 id="2、什么是-OpenResty"><a href="#2、什么是-OpenResty" class="headerlink" title="2、什么是 OpenResty"></a>2、什么是 OpenResty</h4><p>简单来说就是 lua + nginx，当然还有更多功能，自己百度吧</p><h4 id="3、遇到的问题"><a href="#3、遇到的问题" class="headerlink" title="3、遇到的问题"></a>3、遇到的问题</h4><p>简单描述下，上面用到的 <code>nginx.conf</code>写法，前缀 <code>user  nginx;</code> 会导致无法运行，因为openresty没有这个用户，可以自己新建，我采用的是改写配置。</p><h3 id="2、搭建-OpenResty"><a href="#2、搭建-OpenResty" class="headerlink" title="2、搭建 OpenResty"></a>2、搭建 OpenResty</h3><h4 id="1、拉取-1"><a href="#1、拉取-1" class="headerlink" title="1、拉取"></a>1、拉取</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull openresty/openresty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、挂载并启动"><a href="#2、挂载并启动" class="headerlink" title="2、挂载并启动"></a>2、挂载并启动</h4><p><strong>说明下：</strong></p><ul><li>完全基于上面的nginx配置的三个部分，唯一修改的是 <code>nginx.conf</code>配置文件，这边挂载改成了 <code>nginx2.conf</code>，用于保留之前的（自己懒而已）</li><li>新增了，lua文件挂载</li><li>修改了容器内的挂载位置，因为 openresty容器位置不一样了(外部还是不变，容器内的位置变了)</li></ul><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 443<span class="token punctuation">:</span>443 <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>name openresty <span class="token punctuation">-</span>v /root/nginx/www<span class="token punctuation">:</span>/usr/local/openresty/nginx/html <span class="token punctuation">-</span>v /root/nginx/conf/nginx2.conf<span class="token punctuation">:</span>/usr/local/openresty/nginx/conf/nginx.conf <span class="token punctuation">-</span>v /root/nginx/logs<span class="token punctuation">:</span>/usr/local/openresty/nginx/logs <span class="token punctuation">-</span>v  /root/nginx/lls/<span class="token punctuation">:</span>/usr/local/openresty/nginx/ssl <span class="token punctuation">-</span>v  /root/nginx/lua/<span class="token punctuation">:</span>/usr/local/openresty/nginx/lua  openresty/openresty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、配置文件修改"><a href="#3、配置文件修改" class="headerlink" title="3、配置文件修改"></a>3、配置文件修改</h3><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><p>这是自带的，可以自己  DIY</p><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf"># nginx.conf  --  docker-openresty## This file is installed to:#   `/usr/local/openresty/nginx/conf/nginx.conf`# and is the file loaded by nginx at startup,# unless the user specifies otherwise.## It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`# section and adds this directive:#     `include /etc/nginx/conf.d/*.conf;`## The `docker-openresty` file `nginx.vh.default.conf` is copied to# `/etc/nginx/conf.d/default.conf`.  It contains the `server section# of the upstream `nginx.conf`.## See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files##user  nobody;#worker_processes 1;# Enables the use of JIT for regular expressions to speed-up their processing.pcre_jit on;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    # Enables or disables the use of underscores in client request header fields.    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.    # underscores_in_headers off;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;        # Log in JSON Format        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '        # '"remote_addr": "$remote_addr", '        #  '"body_bytes_sent": $body_bytes_sent, '        #  '"request_time": $request_time, '        #  '"response_status": $status, '        #  '"request": "$request", '        #  '"request_method": "$request_method", '        #  '"host": "$host",'        #  '"upstream_addr": "$upstream_addr",'        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'        #  '"http_referrer": "$http_referer", '        #  '"http_user_agent": "$http_user_agent", '        #  '"http_version": "$server_protocol", '        #  '"nginx_access": true }';        # access_log /dev/stdout nginxlog_json;    # See Move default writable paths to a dedicated directory (#119)    # https://github.com/openresty/docker-openresty/issues/119    client_body_temp_path /var/run/openresty/nginx-client-body;    proxy_temp_path       /var/run/openresty/nginx-proxy;    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;    scgi_temp_path        /var/run/openresty/nginx-scgi;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    include /etc/nginx/conf.d/*.conf;    # Don't reveal OpenResty version to clients.    # server_tokens off;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、引入之前的配置"><a href="#2、引入之前的配置" class="headerlink" title="2、引入之前的配置"></a>2、引入之前的配置</h4><p>在初始的基础上加上，两个之前写好的 server 块，以及lua脚本用于测试</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">#</span> nginx<span class="token punctuation">.</span>conf  <span class="token comment">--  docker-openresty</span><span class="token operator">#</span><span class="token operator">#</span> This file is installed to<span class="token punctuation">:</span><span class="token operator">#</span>   `<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf`<span class="token operator">#</span> <span class="token keyword">and</span> is the file loaded by nginx at startup<span class="token punctuation">,</span><span class="token operator">#</span> unless the user specifies otherwise<span class="token punctuation">.</span><span class="token operator">#</span><span class="token operator">#</span> It tracks the upstream OpenResty's `nginx<span class="token punctuation">.</span>conf`<span class="token punctuation">,</span> but removes the `server`<span class="token operator">#</span> section <span class="token keyword">and</span> adds this directive<span class="token punctuation">:</span><span class="token operator">#</span>     `include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>`<span class="token operator">#</span><span class="token operator">#</span> The `docker<span class="token operator">-</span>openresty` file `nginx<span class="token punctuation">.</span>vh<span class="token punctuation">.</span>default<span class="token punctuation">.</span>conf` is copied to<span class="token operator">#</span> `<span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>default<span class="token punctuation">.</span>conf`<span class="token punctuation">.</span>  It contains the `server section<span class="token operator">#</span> of the upstream `nginx<span class="token punctuation">.</span>conf`<span class="token punctuation">.</span><span class="token operator">#</span><span class="token operator">#</span> See https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>openresty<span class="token operator">/</span>docker<span class="token operator">-</span>openresty<span class="token operator">/</span>blob<span class="token operator">/</span>master<span class="token operator">/</span>README<span class="token punctuation">.</span>md<span class="token operator">#</span>nginx<span class="token operator">-</span>config<span class="token operator">-</span>files<span class="token operator">#</span><span class="token operator">#</span>user  nobody<span class="token punctuation">;</span><span class="token operator">#</span>worker_processes <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">#</span> Enables the use of JIT <span class="token keyword">for</span> regular expressions to speed<span class="token operator">-</span>up their processing<span class="token punctuation">.</span>pcre_jit on<span class="token punctuation">;</span><span class="token operator">#</span>error_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token operator">#</span>error_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log  notice<span class="token punctuation">;</span><span class="token operator">#</span>error_log  logs<span class="token operator">/</span>error<span class="token punctuation">.</span>log  info<span class="token punctuation">;</span><span class="token operator">#</span>pid        logs<span class="token operator">/</span>nginx<span class="token punctuation">.</span>pid<span class="token punctuation">;</span><span class="token function">events</span> <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">http</span> <span class="token punctuation">{</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token operator">#</span> Enables <span class="token keyword">or</span> disables the use of underscores <span class="token keyword">in</span> client request header fields<span class="token punctuation">.</span>    <span class="token operator">#</span> When the use of underscores is disabled<span class="token punctuation">,</span> request header fields whose names contain underscores are marked as invalid <span class="token keyword">and</span> become subject to the ignore_invalid_headers directive<span class="token punctuation">.</span>    <span class="token operator">#</span> underscores_in_headers off<span class="token punctuation">;</span>    <span class="token operator">#</span>log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>    <span class="token operator">#</span>                  <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>    <span class="token operator">#</span>                  <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>    <span class="token operator">#</span>access_log  logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>        <span class="token operator">#</span> Log <span class="token keyword">in</span> JSON Format        <span class="token operator">#</span> log_format nginxlog_json escape<span class="token operator">=</span>json <span class="token string">'{ "timestamp": "$time_iso8601", '</span>        <span class="token operator">#</span> <span class="token string">'"remote_addr": "$remote_addr", '</span>        <span class="token operator">#</span>  <span class="token string">'"body_bytes_sent": $body_bytes_sent, '</span>        <span class="token operator">#</span>  <span class="token string">'"request_time": $request_time, '</span>        <span class="token operator">#</span>  <span class="token string">'"response_status": $status, '</span>        <span class="token operator">#</span>  <span class="token string">'"request": "$request", '</span>        <span class="token operator">#</span>  <span class="token string">'"request_method": "$request_method", '</span>        <span class="token operator">#</span>  <span class="token string">'"host": "$host",'</span>        <span class="token operator">#</span>  <span class="token string">'"upstream_addr": "$upstream_addr",'</span>        <span class="token operator">#</span>  <span class="token string">'"http_x_forwarded_for": "$http_x_forwarded_for",'</span>        <span class="token operator">#</span>  <span class="token string">'"http_referrer": "$http_referer", '</span>        <span class="token operator">#</span>  <span class="token string">'"http_user_agent": "$http_user_agent", '</span>        <span class="token operator">#</span>  <span class="token string">'"http_version": "$server_protocol", '</span>        <span class="token operator">#</span>  <span class="token string">'"nginx_access": true }'</span><span class="token punctuation">;</span>        <span class="token operator">#</span> access_log <span class="token operator">/</span>dev<span class="token operator">/</span>stdout nginxlog_json<span class="token punctuation">;</span>    <span class="token operator">#</span> See Move default writable paths to a dedicated <span class="token function">directory</span> <span class="token punctuation">(</span><span class="token operator">#</span><span class="token number">119</span><span class="token punctuation">)</span>    <span class="token operator">#</span> https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>openresty<span class="token operator">/</span>docker<span class="token operator">-</span>openresty<span class="token operator">/</span>issues<span class="token operator">/</span><span class="token number">119</span>    client_body_temp_path <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">-</span>client<span class="token operator">-</span>body<span class="token punctuation">;</span>    proxy_temp_path       <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">-</span>proxy<span class="token punctuation">;</span>    fastcgi_temp_path     <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">-</span>fastcgi<span class="token punctuation">;</span>    uwsgi_temp_path       <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">-</span>uwsgi<span class="token punctuation">;</span>    scgi_temp_path        <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">-</span>scgi<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    <span class="token operator">#</span>tcp_nopush     on<span class="token punctuation">;</span>    <span class="token operator">#</span>keepalive_timeout  <span class="token number">0</span><span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token operator">#</span>gzip  on<span class="token punctuation">;</span>    include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>  <span class="token function">server</span><span class="token punctuation">{</span>        listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>        <span class="token operator">#</span>对应的域名，把mykkto<span class="token punctuation">.</span>cn改成你们自己的域名就可以了        server_name mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>        <span class="token operator">#</span>证书的两个配置文件        ssl_certificate <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>ssl<span class="token operator">/</span>7526194_www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>        ssl_certificate_key <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>ssl<span class="token operator">/</span>7526194_www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>key<span class="token punctuation">;</span><span class="token operator">#</span>以下都是一些加密规则        ssl_session_timeout 5m<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1<span class="token punctuation">.</span><span class="token number">1</span> TLSv1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">;</span>        ssl_ciphers ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span>!aNULL<span class="token punctuation">:</span>!MD5<span class="token punctuation">:</span>!RC4<span class="token punctuation">:</span>!DHE<span class="token punctuation">;</span>        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>        <span class="token operator">#</span>这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。        location <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token operator">#</span>文件夹（这个其实挂载的就是外部的www目录下的静态资源）                root <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>                <span class="token operator">#</span>主页文件                index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">#</span>lua脚本用于测试location <span class="token operator">/</span><span class="token function">lua</span> <span class="token punctuation">{</span>   default_type <span class="token string">'text/html'</span><span class="token punctuation">;</span>   content_by_lua <span class="token string">'ngx.say("&lt;h1&gt; hello,openrestry&lt;/h1&gt;")'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token function">server</span> <span class="token punctuation">{</span>   listen <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token operator">#</span>这边空格隔开，配置了两个，因为加了www也要配置       server_name mykkto<span class="token punctuation">.</span>cn www<span class="token punctuation">.</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>       rewrite <span class="token operator">^</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ https<span class="token punctuation">:</span><span class="token operator">//</span>mykkto<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">443</span><span class="token operator">/</span>$<span class="token number">1</span> permanent<span class="token punctuation">;</span>  <span class="token operator">#</span> location <span class="token operator">/</span> <span class="token punctuation">{</span>  <span class="token operator">#</span>     limit_req zone<span class="token operator">=</span>mylimit<span class="token punctuation">;</span>  <span class="token operator">#</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">#</span> Don't reveal OpenResty version to clients<span class="token punctuation">.</span>    <span class="token operator">#</span> server_tokens off<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、测试lua脚本"><a href="#3、测试lua脚本" class="headerlink" title="3、测试lua脚本"></a>3、测试lua脚本</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220403120349.png"></p><h2 id="六、限流"><a href="#六、限流" class="headerlink" title="六、限流"></a>六、限流</h2><h3 id="1、配置"><a href="#1、配置" class="headerlink" title="1、配置"></a>1、配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http <span class="token punctuation">{</span>    limit_req_zone <span class="token variable">$binary_remote_addr</span> <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:10m <span class="token assign-left variable">rate</span><span class="token operator">=</span>5r/s<span class="token punctuation">;</span>    server <span class="token punctuation">{</span>        location /search/ <span class="token punctuation">{</span>            limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>one <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span> nodelay<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</strong></p><ul><li>第一个参数：<code>$binary_remote_addr</code> 表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址。</li><li>第二个参数：<code>zone=one:10m</code>表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息。</li><li>第三个参数：<code>rate=5r/s</code>表示允许相同标识的客户端的访问频次，这里限制的是每秒 5 次，还可以有比如30r/m的。</li></ul><p><strong>limit_req zone=one burst=5 nodelay;</strong></p><ul><li>第一个参数：<code>zone=one</code> 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。</li><li>第二个参数：<code>burst=5</code>，重点说明一下这个配置，burst爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。</li><li>第三个参数：<code>nodelay</code>，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。</li></ul><h3 id="2、网站配置源码"><a href="#2、网站配置源码" class="headerlink" title="2、网站配置源码"></a>2、网站配置源码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#user  nobody;</span><span class="token comment">#worker_processes 1;</span><span class="token comment"># Enables the use of JIT for regular expressions to speed-up their processing.</span>pcre_jit on<span class="token punctuation">;</span><span class="token comment">#error_log  logs/error.log;</span><span class="token comment">#error_log  logs/error.log  notice;</span><span class="token comment">#error_log  logs/error.log  info;</span><span class="token comment">#pid        logs/nginx.pid;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/octet-stream<span class="token punctuation">;</span>        server_tokens off<span class="token punctuation">;</span>        <span class="token comment">#引入lib包</span>    lua_package_path <span class="token string">"/usr/local/openresty/lualib/?.lua;;"</span><span class="token punctuation">;</span>        <span class="token comment">#开辟一块内存区域</span>        lua_shared_dict ip_blacklist 4m<span class="token punctuation">;</span>    <span class="token comment"># Enables or disables the use of underscores in client request header fields.</span>    <span class="token comment"># When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.</span>    <span class="token comment"># underscores_in_headers off;</span>    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>    <span class="token comment">#access_log  logs/access.log  main;</span>        <span class="token comment"># Log in JSON Format</span>        <span class="token comment"># log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '</span>        <span class="token comment"># '"remote_addr": "$remote_addr", '</span>        <span class="token comment">#  '"body_bytes_sent": $body_bytes_sent, '</span>        <span class="token comment">#  '"request_time": $request_time, '</span>        <span class="token comment">#  '"response_status": $status, '</span>        <span class="token comment">#  '"request": "$request", '</span>        <span class="token comment">#  '"request_method": "$request_method", '</span>        <span class="token comment">#  '"host": "$host",'</span>        <span class="token comment">#  '"upstream_addr": "$upstream_addr",'</span>        <span class="token comment">#  '"http_x_forwarded_for": "$http_x_forwarded_for",'</span>        <span class="token comment">#  '"http_referrer": "$http_referer", '</span>        <span class="token comment">#  '"http_user_agent": "$http_user_agent", '</span>        <span class="token comment">#  '"http_version": "$server_protocol", '</span>        <span class="token comment">#  '"nginx_access": true }';</span>        <span class="token comment"># access_log /dev/stdout nginxlog_json;</span>    <span class="token comment"># See Move default writable paths to a dedicated directory (#119)</span>    <span class="token comment"># https://github.com/openresty/docker-openresty/issues/119</span>    client_body_temp_path /var/run/openresty/nginx-client-body<span class="token punctuation">;</span>    proxy_temp_path       /var/run/openresty/nginx-proxy<span class="token punctuation">;</span>    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi<span class="token punctuation">;</span>    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi<span class="token punctuation">;</span>    scgi_temp_path        /var/run/openresty/nginx-scgi<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token comment">#keepalive_timeout  0;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment">#gzip  on;</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span><span class="token comment">#限流设置</span>limit_req_zone <span class="token variable">$binary_remote_addr</span> <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:30m <span class="token assign-left variable">rate</span><span class="token operator">=</span>10r/s<span class="token punctuation">;</span>         server<span class="token punctuation">{</span>        listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>        <span class="token comment">#对应的域名，把mykkto.cn改成你们自己的域名就可以了</span>        server_name mykkto.cn<span class="token punctuation">;</span>        <span class="token comment">#证书的两个配置文件</span>        ssl_certificate /usr/local/openresty/nginx/ssl/7526194_www.mykkto.cn.pem<span class="token punctuation">;</span>        ssl_certificate_key /usr/local/openresty/nginx/ssl/7526194_www.mykkto.cn.key<span class="token punctuation">;</span>                <span class="token comment">#以下都是一些加密规则</span>        ssl_session_timeout 5m<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span>        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>        <span class="token comment">#这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。</span>                <span class="token builtin class-name">set</span> <span class="token variable">$real_ip</span> <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$http_x_forwarded_for</span> ~ <span class="token string">"^(\d+\.\d+\.\d+\.\d+)"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">set</span> <span class="token variable">$real_ip</span> <span class="token variable">$1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>          <span class="token comment"># 管理信息，访问该URL可以查看nginx中的IP黑名单信息</span>  location /get-ipblacklist-info <span class="token punctuation">{</span>    access_by_lua_file /usr/local/openresty/nginx/lua/get_ipblacklist_info.lua<span class="token punctuation">;</span>  <span class="token punctuation">}</span>        <span class="token comment"># 同步URL，通过定时任务调用该URL,实现IP黑名单从mysql到nginx的定时刷新</span>  location /sync-ipblacklist <span class="token punctuation">{</span>   access_by_lua_file /usr/local/openresty/nginx/lua/sync_ipblacklist.lua<span class="token punctuation">;</span>  <span class="token punctuation">}</span>        location / <span class="token punctuation">{</span><span class="token comment">#限流</span>limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>one <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">10</span> nodelay<span class="token punctuation">;</span>                                <span class="token comment"># 所有IP进来都要校验</span>                                access_by_lua_file /usr/local/openresty/nginx/lua/check_realip.lua<span class="token punctuation">;</span><span class="token comment">#                               proxy_read_timeout  60s;</span><span class="token comment">#                               proxy_set_header    Host $http_host;</span><span class="token comment">#                               proxy_set_header    X-Real_IP $remote_addr;</span><span class="token comment">#                               proxy_set_header    X-Forwarded-for $remote_addr;</span><span class="token comment">#                               proxy_http_version  1.1;</span>                <span class="token comment">#文件夹（这个其实挂载的就是外部的www目录下的静态资源）</span>                root /usr/local/openresty/nginx/html<span class="token punctuation">;</span>                <span class="token comment">#主页文件</span>                index index.html<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span>   server <span class="token punctuation">{</span>   listen <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment">#这边空格隔开，配置了两个，因为加了www也要配置</span>       server_name mykkto.cn www.mykkto.cn<span class="token punctuation">;</span>       rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://mykkto.cn:443/<span class="token variable">$1</span> permanent<span class="token punctuation">;</span>  <span class="token comment"># location / {</span>  <span class="token comment">#     limit_req zone=mylimit;</span>  <span class="token comment">#}</span><span class="token punctuation">}</span>    <span class="token comment"># Don't reveal OpenResty version to clients.</span>    <span class="token comment"># server_tokens off;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>QPS：3000压测 5次</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220410235912.png"></p><p>压测的IP为  A，通过，同网段的机器访问（手机模拟），503异常，结论被限流成功</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/testfsjhdgjdhfjk1.jpg"></p><p>切换网段B ，非压测IP 不限流，测试成功</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/fkdgjgdhjf56jh7j6h.jpg"></p><h2 id="七、DNS解析-Github-Pages（无服务器化）"><a href="#七、DNS解析-Github-Pages（无服务器化）" class="headerlink" title="七、DNS解析+Github Pages（无服务器化）"></a>七、DNS解析+Github Pages（无服务器化）</h2><p>前提：先买个DNS解析，博主目前域名和DNS解析都是买阿里云的</p><h3 id="1、DNS解析域名"><a href="#1、DNS解析域名" class="headerlink" title="1、DNS解析域名"></a>1、DNS解析域名</h3><p>这个是初版1.0，错误的，因为 主机记录解析  * 可能覆盖后面床图指向的 v1 配置</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211051308830.png"></p><p>正确配置：最新版！！！</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222248798.png"></p><h3 id="2、Github-Pages"><a href="#2、Github-Pages" class="headerlink" title="2、Github Pages"></a>2、Github Pages</h3><p>进入自己二级静态网站仓库，配置（如果有配SSL证书的打勾，没有不需要打勾 HTTPS）</p><p>关于证书：后面搭建床图也需要指向，不然无法加载图片（小坑）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211051309517.png"></p><h2 id="八、Nginx搭建床图"><a href="#八、Nginx搭建床图" class="headerlink" title="八、Nginx搭建床图"></a>八、Nginx搭建床图</h2><p>基于dns解析  +  Github pages 映射适配</p><p>传统搭建方式（http）,会导致在  img 上渲染图片的时候无法显示（谷歌浏览器，IE浏览器会，360极速不会–具体不清楚），</p><p>因为 pages 开启了 https 所以，自己搭建的床图也要是  https （我是这么想的，然后实现，确实可以了）</p><p>分析：一开始看到 console 控制台， 一堆图片报错 ，于是拿连接去请求，发现不可以访问（带http，无 s）</p><h3 id="1、配置域名解析"><a href="#1、配置域名解析" class="headerlink" title="1、配置域名解析"></a>1、配置域名解析</h3><p>初版1.0，废弃，最好不要用  _  为前缀，因为后面要是有配置SSL证书，就无法通过</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211121142179.png"></p><p>最新2.0配置，完美解决了所有问题</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222248798.png"></p><h3 id="2、配置SSL证书"><a href="#2、配置SSL证书" class="headerlink" title="2、配置SSL证书"></a>2、配置SSL证书</h3><p>购买证书，这边作者用的是免费的</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222259557.png"></p><p>然后下载部署，具体配置信息 4  nginx.conf</p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222301426.png"></p><h3 id="3、搭建具体参考-一、四"><a href="#3、搭建具体参考-一、四" class="headerlink" title="3、搭建具体参考 一、四"></a>3、搭建具体参考 一、四</h3><p>用了docker</p><h3 id="4、补充"><a href="#4、补充" class="headerlink" title="4、补充"></a>4、补充</h3><h4 id="1、nginx-配置"><a href="#1、nginx-配置" class="headerlink" title="1、nginx 配置"></a>1、nginx 配置</h4><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">user  nginx;worker_processes  auto;error_log  /var/log/nginx/error.log notice;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;   include /etc/nginx/conf.d/*.conf;  server{        listen 443 ssl;        #对应的域名，把mykkto.cn改成你们自己的域名就可以了        server_name mykkto.cn;        #证书的两个配置文件        ssl_certificate /etc/nginx/ssl/8799443_v1.mykkto.cn.pem;        ssl_certificate_key /etc/nginx/ssl/8799443_v1.mykkto.cn.key;#以下都是一些加密规则        ssl_session_timeout 5m;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on;        #这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。        location / {                #文件夹（这个其实挂载的就是外部的www目录下的静态资源）                root //usr/share/nginx/html;                #主页文件                index index.html;        }    }server {   listen 80;        #这边空格隔开，配置了两个，因为加了www也要配置       server_name mykkto.cn;       rewrite ^/(.*)$ https://mykkto.cn:443/$1 permanent;  # location / {  #     limit_req zone=mylimit;  #}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、更新床图脚本"><a href="#2、更新床图脚本" class="headerlink" title="2、更新床图脚本"></a>2、更新床图脚本</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222303115.png"></p><h4 id="3、PICGO-配置"><a href="#3、PICGO-配置" class="headerlink" title="3、PICGO 配置"></a>3、PICGO 配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222304590.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/Interview/202211222303839.png"></p><h2 id="参考-↓"><a href="#参考-↓" class="headerlink" title="参考 ↓"></a>参考 ↓</h2><p>—— 【一到三】参考———–</p><p><a href="https://www.cnblogs.com/zltech/p/13517231.html">https://www.cnblogs.com/zltech/p/13517231.html</a></p><p><a href="https://www.cnblogs.com/thepoy/p/14848080.html">https://www.cnblogs.com/thepoy/p/14848080.html</a></p><p><a href="https://www.cnblogs.com/jianqingwang/p/6726589.html">https://www.cnblogs.com/jianqingwang/p/6726589.html</a></p><p>—— 【一到三】参考———–</p><p>SSL证书参考&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><p><a href="https://www.cnblogs.com/zeussbook/p/11231820.html">https://www.cnblogs.com/zeussbook/p/11231820.html</a></p><p><a href="https://www.cnblogs.com/yuyeblog/p/13582127.html">https://www.cnblogs.com/yuyeblog/p/13582127.html</a></p><p><a href="https://www.cnblogs.com/makalochen/p/14241052.html#%E5%A4%9A%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD">https://www.cnblogs.com/makalochen/p/14241052.html#%E5%A4%9A%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD</a></p><p>IP黑名单参考&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><p><a href="https://www.jb51.net/article/168907.htm">https://www.jb51.net/article/168907.htm</a></p><p><a href="https://blog.csdn.net/weixin_33971205/article/details/89861486">https://blog.csdn.net/weixin_33971205/article/details/89861486</a></p><p><a href="https://www.csdn.net/tags/MtTaIgzsNDYzNDUtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/MtTaIgzsNDYzNDUtYmxvZwO0O0OO0O0O.html</a></p><p>限流&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><p><a href="https://www.cnblogs.com/biglittleant/p/8979915.html">https://www.cnblogs.com/biglittleant/p/8979915.html</a></p><p>DNS解析+Github Pages（无服务器）</p><p><a href="https://cloud.tencent.com/developer/article/2019284">https://cloud.tencent.com/developer/article/2019284</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客" scheme="https://mykkto.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="blog" scheme="https://mykkto.github.io/tags/blog/"/>
    
    <category term="部署" scheme="https://mykkto.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="小姿势" scheme="https://mykkto.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Alibaba-Sentinel 实现熔断与限流</title>
    <link href="https://mykkto.github.io/posts/32724da3.html"/>
    <id>https://mykkto.github.io/posts/32724da3.html</id>
    <published>2022-03-13T07:17:13.000Z</published>
    <updated>2022-11-12T15:07:08.061Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h3><p><a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><h3 id="2、是什么"><a href="#2、是什么" class="headerlink" title="2、是什么"></a>2、是什么</h3><p>一句话解释，就是类似于 Hystrix</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312233839.png"></p><h3 id="3、去哪下"><a href="#3、去哪下" class="headerlink" title="3、去哪下"></a>3、去哪下</h3><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312233941.png"></p><h3 id="4、能干嘛"><a href="#4、能干嘛" class="headerlink" title="4、能干嘛"></a>4、能干嘛</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312234011.png"></p><p><strong>服务使用中的各种问题</strong></p><ul><li>服务雪崩</li><li>服务降级</li><li>服务熔断</li><li>服务限流</li></ul><h2 id="二、安装控制台"><a href="#二、安装控制台" class="headerlink" title="二、安装控制台"></a>二、安装控制台</h2><h3 id="1、sentinel组件由两部分构成"><a href="#1、sentinel组件由两部分构成" class="headerlink" title="1、sentinel组件由两部分构成"></a>1、sentinel组件由两部分构成</h3><ul><li>后台</li><li>前台8080</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220313211351.png"></p><h3 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h3><h4 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull bladex/sentinel<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、启动并创建容器"><a href="#2、启动并创建容器" class="headerlink" title="2、启动并创建容器"></a>2、启动并创建容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name sentinel <span class="token punctuation">-</span>d  <span class="token punctuation">-</span>p 8858<span class="token punctuation">:</span>8858  bladex/sentinel<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、访问"><a href="#3、访问" class="headerlink" title="3、访问"></a>3、访问</h3><p><code>ip:8858</code></p><p>登录账号密码均为<code>sentinel</code></p><h2 id="三、初始化工程"><a href="#三、初始化工程" class="headerlink" title="三、初始化工程"></a>三、初始化工程</h2><h3 id="1、启动准备工作"><a href="#1、启动准备工作" class="headerlink" title="1、启动准备工作"></a>1、启动准备工作</h3><p>启动 sentinel （8858），nacos（8848）</p><h3 id="2、model"><a href="#2、model" class="headerlink" title="2、model"></a>2、model</h3><h4 id="1、建model"><a href="#1、建model" class="headerlink" title="1、建model"></a>1、建model</h4><p>cloudalibaba-sentinel-service8401</p><h4 id="2、pom"><a href="#2、pom" class="headerlink" title="2、pom"></a>2、pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloudalibaba-sentinel-service8401<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--openfeign--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、yml"><a href="#3、yml" class="headerlink" title="3、yml"></a>3、yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment">#Nacos服务注册中心地址</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 101.34.180.133<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token comment">#配置Sentinel dashboard地址</span><span class="token comment">#        dashboard: 101.34.180.133:8858</span><span class="token comment">#        dashboard: 106.52.23.202:8080</span>        <span class="token comment"># 项目和 sentinel 不在同一台机器无法查看实时监控</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>        <span class="token comment"># 本地机器ip(docker容器必须加上)</span><span class="token comment">#        client-ip: 169.254.135.77</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、主启动"><a href="#4、主启动" class="headerlink" title="4、主启动"></a>4、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCloudSentinelMain8401</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">SpringCloudSentinelMain8401</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、业务类"><a href="#5、业务类" class="headerlink" title="5、业务类"></a>5、业务类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"------testA"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"------testB"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、操作-sentinel控制台"><a href="#3、操作-sentinel控制台" class="headerlink" title="3、操作 sentinel控制台"></a>3、操作 sentinel控制台</h3><h4 id="1、刚进来"><a href="#1、刚进来" class="headerlink" title="1、刚进来"></a>1、刚进来</h4><p>空空如也，啥都没有</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220313224347.png"></h3><h4 id="2、懒加载说明"><a href="#2、懒加载说明" class="headerlink" title="2、懒加载说明"></a>2、懒加载说明</h4><ul><li>Sentinel采用的懒加载说明</li><li>需要执行一次<ul><li><a href="http://localhost:8401/testA">http://localhost:8401/testA</a></li><li><a href="http://localhost:8401/testB">http://localhost:8401/testB</a></li></ul></li><li><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220314002216.png"></li><li>这边需要注意一点：如果你的<code>实时监控</code>没有数据，可能是因为 sentinel 和项目不再<code>同一个 机器</code>或者 <code>sentinel访问不到</code> 项目就监控不到了</li></ul><h2 id="四、流控制规则"><a href="#四、流控制规则" class="headerlink" title="四、流控制规则"></a>四、流控制规则</h2><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220314222312.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220314222329.png"></p><h3 id="2、流控模式"><a href="#2、流控模式" class="headerlink" title="2、流控模式"></a>2、流控模式</h3><h4 id="1、直接-默认"><a href="#1、直接-默认" class="headerlink" title="1、直接(默认)"></a>1、直接(默认)</h4><p>表示：1秒钟内查询1次就是OK，若超过次数1，就直接-快速失败，报默认错误</p><h5 id="1、配置内容"><a href="#1、配置内容" class="headerlink" title="1、配置内容"></a>1、配置内容</h5><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1647528650781.png" alt="1647528650781"></p><h5 id="2、测试效果"><a href="#2、测试效果" class="headerlink" title="2、测试效果"></a>2、测试效果</h5><p>访问：<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318194405.png"></p><h5 id="3、结论思考"><a href="#3、结论思考" class="headerlink" title="3、结论思考"></a>3、结论思考</h5><p>直接调用默认报错信息，技术方面OK，</p><p>但是否应该有我们自己的后续处理，类似有个fallback的兜底方法</p><h4 id="2、关联"><a href="#2、关联" class="headerlink" title="2、关联"></a>2、关联</h4><h5 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h5><ul><li>当关联的资源达到阈值时，就限流自己</li><li>当与A关联的资源B达到阀值后，就限流A自己</li><li>B惹事，A挂了</li></ul><h5 id="2、配置A"><a href="#2、配置A" class="headerlink" title="2、配置A"></a>2、配置A</h5><p>当关联资源 /testB 的 qps 阀值超过1时，就限流 /testA 的Rest访问地址，当关联资源到阈值后限制配置好的资源名</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318194759.png"></p><h5 id="3、postman模拟并发密集访问testB"><a href="#3、postman模拟并发密集访问testB" class="headerlink" title="3、postman模拟并发密集访问testB"></a>3、postman模拟并发密集访问testB</h5><p>创建一个集合并发测试文件夹</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318195358.png"></p><p>将测试的url放进文件夹</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318200022.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318200053.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318200149.png"></p><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p>启动并发对 /testB run，再次过程中访问  /testB  发现出错</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220318200544.png"></p><h4 id="3、链路"><a href="#3、链路" class="headerlink" title="3、链路"></a>3、链路</h4><ul><li>多个请求调用了同一个微服务</li></ul><h3 id="2X（流控模式总结）"><a href="#2X（流控模式总结）" class="headerlink" title="2X（流控模式总结）"></a>2X（流控模式总结）</h3><ul><li>直接：对当前资源限流</li><li>关联：高优先级资源触发阈值，对低优先级资源限流。</li><li>链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</li></ul><h3 id="3、流控效果"><a href="#3、流控效果" class="headerlink" title="3、流控效果"></a>3、流控效果</h3><h4 id="1、快速失败"><a href="#1、快速失败" class="headerlink" title="1、快速失败"></a>1、快速失败</h4><p>达到峰值，直接失败，抛出异常（Blocked by Sentinel (flow limiting)）</p><p>源码（修改扩展位置）：com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</p><h4 id="2、WarmUp（预热）"><a href="#2、WarmUp（预热）" class="headerlink" title="2、WarmUp（预热）"></a>2、WarmUp（预热）</h4><h5 id="1、公式"><a href="#1、公式" class="headerlink" title="1、公式"></a>1、公式</h5><p>阈值除以coldFactor(默认值为3),经过预热时长后才会达到阈值</p><h5 id="2、官网"><a href="#2、官网" class="headerlink" title="2、官网"></a>2、官网</h5><ul><li>默认coldFactor为3，即请求 QPS 从 threshold / 3 开始，经预热时长逐渐升至设定的 QPS 阈值。</li><li>限流，冷启动<ul><li><a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8</a></li></ul></li></ul><h5 id="3、源码"><a href="#3、源码" class="headerlink" title="3、源码"></a>3、源码</h5><p>com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319093823.png"></p><h5 id="4、WarmUp配置"><a href="#4、WarmUp配置" class="headerlink" title="4、WarmUp配置"></a>4、WarmUp配置</h5><ul><li>默认 coldFactor 为 3，即请求QPS从(threshold / 3) 开始，经多少预热时长才逐渐升至设定的 QPS 阈值。</li><li>案例，阀值为10+预热时长设置5秒。<br>系统初始化的阀值为10 / 3 约等于3,即阀值刚开始为3；然后过了5秒后阀值才慢慢升高恢复到10</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319094044.png"></p><h5 id="5、点击测试"><a href="#5、点击测试" class="headerlink" title="5、点击测试"></a>5、点击测试</h5><p>多次点击<a href="http://localhost:8401/testB">http://localhost:8401/testB</a></p><p>刚开始不行，后续慢慢OK</p><h5 id="6、应用场景"><a href="#6、应用场景" class="headerlink" title="6、应用场景"></a>6、应用场景</h5><p>如：秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢的把流量放进来，慢慢的把阀值增长到设置的阀值。</p><h4 id="3、排队等待"><a href="#3、排队等待" class="headerlink" title="3、排队等待"></a>3、排队等待</h4><h5 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h5><p>匀速排队，阈值必须设置为QPS</p><h5 id="2、官网-1"><a href="#2、官网-1" class="headerlink" title="2、官网"></a>2、官网</h5><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319094259.png"></p><h5 id="3、源码-1"><a href="#3、源码-1" class="headerlink" title="3、源码"></a>3、源码</h5><p>com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiterController</p><h5 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h5><ul><li>匀速排队，让请求以均匀的速度通过，阀值类型必须设成QPS，否则无效。</li><li>设置含义： /testB  每秒1次请求，超过的话就排队等待，等待的超时时间为20000毫秒。</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319094533.png"></p><h5 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319095241.png"></p><h2 id="五、降级规则"><a href="#五、降级规则" class="headerlink" title="五、降级规则"></a>五、降级规则</h2><h3 id="1、官网-1"><a href="#1、官网-1" class="headerlink" title="1、官网"></a>1、官网</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><h3 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h3><h4 id="1、说明-1"><a href="#1、说明-1" class="headerlink" title="1、说明"></a>1、说明</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319095912.png"></p><p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，<br>让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）</p><h4 id="2、hystrix比较"><a href="#2、hystrix比较" class="headerlink" title="2、hystrix比较"></a>2、hystrix比较</h4><p>Sentinel的断路器是<code>没有半开</code>状态的</p><p>半开的状态系统自动去检测是否请求有异常，<br>没有异常就<code>关闭断路器</code>恢复使用，<br>有异常则<code>继续打开</code>断路器不可用。具体可以参考Hystrix</p><p>以下是hystrix断路器结构图</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319100840.png"></p><h3 id="3、降级策略实战"><a href="#3、降级策略实战" class="headerlink" title="3、降级策略实战"></a>3、降级策略实战</h3><h4 id="1、RT"><a href="#1、RT" class="headerlink" title="1、RT"></a>1、RT</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319225244.png"></p><h5 id="1、代码"><a href="#1、代码" class="headerlink" title="1、代码"></a>1、代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//暂停几秒钟线程</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span>sleep <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span>printStackTrace <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"testD 测试RT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"------testD"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220319225631.png"></p><h5 id="3、jmeter压测"><a href="#3、jmeter压测" class="headerlink" title="3、jmeter压测"></a>3、jmeter压测</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321223309.png"></p><h5 id="4、结果"><a href="#4、结果" class="headerlink" title="4、结果"></a>4、结果</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321223653.png"></p><h4 id="2、异常比例"><a href="#2、异常比例" class="headerlink" title="2、异常比例"></a>2、异常比例</h4><p>1、是什么</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321223744.png"></p><h5 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"testD 测试异常比例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"------testD"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321223956.png"></p><h5 id="4、jmeter"><a href="#4、jmeter" class="headerlink" title="4、jmeter"></a>4、jmeter</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321224035.png"></p><h5 id="5、结论"><a href="#5、结论" class="headerlink" title="5、结论"></a>5、结论</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321224157.png"></p><h4 id="3、异常数"><a href="#3、异常数" class="headerlink" title="3、异常数"></a>3、异常数</h4><h5 id="1、是什么-1"><a href="#1、是什么-1" class="headerlink" title="1、是什么"></a>1、是什么</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321224235.png"></p><h5 id="2、需知"><a href="#2、需知" class="headerlink" title="2、需知"></a>2、需知</h5><p>异常数是按照分钟统计的</p><h5 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testE"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span>info <span class="token punctuation">(</span><span class="token string">"testE 测试异常比例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"------testE 测试异常比例"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、配置-1"><a href="#4、配置-1" class="headerlink" title="4、配置"></a>4、配置</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321224436.png"></p><h5 id="5、jmeter"><a href="#5、jmeter" class="headerlink" title="5、jmeter"></a>5、jmeter</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321224523.png"></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="六、热点key限流"><a href="#六、热点key限流" class="headerlink" title="六、热点key限流"></a>六、热点key限流</h2><h3 id="1、基本介绍-1"><a href="#1、基本介绍-1" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><h4 id="1、是什么-2"><a href="#1、是什么-2" class="headerlink" title="1、是什么"></a>1、是什么</h4><p><strong>何为热点</strong></p><p>热点即经常访问的数据，很多时候我们希望统计或者限制某个热点数据中访问频次最高的TopN数据，并对其访问进行限流或者其它操作</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220321225130.png"></p><h4 id="2、官网-2"><a href="#2、官网-2" class="headerlink" title="2、官网"></a>2、官网</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81</a></p><h4 id="3、兜底方法"><a href="#3、兜底方法" class="headerlink" title="3、兜底方法"></a>3、兜底方法</h4><p>sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</p><p>可以指定，自定义兜底方法</p><p> 从HystrixCommand 到@SentinelResource</p><h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><h4 id="1、代码-1"><a href="#1、代码-1" class="headerlink" title="1、代码"></a>1、代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"dealHandler_testHotKey"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHotKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"------testHotKey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dealHandler_testHotKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"-----dealHandler_testHotKey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、配置说明"><a href="#2、配置说明" class="headerlink" title="2、配置说明"></a>2、配置说明</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322212525.png"></p><p><strong>限流模式只支持QPS模式，固定写死了。（这才叫热点）<br><code>@SentinelResource</code>注解的方法参数索引，0代表第一个参数，1代表第二个参数，以此类推<br>单机阀值以及统计窗口时长表示在此窗口时间超过阀值就限流。</strong><br><code>上面的抓图就是第一个参数有值的话，1秒的QPS为1，超过就限流，限流后调用</code> dealHandler_testHotKey支持方法。</p><h4 id="3、配置-1"><a href="#3、配置-1" class="headerlink" title="3、配置"></a>3、配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322213124.png"></p><p><code>@SentinelResource(value = "testHotKey",blockHandler = "dealHandler_testHotKey")</code></p><p>方法testHotKey里面第一个参数只要QPS超过每秒1次，马上降级处理</p><h4 id="4、测试-1"><a href="#4、测试-1" class="headerlink" title="4、测试"></a>4、测试</h4><p><a href="http://localhost:8401/testHotKey?p1=abc">http://localhost:8401/testHotKey?p1=abc</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322213413.png"></p><p><a href="http://localhost:8401/testHotKey?p1=abc&amp;p2=33">http://localhost:8401/testHotKey?p1=abc&amp;p2=33</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322213432.png"></p><p><a href="http://localhost:8401/testHotKey?p2=33">http://localhost:8401/testHotKey?p2=33</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322213506.png"></p><h3 id="3、参数高级选项"><a href="#3、参数高级选项" class="headerlink" title="3、参数高级选项"></a>3、参数高级选项</h3><h4 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h4><p>上述案例，第一个参数p1，当QPS超过1秒1次点击后马上被限流</p><p>若是我们有一个需求，p1特例为5 ，QPS 阈值为 200就可以通过 这个实现</p><h4 id="2、配置-1"><a href="#2、配置-1" class="headerlink" title="2、配置"></a>2、配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322213926.png"></p><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><p><a href="http://localhost:8401/testHotKey?p1=5">http://localhost:8401/testHotKey?p1=5</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322214044.png"></p><p><a href="http://localhost:8401/testHotKey?p1=3">http://localhost:8401/testHotKey?p1=3</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220322214058.png"></p><h4 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h4><p>当p1等于5的时候，阈值变为 200</p><p>当p1不等于5的时候，阈值为平常的 1</p><p>热点参数的注意点，参数必须是基本类型或者String</p><h2 id="七、-SentinelResource"><a href="#七、-SentinelResource" class="headerlink" title="七、@SentinelResource"></a>七、@SentinelResource</h2><h3 id="1、按资源名称限流-后续处理"><a href="#1、按资源名称限流-后续处理" class="headerlink" title="1、按资源名称限流+后续处理"></a>1、按资源名称限流+后续处理</h3><h4 id="1、代码-2"><a href="#1、代码-2" class="headerlink" title="1、代码"></a>1、代码</h4><p>1、代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SentinelResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按资源名称限流测试OK"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span><span class="token number">2020L</span><span class="token punctuation">,</span><span class="token string">"serial001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 服务不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、配置流控规则"><a href="#2、配置流控规则" class="headerlink" title="2、配置流控规则"></a>2、配置流控规则</h4><h5 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323102223.png"></p><h5 id="2、图形配置和代码关系"><a href="#2、图形配置和代码关系" class="headerlink" title="2、图形配置和代码关系"></a>2、图形配置和代码关系</h5><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323102301.png"></p><h5 id="3、配置说明"><a href="#3、配置说明" class="headerlink" title="3、配置说明"></a>3、配置说明</h5><p>表示1秒钟内查询次数大于1，就跑到我们自定义的处流，限流</p><h4 id="3、测试-1"><a href="#3、测试-1" class="headerlink" title="3、测试"></a>3、测试</h4><p>1秒钟点击1下，OK</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323103703.png"></p><p>超过上述，疯狂点击，返回了自己定义的限流处理信息，限流发生</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323103648.png"></p><h3 id="2、按照Url地址限流-后续处理"><a href="#2、按照Url地址限流-后续处理" class="headerlink" title="2、按照Url地址限流+后续处理"></a>2、按照Url地址限流+后续处理</h3><h4 id="1、作用-1"><a href="#1、作用-1" class="headerlink" title="1、作用"></a>1、作用</h4><p>通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息</p><h4 id="2、代码-1"><a href="#2、代码-1" class="headerlink" title="2、代码"></a>2、代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/byUrl"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byUrl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按url限流测试OK"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span><span class="token number">2020L</span><span class="token punctuation">,</span> <span class="token string">"serial002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、访问（1次）"><a href="#3、访问（1次）" class="headerlink" title="3、访问（1次）"></a>3、访问（1次）</h4><p>为了刷新实时配置，线上就没必要这个操作了</p><p><a href="http://localhost:8401//rateLimit/byUrl">http://localhost:8401//rateLimit/byUrl</a></p><h4 id="4、配置-2"><a href="#4、配置-2" class="headerlink" title="4、配置"></a>4、配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323105553.png"></p><h4 id="5、访问（狂点）"><a href="#5、访问（狂点）" class="headerlink" title="5、访问（狂点）"></a>5、访问（狂点）</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323105616.png"></p><h3 id="3、兜底方案面临的问题"><a href="#3、兜底方案面临的问题" class="headerlink" title="3、兜底方案面临的问题"></a>3、兜底方案面临的问题</h3><p>1  系统默认的，没有体现我们自己的业务要求。</p><p>2  依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观。</p><p>3  每个业务方法都添加一个兜底的，那代码膨胀加剧。</p><p>4  全局统一的处理方法没有体现</p><h3 id="4、用户自定义限流处理逻辑"><a href="#4、用户自定义限流处理逻辑" class="headerlink" title="4、用户自定义限流处理逻辑"></a>4、用户自定义限流处理逻辑</h3><h4 id="1、自定义限流处理类"><a href="#1、自定义限流处理类" class="headerlink" title="1、自定义限流处理类"></a>1、自定义限流处理类</h4><p>创建CustomerBlockHandler类用于自定义限流处理逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token string">"自定义的限流处理信息......CustomerBlockHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323115746.png"></p><h4 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义通用的限流处理逻辑， blockHandlerClass = CustomerBlockHandler.class blockHandler = handleException 上述配置：找CustomerBlockHandler类里的handleException2方法进行兜底处理 */</span><span class="token comment">/** * 自定义通用的限流处理逻辑 */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/customerBlockHandler"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span>        blockHandlerClass <span class="token operator">=</span> <span class="token class-name">CustomerBlockHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按客户自定义限流处理逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、配置-2"><a href="#3、配置-2" class="headerlink" title="3、配置"></a>3、配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323120859.png"></p><h4 id="4、配置说明"><a href="#4、配置说明" class="headerlink" title="4、配置说明"></a>4、配置说明</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323121020.png"></p><h4 id="5、测试-1"><a href="#5、测试-1" class="headerlink" title="5、测试"></a>5、测试</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323121049.png"></p><h3 id="5、更多注解属性说明"><a href="#5、更多注解属性说明" class="headerlink" title="5、更多注解属性说明"></a>5、更多注解属性说明</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323121421.png"></p><h2 id="八、服务熔断功能"><a href="#八、服务熔断功能" class="headerlink" title="八、服务熔断功能"></a>八、服务熔断功能</h2><h3 id="1、整合"><a href="#1、整合" class="headerlink" title="1、整合"></a>1、整合</h3><p>sentinel整合ribbon+openFeign+fallback</p><h3 id="2、Ribbon"><a href="#2、Ribbon" class="headerlink" title="2、Ribbon"></a>2、Ribbon</h3><h4 id="1、生产者"><a href="#1、生产者" class="headerlink" title="1、生产者"></a>1、生产者</h4><h5 id="1、建model-1"><a href="#1、建model-1" class="headerlink" title="1、建model"></a>1、建model</h5><p>cloudalibaba-provider-payment9003</p><h5 id="2、pom-1"><a href="#2、pom-1" class="headerlink" title="2、pom"></a>2、pom</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloudalibaba-provider-payment9003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、yml-1"><a href="#3、yml-1" class="headerlink" title="3、yml"></a>3、yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9003</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#配置Nacos地址</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、主启动-1"><a href="#4、主启动-1" class="headerlink" title="4、主启动"></a>4、主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9003</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">PaymentMain9003</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、业务类-1"><a href="#5、业务类-1" class="headerlink" title="5、业务类"></a>5、业务类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        hashMap<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"28a8c1e3bc2742d8848569891fb42181"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"bba8c1e3bc2742d8848569891ac32182"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span>put <span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"6ua8c1e3bc2742d8848569891xt92183"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/paymentSQL/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> hashMap<span class="token punctuation">.</span>get <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"from mysql,serverPort:  "</span> <span class="token operator">+</span> serverPort<span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、启动"><a href="#6、启动" class="headerlink" title="6、启动"></a>6、启动</h5><p>同一个服务，启动9003，9004</p><p><code>-Dserver.port=9004</code></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324000149.png"></p><h5 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h5><p><a href="http://localhost:9003/paymentSQL/1">http://localhost:9003/paymentSQL/1</a></p><p><a href="http://localhost:9004/paymentSQL/1">http://localhost:9004/paymentSQL/1</a></p><h4 id="2、消费者"><a href="#2、消费者" class="headerlink" title="2、消费者"></a>2、消费者</h4><h5 id="1、model"><a href="#1、model" class="headerlink" title="1、model"></a>1、model</h5><p>新建cloudalibaba-consumer-nacos-order84</p><h5 id="2、pom-2"><a href="#2、pom-2" class="headerlink" title="2、pom"></a>2、pom</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloudalibaba-consumer-nacos-order84<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、yml-2"><a href="#3、yml-2" class="headerlink" title="3、yml"></a>3、yml</h5><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">84</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order<span class="token punctuation">-</span>consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token comment">#配置Sentinel dashboard地址</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、主启动-2"><a href="#4、主启动-2" class="headerlink" title="4、主启动"></a>4、主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain84</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">OrderNacosMain84</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、配置类"><a href="#5、配置类" class="headerlink" title="5、配置类"></a>5、配置类</h5><p>1、rabbion 负载配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6、业务类"><a href="#6、业务类" class="headerlink" title="6、业务类"></a>6、业务类</h5><p>1、只配置fallback（本例sentinel无配置）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324205223.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324210258.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324210320.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324210332.png"></p><p>2、只配置blockHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SentinelResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-payment-provider"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span> <span class="token comment">//blockHandler负责在sentinel里面配置的降级限流</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span>getForObject <span class="token punctuation">(</span>SERVICE_URL <span class="token operator">+</span> <span class="token string">"/paymentSQL/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"非法参数异常...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>getData <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 兜底</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> <span class="token string">"兜底异常handlerFallback,exception内容  "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 降级</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span> <span class="token string">"blockHandler-sentinel限流,无此流水: blockException  "</span> <span class="token operator">+</span> blockException<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211100.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211322.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211510.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211427.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211443.png"></p><p>3、fallback和blockHandler都配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SentinelResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-payment-provider"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span>getForObject <span class="token punctuation">(</span>SERVICE_URL <span class="token operator">+</span> <span class="token string">"/paymentSQL/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"非法参数异常...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>getData <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 兜底</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> <span class="token string">"fallback,无此流水,exception  "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 降级</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span> <span class="token string">"blockHandler-sentinel限流,无此流水: blockException  "</span> <span class="token operator">+</span> blockException<span class="token punctuation">.</span>getMessage <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211706.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324211811.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324212202.png"></p><p><strong>降级优先于限流：若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockHandler 处理逻辑。</strong></p><p>4、属性忽略</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324212355.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324212430.png"></p><p><strong>直接抛到前台对用户体验不好，细节注意</strong></p><h3 id="3、Feign"><a href="#3、Feign" class="headerlink" title="3、Feign"></a>3、Feign</h3><h4 id="1、model-1"><a href="#1、model-1" class="headerlink" title="1、model"></a>1、model</h4><p>修改84模块</p><h4 id="2、pom-3"><a href="#2、pom-3" class="headerlink" title="2、pom"></a>2、pom</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--SpringCloud openfeign --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324214128.png"></p><h4 id="3、yml-3"><a href="#3、yml-3" class="headerlink" title="3、yml"></a>3、yml</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 激活Sentinel对Feign的支持</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324214015.png"></p><h4 id="4、主启动-3"><a href="#4、主启动-3" class="headerlink" title="4、主启动"></a>4、主启动</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">;</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain84</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token class-name">OrderNacosMain84</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、业务类-2"><a href="#5、业务类-2" class="headerlink" title="5、业务类"></a>5、业务类</h4><h5 id="1、远程调服务接口"><a href="#1、远程调服务接口" class="headerlink" title="1、远程调服务接口"></a>1、远程调服务接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>serivice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token comment">/** * @auther mykk * @create 2022年3月24日 21:45:49 * 使用 fallback 方式是无法获取异常信息的， * 如果想要获取异常信息，可以使用 fallbackFactory参数 */</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"nacos-payment-provider"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PaymentFallbackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//调用中关闭9003服务提供者</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/paymentSQL/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、兜底实现"><a href="#2、兜底实现" class="headerlink" title="2、兜底实现"></a>2、兜底实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>serivice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kk<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> <span class="token string">"服务降级返回,没有该流水信息"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"errorSerial......"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、Controller"><a href="#3、Controller" class="headerlink" title="3、Controller"></a>3、Controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//==================OpenFeign</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/openfeign/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">(</span><span class="token string">"没有该id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span>paymentSQL <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h4><p>测试84调用9003，此时<code>故意关闭9003/9004微服务提供者，看84消费侧自动降级</code>，不会被耗死</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324221753.png"></p><h3 id="4、熔断框架比较"><a href="#4、熔断框架比较" class="headerlink" title="4、熔断框架比较"></a>4、熔断框架比较</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220323170940.png"></p><h2 id="九、持久化规则"><a href="#九、持久化规则" class="headerlink" title="九、持久化规则"></a>九、持久化规则</h2><h3 id="1、是什么-3"><a href="#1、是什么-3" class="headerlink" title="1、是什么"></a>1、是什么</h3><p>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化</p><h3 id="2、怎么玩"><a href="#2、怎么玩" class="headerlink" title="2、怎么玩"></a>2、怎么玩</h3><p>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台<br>的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上sentinel上的流控规则持续有效</p><h3 id="3、实战"><a href="#3、实战" class="headerlink" title="3、实战"></a>3、实战</h3><h4 id="1、model-2"><a href="#1、model-2" class="headerlink" title="1、model"></a>1、model</h4><p>修改cloudalibaba-sentinel-service8401</p><h4 id="2、pom-4"><a href="#2、pom-4" class="headerlink" title="2、pom"></a>2、pom</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324223255.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021to2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloudalibaba-sentinel-service8401<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--openfeign--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、yml-4"><a href="#3、yml-4" class="headerlink" title="3、yml"></a>3、yml</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324223733.png"></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment">#Nacos服务注册中心地址</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 101.34.180.133<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token comment">#配置Sentinel dashboard地址</span>        <span class="token comment">#        dashboard: 101.34.180.133:8858</span>        <span class="token comment">#        dashboard: 106.52.23.202:8080</span>        <span class="token comment"># 项目和 sentinel 不在同一台机器无法查看实时监控</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 101.34.180.133<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> DEFAULT_GROUP            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow        <span class="token comment"># 本地机器ip(docker容器必须加上)</span><span class="token comment">#        client-ip: 169.254.135.77</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 激活Sentinel对Feign的支持</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、添加Nacos业务规则配置"><a href="#4、添加Nacos业务规则配置" class="headerlink" title="4、添加Nacos业务规则配置"></a>4、添加Nacos业务规则配置</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"/rateLimit/byUrl"</span><span class="token punctuation">,</span>        <span class="token property">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324224003.png"></p><h4 id="5、启动"><a href="#5、启动" class="headerlink" title="5、启动"></a>5、启动</h4><p><strong>启动8401后刷新sentinel发现业务规则有了</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324224338.png"></p><h4 id="6、测试（访问）"><a href="#6、测试（访问）" class="headerlink" title="6、测试（访问）"></a>6、测试（访问）</h4><p>快速访问测试接口</p><p><a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220324224436.png"></p><h2 id="十二、参考文档-↓"><a href="#十二、参考文档-↓" class="headerlink" title="十二、参考文档 ↓"></a>十二、参考文档 ↓</h2><p><a href="https://www.cnblogs.com/linjiqin/p/15369091.html">https://www.cnblogs.com/linjiqin/p/15369091.html</a></p><p><a href="https://www.jianshu.com/p/373eb512ec48">https://www.jianshu.com/p/373eb512ec48</a></p><p><a href="https://m.imooc.com/article/details?article_id=289384">https://m.imooc.com/article/details?article_id=289384</a></p><p><a href="https://www.cnblogs.com/yunqing/p/11406225.html">https://www.cnblogs.com/yunqing/p/11406225.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式技术栈" scheme="https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="springcloud-alibaba" scheme="https://mykkto.github.io/tags/springcloud-alibaba/"/>
    
    <category term="熔断器" scheme="https://mykkto.github.io/tags/%E7%86%94%E6%96%AD%E5%99%A8/"/>
    
    <category term="sentinel" scheme="https://mykkto.github.io/tags/sentinel/"/>
    
    <category term="限流" scheme="https://mykkto.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 高可用集群（docker-compose）</title>
    <link href="https://mykkto.github.io/posts/d9c3bea0.html"/>
    <id>https://mykkto.github.io/posts/d9c3bea0.html</id>
    <published>2022-03-12T03:17:13.000Z</published>
    <updated>2022-11-12T15:07:08.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、架构"><a href="#一、架构" class="headerlink" title="一、架构"></a>一、架构</h2><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>本来这部分是要在  <a href="/posts/af0a257d">Spring-nacos 手册</a>中 ，但是后面搭建遇到很多坑找了很多资料，就单独整理后写出这篇。</p><h3 id="2、架构图"><a href="#2、架构图" class="headerlink" title="2、架构图"></a>2、架构图</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312143557.png"></p><p>一个ngxin 负载 三个 nacos节点，mysql 主从两个节点</p><h2 id="二、搭建-mysql-主从"><a href="#二、搭建-mysql-主从" class="headerlink" title="二、搭建 mysql 主从"></a>二、搭建 mysql 主从</h2><h3 id="1、拉取和创建"><a href="#1、拉取和创建" class="headerlink" title="1、拉取和创建"></a>1、拉取和创建</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 1、拉取</span><span class="token punctuation">[</span>root@VM_0_17_centos ~<span class="token punctuation">]</span>docker pull mysql<span class="token punctuation">:</span>5.7.13<span class="token comment"># 2、启动</span><span class="token punctuation">[</span>root@VM_0_17_centos ~<span class="token punctuation">]</span>docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name master <span class="token punctuation">-</span>p 3306<span class="token punctuation">:</span>3306 <span class="token punctuation">-</span>e MYSQL_ROOT_PASSWORD=root <span class="token punctuation">-</span>d mysql<span class="token punctuation">:</span>5.7.13<span class="token comment"># 参数说明</span><span class="token punctuation">-</span><span class="token punctuation">-</span>name 为容器指定名称，这里是master<span class="token punctuation">-</span>p 将容器的指定端口映射到主机的指定端口，这里是将容器的3306端口映射到主机的3306端口<span class="token punctuation">-</span>e 设置环境变量，这里是指定root账号的密码为root<span class="token punctuation">-</span>d 后台运行容器，并返回容器IDmysql<span class="token punctuation">:</span>5.7.13 指定运行的mysql版<span class="token comment"># 3、查看是否启动,以有容器</span><span class="token punctuation">[</span>root@VM_0_17_centos ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、开放端口"><a href="#2、开放端口" class="headerlink" title="2、开放端口"></a>2、开放端口</h3><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">firewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --reload# 说明--permanent 永久开启，避免下次开机需要再次手动开启端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建-主容器-的复制账号"><a href="#3、创建-主容器-的复制账号" class="headerlink" title="3、创建[主容器]的复制账号"></a>3、创建[主容器]的复制账号</h3><p>使用Navicat友好的图像化界面执行SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'backup'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'backup'</span><span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'backup'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、修改MySQL-主容器-配置环境"><a href="#4、修改MySQL-主容器-配置环境" class="headerlink" title="4、修改MySQL[主容器]配置环境"></a>4、修改MySQL[主容器]配置环境</h3><h4 id="1、创建配置文件目录，目录结构如下："><a href="#1、创建配置文件目录，目录结构如下：" class="headerlink" title="1、创建配置文件目录，目录结构如下："></a>1、创建配置文件目录，目录结构如下：</h4><p>/usr/local/mysql/master<br>/usr/local/mysql/slave1<br>/usr/local/mysql/slave2</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos ~]# mkdir -p /usr/local/mysql/master /usr/local/mysql/slave1 /usr/local/mysql/slave2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、拷贝一份MySQL配置文件"><a href="#2、拷贝一份MySQL配置文件" class="headerlink" title="2、拷贝一份MySQL配置文件"></a>2、拷贝一份MySQL配置文件</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos local]# docker cp master:/etc/mysql/my.cnf /usr/local/mysql/master/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、进到master目录下，已存在拷贝的my-cnf"><a href="#3、进到master目录下，已存在拷贝的my-cnf" class="headerlink" title="3、进到master目录下，已存在拷贝的my.cnf"></a>3、进到master目录下，已存在拷贝的my.cnf</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos master]# lltotal 4-rw-r--r-- 1 root root 1801 May 10 10:27 my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、修改my-cnf，在-mysqld-节点最后加上后保存"><a href="#4、修改my-cnf，在-mysqld-节点最后加上后保存" class="headerlink" title="4、修改my.cnf，在 [mysqld] 节点最后加上后保存"></a>4、修改my.cnf，在 [mysqld] 节点最后加上后保存</h4><pre class="line-numbers language-my.cnf" data-language="my.cnf"><code class="language-my.cnf">log-bin=mysql-binserver-id=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>log-bin=mysql-bin</code> 使用binary logging，mysql-bin是log文件名的前缀</p><p><code>server-id=1</code> 唯一服务器ID，非0整数，不能和其他服务器的server-id重复</p><h4 id="5、将修改后的文件覆盖Docker中MySQL中的配置文件"><a href="#5、将修改后的文件覆盖Docker中MySQL中的配置文件" class="headerlink" title="5、将修改后的文件覆盖Docker中MySQL中的配置文件"></a>5、将修改后的文件覆盖Docker中MySQL中的配置文件</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker cp /usr/local/mysql/master/my.cnf master:/etc/mysql/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、重启-mysql-的docker-让配置生效"><a href="#6、重启-mysql-的docker-让配置生效" class="headerlink" title="6、重启 mysql 的docker , 让配置生效"></a>6、重启 mysql 的docker , 让配置生效</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos master]# docker restart master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、运行MySQL-从-容器"><a href="#5、运行MySQL-从-容器" class="headerlink" title="5、运行MySQL [从]容器"></a>5、运行MySQL [从]容器</h3><h4 id="1、首先运行从容器"><a href="#1、首先运行从容器" class="headerlink" title="1、首先运行从容器"></a>1、首先运行从容器</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos ~]# docker run --name slave1 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、与主容器相似，拷贝配置文件至slave1目录修改后覆盖回Docker中"><a href="#2、与主容器相似，拷贝配置文件至slave1目录修改后覆盖回Docker中" class="headerlink" title="2、与主容器相似，拷贝配置文件至slave1目录修改后覆盖回Docker中"></a>2、与主容器相似，拷贝配置文件至slave1目录修改后覆盖回Docker中</h4><pre class="line-numbers language-my.cof" data-language="my.cof"><code class="language-my.cof">log-bin=mysql-binserver-id=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3、别忘记，重启slave1容器，使配置生效"><a href="#3、别忘记，重启slave1容器，使配置生效" class="headerlink" title="3、别忘记，重启slave1容器，使配置生效"></a>3、别忘记，重启slave1容器，使配置生效</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">[root@VM_0_17_centos master]# docker slave1 master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、配置主从复制"><a href="#6、配置主从复制" class="headerlink" title="6、配置主从复制"></a>6、配置主从复制</h3><h4 id="1、使用Navicat连接-slave1-后新建查询，执行以下SQL"><a href="#1、使用Navicat连接-slave1-后新建查询，执行以下SQL" class="headerlink" title="1、使用Navicat连接 [slave1]后新建查询，执行以下SQL"></a>1、使用Navicat连接 [slave1]后新建查询，执行以下SQL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">'连接Navicat的ip'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'backup'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'backup'</span><span class="token punctuation">;</span><span class="token keyword">START</span> SLAVE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MASTER_HOST 填Navicat连接配置中的ip应该就可以</p><p>MASTER_PORT 主容器的端口</p><p>MASTER_USER 同步账号的用户名</p><p>MASTER_PASSWORD 同步账号的密码</p><h4 id="2、检查是否配置成功"><a href="#2、检查是否配置成功" class="headerlink" title="2、检查是否配置成功"></a>2、检查是否配置成功</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312161305.png"></p><h3 id="7、检查主从"><a href="#7、检查主从" class="headerlink" title="7、检查主从"></a>7、检查主从</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312161712.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312161734.png"></p><h2 id="三、搭建-nacos-集群"><a href="#三、搭建-nacos-集群" class="headerlink" title="三、搭建 nacos 集群"></a>三、搭建 nacos 集群</h2><h3 id="1、前言-1"><a href="#1、前言-1" class="headerlink" title="1、前言"></a>1、前言</h3><p>docker-compose配置的源码，已经上传到 github,可直接clone ：</p><p><a href="https://github.com/mykkTo/nacos-cluster-docker.git">https://github.com/mykkTo/nacos-cluster-docker.git</a></p><h3 id="2、配置文件说明"><a href="#2、配置文件说明" class="headerlink" title="2、配置文件说明"></a>2、配置文件说明</h3><p>1、Nacos共用的<code>init.d/custom.properties</code>，与官方保持一致，按需使用</p><p>2、docker-compose-nacos1.yml</p><p>以 1为例， 带个都大同小异</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312163817.png"></p><h3 id="3、启动-nacos-集群"><a href="#3、启动-nacos-集群" class="headerlink" title="3、启动 nacos 集群"></a>3、启动 nacos 集群</h3><h4 id="1、将源代码配置修改后，分别上传到三台主机"><a href="#1、将源代码配置修改后，分别上传到三台主机" class="headerlink" title="1、将源代码配置修改后，分别上传到三台主机"></a>1、将源代码配置修改后，分别上传到三台主机</h4><ul><li><strong>101.34.180.133 对应 nacos-1</strong></li><li><strong>106.52.23.202 对应 nacos-2</strong></li><li><strong>119.45.122.161 对应 nacos-3</strong></li></ul><h4 id="2、启动容器"><a href="#2、启动容器" class="headerlink" title="2、启动容器"></a>2、启动容器</h4><p>分别在各主机上进入各自对应的nacos目录中，启动容器，命令如下：</p><p>133服务器：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">$ cd nacos<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>docker/nacos<span class="token punctuation">-</span>1$ docker<span class="token punctuation">-</span>compose <span class="token punctuation">-</span>f docker<span class="token punctuation">-</span>compose<span class="token punctuation">-</span>nacos1.yml up <span class="token punctuation">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>202服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> nacos-cluster-docker/nacos-2$ docker-compose -f docker-compose-nacos2.yml up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>161服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> nacos-cluster-docker/nacos-3$ docker-compose -f docker-compose-nacos3.yml up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h4 id="3、查看日志"><a href="#3、查看日志" class="headerlink" title="3、查看日志"></a>3、查看日志</h4><p>查看日志分别在对应的nacos-*目录下，执行</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">tail -f cluster-logs/nacos*/nacos.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、停止容器"><a href="#4、停止容器" class="headerlink" title="4、停止容器"></a>4、停止容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">$ docker<span class="token punctuation">-</span>compose <span class="token punctuation">-</span>f docker<span class="token punctuation">-</span>compose<span class="token punctuation">-</span>nacos1.yml stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、访问Nacos-UI界面"><a href="#5、访问Nacos-UI界面" class="headerlink" title="5、访问Nacos UI界面"></a>5、访问Nacos UI界面</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/P9RM@BX1BNB%7D%8_G%7B7UT9SQ.png"></p><p>这里我们看到Nacos集群各节点已经正常了，LEADER与FOLLOWER已经选出，一切正常了</p><h2 id="四、nginx-负载"><a href="#四、nginx-负载" class="headerlink" title="四、nginx  负载"></a>四、nginx  负载</h2><h3 id="1、创建并启动"><a href="#1、创建并启动" class="headerlink" title="1、创建并启动"></a>1、创建并启动</h3><h4 id="1、拉取"><a href="#1、拉取" class="headerlink" title="1、拉取"></a>1、拉取</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx<span class="token punctuation">-</span>test <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span>d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– name 容器命名</p><p>-v 映射目录</p><p>-d 设置容器后台运行</p><p>-p 本机端口映射 将容器的80端口映射到本机的80端口</p><h3 id="2、映射到本地"><a href="#2、映射到本地" class="headerlink" title="2、映射到本地"></a>2、映射到本地</h3><h4 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h4><p>首先在本机创建nginx的一些文件存储目录</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>www</strong>: nginx存储网站网页的目录</p><p><strong>logs</strong>: nginx日志目录</p><p><strong>conf</strong>: nginx配置文件目录</p><h4 id="2、映射"><a href="#2、映射" class="headerlink" title="2、映射"></a>2、映射</h4><p>（1）先查看容器</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker ps <span class="token punctuation">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）映射</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker cp 481e121fb29f<span class="token punctuation">:</span>/etc/nginx/nginx.conf /root/nginx/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h3><p>需要说明下，ngxin-test 容器是为了获得容器的配置文件，最终使用的是 nginx-web</p><p>目前已经启动 nginx-test 80端口，若是 nginx-web指定的也是 80，就需要关闭 nginx-test了</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker stop nginx<span class="token punctuation">-</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1、新容器映射"><a href="#1、新容器映射" class="headerlink" title="1、新容器映射"></a>1、新容器映射</h4><p>创建新nginx容器nginx-web,并将<strong>www,logs,conf</strong>目录映射到本地</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx<span class="token punctuation">-</span>web <span class="token punctuation">-</span>v /root/nginx/www<span class="token punctuation">:</span>/usr/share/nginx/html <span class="token punctuation">-</span>v /root/nginx/conf/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf <span class="token punctuation">-</span>v /root/nginx/logs<span class="token punctuation">:</span>/var/log/nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、启动-1"><a href="#2、启动-1" class="headerlink" title="2、启动"></a>2、启动</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker start nginx<span class="token punctuation">-</span>web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、配置负载均衡"><a href="#4、配置负载均衡" class="headerlink" title="4、配置负载均衡"></a>4、配置负载均衡</h3><h4 id="1、进入-配置"><a href="#1、进入-配置" class="headerlink" title="1、进入 配置"></a>1、进入 配置</h4><p>在 root 底下</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312210733.png"></p><h4 id="2、配置源码"><a href="#2、配置源码" class="headerlink" title="2、配置源码"></a>2、配置源码</h4><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">user  nginx;worker_processes  auto;error_log  /var/log/nginx/error.log notice;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    #gzip  on;upstream nacos-cluster { server 101.34.180.133:8848;server 106.52.23.202:8848;server 119.45.122.161:8848;}server {listen 80;location /{proxy_pass http://nacos-cluster;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的是这块</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312210843.png"></p><p>说明下：</p><p>新手可能不太会nginx，listen 为 80 是因为你容器启动时候是 80，当访问 80的时候转到 以上三个 ip 负载轮训，还可以设置权重可以去看文档</p><h4 id="3、重启"><a href="#3、重启" class="headerlink" title="3、重启"></a>3、重启</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker restart nginx<span class="token punctuation">-</span>web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、Spring-boot连接"><a href="#五、Spring-boot连接" class="headerlink" title="五、Spring-boot连接"></a>五、Spring-boot连接</h2><h4 id="1、yml配置"><a href="#1、yml配置" class="headerlink" title="1、yml配置"></a>1、yml配置</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312211044.png"></p><h4 id="2、查看客户端"><a href="#2、查看客户端" class="headerlink" title="2、查看客户端"></a>2、查看客户端</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220312211146.png"></p><h2 id="六、问题汇总"><a href="#六、问题汇总" class="headerlink" title="六、问题汇总"></a>六、问题汇总</h2><h3 id="1、关于-503"><a href="#1、关于-503" class="headerlink" title="1、关于 503"></a>1、关于 503</h3><p>异常信息：java.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([101.34.180.133:8848]) tried: failed to req API:101.34.180.133:8848/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!</p><p>个人见解：这个问题博主认为是集群节点少于3个出现的，因为服务器过期了一台剩下了 两台，所以报这个错误，三台没有这个问题。</p><h2 id="七、参考文档-↓"><a href="#七、参考文档-↓" class="headerlink" title="七、参考文档 ↓"></a>七、参考文档 ↓</h2><p><a href="https://www.cnblogs.com/hellxz/p/nacos-cluster-docker.html">https://www.cnblogs.com/hellxz/p/nacos-cluster-docker.html</a></p><p><a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p><p><a href="https://www.cnblogs.com/bigband/p/13515219.html">https://www.cnblogs.com/bigband/p/13515219.html</a></p><p><a href="https://my.oschina.net/u/3773384/blog/1810111">https://my.oschina.net/u/3773384/blog/1810111</a></p><p><a href="https://www.jianshu.com/p/658911a8cff3">https://www.jianshu.com/p/658911a8cff3</a></p><p><a href="https://www.yht7.com/news/92162">https://www.yht7.com/news/92162</a></p><p><a href="https://blog.csdn.net/weixin_40461281/article/details/92586378">https://blog.csdn.net/weixin_40461281/article/details/92586378</a></p><p><a href="https://www.cnblogs.com/ilinuxer/p/6916969.html">https://www.cnblogs.com/ilinuxer/p/6916969.html</a></p><p><a href="https://blog.csdn.net/weixin_40461281/article/details/92586378">https://blog.csdn.net/weixin_40461281/article/details/92586378</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式技术栈" scheme="https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="springcloud-alibaba" scheme="https://mykkto.github.io/tags/springcloud-alibaba/"/>
    
    <category term="nacos" scheme="https://mykkto.github.io/tags/nacos/"/>
    
    <category term="集群" scheme="https://mykkto.github.io/tags/%E9%9B%86%E7%BE%A4/"/>
    
    <category term="docker-compose" scheme="https://mykkto.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>高阶面试题：JUC-AQS</title>
    <link href="https://mykkto.github.io/posts/3fb37166.html"/>
    <id>https://mykkto.github.io/posts/3fb37166.html</id>
    <published>2022-03-09T13:32:10.000Z</published>
    <updated>2022-11-12T15:07:08.031Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><h3 id="1、字面意思"><a href="#1、字面意思" class="headerlink" title="1、字面意思"></a>1、字面意思</h3><p>抽象的队列同步器</p><p>结构关系图：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220221163441.png"></p><h3 id="2、技术解释"><a href="#2、技术解释" class="headerlink" title="2、技术解释"></a>2、技术解释</h3><ul><li>用来构建锁或者其它同步器组件的<code>重量级基础框架及整个JUC体系的基石</code>。</li><li>通过内置的FIFO1<code>队列</code>来完成资源获取线程的排队工作，并通过一个<code>int类变量</code><br>表示持有锁的状态</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220221163706.png"></p><p>CLH：Craig、Landin and Hagersten 队列，是一个单向链表，AQS中的队列是CLH变体的虚拟双向队列FIFO</p><h2 id="二、AQS-JUC（基石）"><a href="#二、AQS-JUC（基石）" class="headerlink" title="二、AQS=JUC（基石）"></a>二、AQS=JUC（基石）</h2><p>AQS为什么是JUC内容中最重要的基石</p><h3 id="1、AQS有关的锁"><a href="#1、AQS有关的锁" class="headerlink" title="1、AQS有关的锁"></a>1、AQS有关的锁</h3><ul><li>ReentrantLock</li></ul><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220221144606.png"></p><ul><li>CountDownLatch</li><li>ReentrantReadWriteLock</li><li>Semaphore</li><li>……………等等</li></ul><h3 id="2、进一步理解锁和同步器的关系"><a href="#2、进一步理解锁和同步器的关系" class="headerlink" title="2、进一步理解锁和同步器的关系"></a>2、进一步理解锁和同步器的关系</h3><ul><li>锁，面向锁的使用者：<ul><li>定义了程序员和锁交互的使用层API，隐藏了实现细节，你调用即可。</li></ul></li><li>同步器，面向锁的实现者<ul><li>比如Java并发大神DougLee，提出统一规范并简化了锁的实现，<br>屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等。</li></ul></li></ul><h2 id="三、能干嘛"><a href="#三、能干嘛" class="headerlink" title="三、能干嘛"></a>三、能干嘛</h2><h3 id="1、加锁会导致阻塞"><a href="#1、加锁会导致阻塞" class="headerlink" title="1、加锁会导致阻塞"></a>1、加锁会导致阻塞</h3><p>有阻塞就需要排队，实现排队必然需要队列</p><h3 id="2、说明解释"><a href="#2、说明解释" class="headerlink" title="2、说明解释"></a>2、说明解释</h3><p>抢到资源的线程直接使用处理业务，抢不到资源的必然涉及一种<code>排队等候机制</code>。抢占资源失败的线程继续去等待(类似银行业务办理窗口都满了，暂时没有受理窗口的顾客只能去<code>候客区排队等候</code>)，但等候线程仍然保留获取锁的可能且获取锁流程仍在继续(候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务)。</p><p>既然说到了<code>排队等候机制</code>，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？</p><p>如果共享资源被占用，<code>就需要一定的阻塞等待唤醒机制来保证锁分配</code>。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的结点（<code>Node</code>），通过<code>CAS、自旋以及LockSupport.park()</code>的方式，维护state变量的状态，使并发达到同步的效果。</p><p>LockSupport.park()：阻塞当前线程的执行，且<strong>都不会释放当前线程占有的锁资源</strong>；</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220222105221.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220222125213.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220222131031.png"></p><h2 id="四、AQS-解读"><a href="#四、AQS-解读" class="headerlink" title="四、AQS 解读"></a>四、AQS 解读</h2><h3 id="1、AQS概述"><a href="#1、AQS概述" class="headerlink" title="1、AQS概述"></a>1、AQS概述</h3><h4 id="1、官网解释"><a href="#1、官网解释" class="headerlink" title="1、官网解释"></a>1、官网解释</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224111756.png"></p><h4 id="2、阻塞-gt-队列"><a href="#2、阻塞-gt-队列" class="headerlink" title="2、阻塞->队列"></a>2、阻塞-&gt;队列</h4><p>有阻塞就需要排队，实现排队必然需要队列</p><p>AQS使用一个volatile的int类型的成员变量来表示同步状态，通过内置的<br>FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成<br>一个Node节点来实现锁的分配，通过CAS完成对State值的修改。</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224112845.png"></p><h3 id="2、AQS内部体系架构"><a href="#2、AQS内部体系架构" class="headerlink" title="2、AQS内部体系架构"></a>2、AQS内部体系架构</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224114013.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224113957.png"></p><h4 id="1、AQS自身"><a href="#1、AQS自身" class="headerlink" title="1、AQS自身"></a>1、AQS自身</h4><h5 id="1、AQS的int变量-★"><a href="#1、AQS的int变量-★" class="headerlink" title="1、AQS的int变量 ★"></a>1、AQS的int变量 ★</h5><p>1、AQS的同步状态State成员变量</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224155656.png"></p><p>2、银行办理业务的受理窗口状态（通俗理解）</p><ul><li>零就是没人（自由状态），可以办理</li><li>大于等于1，有人占用窗口，等着去</li></ul><h5 id="2、AQS的CLH队列"><a href="#2、AQS的CLH队列" class="headerlink" title="2、AQS的CLH队列"></a>2、AQS的CLH队列</h5><p>1、CLH队列(三个大牛的名字组成)，为一个双向队列</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224161127.png"></p><p>2、银行候客区的等待顾客（通俗理解）</p><h5 id="3、小总结"><a href="#3、小总结" class="headerlink" title="3、小总结"></a>3、小总结</h5><ul><li>有阻塞就需要排队，实现排队必然需要队列</li><li>state变量+CLH双端队列</li></ul><h4 id="2、内部类Node"><a href="#2、内部类Node" class="headerlink" title="2、内部类Node"></a>2、内部类Node</h4><p>内部类Node(Node类在AQS类内部)</p><h5 id="1、Node的int变量-★"><a href="#1、Node的int变量-★" class="headerlink" title="1、Node的int变量 ★"></a>1、Node的int变量 ★</h5><p>1、Node的等待状态waitState成员变量</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224161754.png"></p><p>2、说明</p><ul><li>等候区其它顾客(其它线程)的等待状态</li><li>队列中每个排队的个体就是一个  Node</li></ul><h5 id="2、Node此类详解"><a href="#2、Node此类详解" class="headerlink" title="2、Node此类详解"></a>2、Node此类详解</h5><p>1、内部结构</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224162501.png"></p><p>2、属性说明</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220224162531.png"></p><h3 id="3、AQS同步队列的基本结构"><a href="#3、AQS同步队列的基本结构" class="headerlink" title="3、AQS同步队列的基本结构"></a>3、AQS同步队列的基本结构</h3><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220301135124.png"></p><p>CLH：Craig、Landin and Hagersten 队列，是个单向链表，AQS中的队列是CLH变体的虚拟双向队列（FIFO）</p><p>FIFO：队列中用到了哨兵节点（傀儡节点）既，头节点（好处就是不用去判空，因为有头节点）</p><h2 id="五、从ReentrantLock开始解读AQS"><a href="#五、从ReentrantLock开始解读AQS" class="headerlink" title="五、从ReentrantLock开始解读AQS"></a>五、从ReentrantLock开始解读AQS</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p><strong>Lock接口的实现类，基本都是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的</strong></p><p>1、可以看出内部子类 Sync，继承了 AQS </p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329210645.png"></p><p>2、看下类 UML图，Sync 底下又有两个子类（分别为公平和非公平）</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329211351.png"></p><h3 id="2、公平锁和非公平锁"><a href="#2、公平锁和非公平锁" class="headerlink" title="2、公平锁和非公平锁"></a>2、公平锁和非公平锁</h3><h4 id="1、先从创建入手"><a href="#1、先从创建入手" class="headerlink" title="1、先从创建入手"></a>1、先从创建入手</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329211608.png"></p><h4 id="2、追溯"><a href="#2、追溯" class="headerlink" title="2、追溯"></a>2、追溯</h4><p>1、默认构造方法，默认不传参构造</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329213723.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329213641.png"></p><p>2、带参传入，此时判断是非公平还是公平</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1648561077377.png" alt="1648561077377"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329213816.png"></p><p>3、很明显这是两个类，分别继承与Sync，上面有提到</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329213915.png"></p><h4 id="3、看源码"><a href="#3、看源码" class="headerlink" title="3、看源码"></a>3、看源码</h4><h5 id="1、看差异"><a href="#1、看差异" class="headerlink" title="1、看差异"></a>1、看差异</h5><p>1、可以明显看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件 <code>hasQueuedPredecessors()</code></p><p><strong>hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法</strong></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329214203.png"></p><h5 id="2、对比"><a href="#2、对比" class="headerlink" title="2、对比"></a>2、对比</h5><p>公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；</p><p>非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一个排队线程在unpark()，之后还是需要竞争锁（存在线程竞争的情况下）</p><h5 id="3、必调-lock"><a href="#3、必调-lock" class="headerlink" title="3、必调 lock()"></a>3、必调 lock()</h5><p>在创建完公平/非公平锁，调用<code>lock</code>方法进行加锁，最终都会调用 <code>acquire</code> 方法</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329221223.png"></p><h3 id="3、源码Api解读"><a href="#3、源码Api解读" class="headerlink" title="3、源码Api解读"></a>3、源码Api解读</h3><h4 id="1、lock"><a href="#1、lock" class="headerlink" title="1、lock()"></a>1、lock()</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329221703.png"></p><h4 id="2、acquire"><a href="#2、acquire" class="headerlink" title="2、acquire()"></a>2、acquire()</h4><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329223153.png"></p><p><strong>三个走向</strong></p><p>1、tryAcquire() -&gt; tryAcquire () 由于子类 <code>FairSync</code> 实现</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329223909.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329223835.png"></p><p>2、调用 addWaiter() -&gt; enq() 入队操作</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329224108.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329224256.png"></p><p>3、acquireQueued() -&gt; cancelAcquire()</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329225026.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220329225124.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/tong-yuan/p/11768904.html">https://www.cnblogs.com/tong-yuan/p/11768904.html</a></p><p><a href="https://baijiahao.baidu.com/s?id=1718317852417206951&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1718317852417206951&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://blog.csdn.net/hengyunabc/article/details/28126139">https://blog.csdn.net/hengyunabc/article/details/28126139</a></p><p>哨兵节点解读：<a href="https://www.cnblogs.com/litexy/p/9749544.html">https://www.cnblogs.com/litexy/p/9749544.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试题" scheme="https://mykkto.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="AQS" scheme="https://mykkto.github.io/tags/AQS/"/>
    
    <category term="多线程" scheme="https://mykkto.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="JUC" scheme="https://mykkto.github.io/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>Oracle11g(docker版)</title>
    <link href="https://mykkto.github.io/posts/42dbeac3.html"/>
    <id>https://mykkto.github.io/posts/42dbeac3.html</id>
    <published>2022-02-28T04:49:31.000Z</published>
    <updated>2022-11-12T15:07:08.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Docker安装和配置"><a href="#一、Docker安装和配置" class="headerlink" title="一、Docker安装和配置"></a>一、Docker安装和配置</h2><h3 id="1、镜像拉取（第三方）"><a href="#1、镜像拉取（第三方）" class="headerlink" title="1、镜像拉取（第三方）"></a>1、镜像拉取（第三方）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、下载完后，查看"><a href="#2、下载完后，查看" class="headerlink" title="2、下载完后，查看"></a>2、下载完后，查看</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228105216.png"></p><h3 id="3、创建容器"><a href="#3、创建容器" class="headerlink" title="3、创建容器"></a>3、创建容器</h3><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 1521<span class="token punctuation">:</span>1521 <span class="token punctuation">-</span><span class="token punctuation">-</span>name oracle11g registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/helowin/oracle_11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228105956.png"></p><h3 id="4、启动容器，操作"><a href="#4、启动容器，操作" class="headerlink" title="4、启动容器，操作"></a>4、启动容器，操作</h3><h4 id="1、启动"><a href="#1、启动" class="headerlink" title="1、启动"></a>1、启动</h4><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker start oracle11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、进入容器"><a href="#2、进入容器" class="headerlink" title="2、进入容器"></a>2、进入容器</h4><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker exec <span class="token punctuation">-</span>it oracle11g bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、切换root用户"><a href="#3、切换root用户" class="headerlink" title="3、切换root用户"></a>3、切换root用户</h4><pre class="line-numbers language-none"><code class="language-none">su root密码：helowin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：现在还不能退出，继续操作</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228110834.png"></p><h3 id="5、编辑profile文件配置ORACLE环境变量"><a href="#5、编辑profile文件配置ORACLE环境变量" class="headerlink" title="5、编辑profile文件配置ORACLE环境变量"></a>5、编辑profile文件配置ORACLE环境变量</h3><p>在docker中查找并编辑profile文件 vi /etc/profile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORACLE_HOME</span><span class="token operator">=</span>/home/oracle/app/oracle/product/11.2.0/dbhome_2<span class="token builtin class-name">export</span> <span class="token assign-left variable">ORACLE_SID</span><span class="token operator">=</span>helowin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ORACLE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在最后上加：</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228111122.png"></p><p>保存并退出 ：wq</p><h3 id="6、oracle的配置"><a href="#6、oracle的配置" class="headerlink" title="6、oracle的配置"></a>6、oracle的配置</h3><h4 id="1-创建软连接"><a href="#1-创建软连接" class="headerlink" title="1. 创建软连接"></a>1. 创建软连接</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s <span class="token variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-切换到oracle-用户"><a href="#2-切换到oracle-用户" class="headerlink" title="2.切换到oracle 用户"></a>2.切换到oracle 用户</h4><p>这里还要说一下，一定要写中间的 - 必须要，否则软连接无效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> - oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228111344.png"></p><h3 id="7、oracle数据库的操作"><a href="#7、oracle数据库的操作" class="headerlink" title="7、oracle数据库的操作"></a>7、oracle数据库的操作</h3><h4 id="1-登录sqlplus并修改sys、system用户密码"><a href="#1-登录sqlplus并修改sys、system用户密码" class="headerlink" title="1. 登录sqlplus并修改sys、system用户密码"></a>1. 登录sqlplus并修改sys、system用户密码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlplus /nologconn /as sysdba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228103729.png"></p><h4 id="2-修改和创建用户"><a href="#2-修改和创建用户" class="headerlink" title="2. 修改和创建用户"></a>2. 修改和创建用户</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> system identified <span class="token keyword">by</span> system<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> sys identified <span class="token keyword">by</span> sys<span class="token punctuation">;</span>也可以创建用户  <span class="token keyword">create</span> <span class="token keyword">user</span> test identified <span class="token keyword">by</span> test<span class="token punctuation">;</span>并给用户赋予权限  <span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span>dba <span class="token keyword">to</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-scott用户的开启"><a href="#3-scott用户的开启" class="headerlink" title="3. scott用户的开启"></a>3. scott用户的开启</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--解锁scott用户（安装时若使用默认情况没有解锁和设置密码进行下列操作，要超级管理员操作）</span><span class="token keyword">alter</span> <span class="token keyword">user</span> scott account <span class="token keyword">unlock</span><span class="token punctuation">;</span><span class="token comment">--解锁scott用户的密码【此句也可以用来重置密码】</span><span class="token keyword">alter</span> <span class="token keyword">user</span> scott identified <span class="token keyword">by</span> tiger<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、客户端连接"><a href="#二、客户端连接" class="headerlink" title="二、客户端连接"></a>二、客户端连接</h2><h3 id="1、navicat连接"><a href="#1、navicat连接" class="headerlink" title="1、navicat连接"></a>1、navicat连接</h3><p>打开navicat后（navicat12不用配置oci.dll文件了）</p><p><img src="C:\Users\my_kk\AppData\Roaming\Typora\typora-user-images\1646018355584.png" alt="1646018355584"></p><h3 id="2、pl-sql-连接"><a href="#2、pl-sql-连接" class="headerlink" title="2、pl/sql 连接"></a>2、pl/sql 连接</h3><p>101.xx.xxx.133:1521/helowinXDB<br>密码：tiger</p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228112446.png"></p><h2 id="三、其他功能"><a href="#三、其他功能" class="headerlink" title="三、其他功能"></a>三、其他功能</h2><h4 id="1、scott赋予最高权限"><a href="#1、scott赋予最高权限" class="headerlink" title="1、scott赋予最高权限"></a>1、scott赋予最高权限</h4><p>分两条运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CONN / AS SYSDBA<span class="token punctuation">;</span>GRANT DBA TO SCOTT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228114707.png"></p><p><img src="https://v1.mykkto.cn/image/blog/2022/springcloud/20220228114949.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/laoluoits/p/13942119.html">https://www.cnblogs.com/laoluoits/p/13942119.html</a></p><p><a href="https://www.cnblogs.com/flyingsand/p/9463460.html">https://www.cnblogs.com/flyingsand/p/9463460.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="https://mykkto.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="oracle" scheme="https://mykkto.github.io/tags/oracle/"/>
    
    <category term="docker" scheme="https://mykkto.github.io/tags/docker/"/>
    
    <category term="安装" scheme="https://mykkto.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
