{"meta":{"title":"jack","subtitle":"jackの博客","description":"专科 | 计算机与网络 | 简书作者","author":"jack","url":"https://mykkto.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.725Z","comments":true,"path":"404.html","permalink":"https://mykkto.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2022-01-06T14:09:33.869Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://mykkto.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2022-01-06T14:09:33.871Z","updated":"2022-01-06T14:09:33.871Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://mykkto.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.745Z","comments":true,"path":"List/index.html","permalink":"https://mykkto.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.867Z","comments":true,"path":"about/index.html","permalink":"https://mykkto.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.867Z","comments":true,"path":"archives/index.html","permalink":"https://mykkto.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"categories/index.html","permalink":"https://mykkto.github.io/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"census/index.html","permalink":"https://mykkto.github.io/census/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-01-06T15:45:01.231Z","updated":"2022-01-06T15:45:01.231Z","comments":true,"path":"contact/index.html","permalink":"https://mykkto.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 jackの友链信息 博客名称: jckの博客 博客网址: https://mykkto.github.io/"},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.872Z","comments":true,"path":"resource/index.html","permalink":"https://mykkto.github.io/resource/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-01-06T14:09:33.871Z","comments":true,"path":"friends/index.html","permalink":"https://mykkto.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.873Z","comments":true,"path":"tags/index.html","permalink":"https://mykkto.github.io/tags/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.745Z","comments":true,"path":"List/movies/index.html","permalink":"https://mykkto.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-01-08T15:55:11.896Z","updated":"2022-01-06T14:09:33.734Z","comments":true,"path":"List/galleries/index.html","permalink":"https://mykkto.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.747Z","comments":true,"path":"List/tools/index.html","permalink":"https://mykkto.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.746Z","comments":true,"path":"List/music/index.html","permalink":"https://mykkto.github.io/List/music/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-01-06T14:09:33.735Z","updated":"2022-01-06T14:09:33.735Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://mykkto.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-01-06T14:09:33.734Z","updated":"2022-01-06T14:09:33.734Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://mykkto.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-01-06T14:09:33.736Z","updated":"2022-01-06T14:09:33.736Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-01-06T14:09:33.737Z","updated":"2022-01-06T14:09:33.737Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-01-06T14:09:33.738Z","updated":"2022-01-06T14:09:33.738Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-01-06T14:09:33.739Z","updated":"2022-01-06T14:09:33.739Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-01-06T14:09:33.738Z","updated":"2022-01-06T14:09:33.738Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-01-06T14:09:33.740Z","updated":"2022-01-06T14:09:33.740Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://mykkto.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-01-08T15:55:21.871Z","updated":"2022-01-06T14:09:33.742Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-01-06T14:09:33.743Z","updated":"2022-01-06T14:09:33.743Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-01-06T14:09:33.743Z","updated":"2022-01-06T14:09:33.743Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-01-06T14:09:33.744Z","updated":"2022-01-06T14:09:33.744Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://mykkto.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringCloud-Stream消息驱动","slug":"03javafenbushi/01springcloud/12_SpringCloud-Stream","date":"2022-02-19T14:52:16.000Z","updated":"2022-02-20T01:33:26.669Z","comments":true,"path":"posts/e867710e.html","link":"","permalink":"https://mykkto.github.io/posts/e867710e.html","excerpt":"","text":"友情链接rabitMQ安装（docker） 1、消息驱动概述1、是什么屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型 官网：https://m.wang1314.com/doc/webapp/topic/20971999.html 2、设计思想1、标准MQ Message：生产者/消费者之间靠消息媒介传递信息内容 MessageChannel（消息通道）：消息必须走特定的通道 消息通道里的消息如何被消费呢，谁负责收发处理 消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅 2、为什么用Cloud Stream1、概念比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic和Partitions分区， 这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了一种解耦合的方式。 2、Stream中的消息通信方式遵循了发布-订阅模式Topic主题进行广播： 在RabbitMQ就是Exchange 在Kakfa中就是Topic 3、Spring Cloud Stream标准流程套路 Binder： 很方便的连接中间件，屏蔽差异 Channel： 通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置 Source和Sink： 简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入 4、编码API和常用注解 2、案例说明工程中新建三个子模块 cloud-stream-rabbitmq-provider8801， 作为生产者进行发消息模块 cloud-stream-rabbitmq-consumer8802，作为消息接收模块 cloud-stream-rabbitmq-consumer8803 作为消息接收模块 3、消息驱动之生产者1、新建Modulecloud-stream-rabbitmq-provider8801 2、pom&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-stream-rabbitmq-provider8801&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--基础配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、yml 4、主启动 5、业务类 6、测试4、消息驱动之消费者1、新建Modulecloud-stream-rabbitmq-consumer8802 2、pom3、yml 4、主启动 5、业务类 6、测试5、分组消费与持久化1、2、3、4、5、6、","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"消息驱动","slug":"消息驱动","permalink":"https://mykkto.github.io/tags/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"},{"name":"stream","slug":"stream","permalink":"https://mykkto.github.io/tags/stream/"}],"author":"mykk"},{"title":"SpringCloud-Sleuth分布式请求链路跟踪","slug":"03javafenbushi/01springcloud/13_SpringCloud-Sleuth","date":"2022-02-12T18:12:58.000Z","updated":"2022-02-19T15:18:53.946Z","comments":true,"path":"posts/35c50dd0.html","link":"","permalink":"https://mykkto.github.io/posts/35c50dd0.html","excerpt":"","text":"1、概述1、为什么出现​ 在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。 2、是什么1、官网https://github.com/spring-cloud/spring-cloud-sleuth 2、说明Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案 在分布式系统中提供追踪解决方案并且兼容支持了zipkin 2、搭建链路监控步骤1、zipkin1、下载 SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可 https://repo1.maven.org/maven2/io/zipkin/java/zipkin-server/ zipkin-server-2.12.9-exec.jar 2、运行 jarjava -jar zipkin-server-2.12.9-exec.jar 3、运行控制台 2、3、4、5、","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务跟踪","slug":"服务跟踪","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA/"},{"name":"sleuth","slug":"sleuth","permalink":"https://mykkto.github.io/tags/sleuth/"}],"author":"mykk"},{"title":"SpringCloud-Bus分布式节点链接","slug":"03javafenbushi/01springcloud/11_SpringCloud-Bus","date":"2022-02-06T03:49:12.000Z","updated":"2022-02-19T15:18:53.939Z","comments":true,"path":"posts/699f8954.html","link":"","permalink":"https://mykkto.github.io/posts/699f8954.html","excerpt":"","text":"1、概述1、是什么Bus支持两种消息代理：RabbitMQ 和 Kafka Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。 Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。 Spring Clud Bus目前支持RabbitMQ和Kafka。 2、能干嘛Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。 3、为何被称为总线什么是总线在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。 基本原理ConfigClient实例都监听MQ中同一个topic(默认是springCloudBus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。 2、RabbitMQ环境配置1、安装安装docker：https://www.jianshu.com/p/f554c85b25c1 1、拉取docker pull rabbitmq:3.7.7-management 2、创建容器并启动docker run -d --hostname localhost --name myrabbit -p 15672:15672 -p 5672:5672 rabbitmq:3.7.7-management -d 后台运行容器； –name 指定容器名； -p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）； -v 映射目录或文件； –hostname 主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）； -e 指定环境变量； 默认的用户名：guest； 默认用户名的密码：guest） 3、访问http://localhost:15672/ （换成自己服务器的IP） 3、SpringCloud Bus 动态刷新全局广播1、演示广播效果，增加复杂度以3355为模板再制作一个3366 1、建modelcloud-config-client-3366 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-config-client-3366-2&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、bootstrap.ymlserver: port: 3366 spring: application: name: config-client cloud: #Config客户端配置 config: label: master #分支名称 name: config #配置文件名称 profile: dev #读取后缀名称 上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml uri: http://localhost:3344 #配置中心地址 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient public class ConfigClientMain3366 { public static void main(String[] args) { SpringApplication.run (ConfigClientMain3366.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RefreshScope public class ConfigClientController { @Value(\"${server.port}\") private String serverPort; @Value(\"${mytest.info}\") private String configInfo; @GetMapping(\"/configInfo\") public String configInfo() { return \"serverPort: \" + serverPort + \"\\t\\n\\n configInfo: \" + configInfo; } } 2、给cloud-config-center-3344配置中心服务端添加消息总线支持1、pom&lt;!--添加消息总线RabbitMQ支持--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; 2、yml##rabbitmq相关配置,暴露bus刷新配置的端点 management: endpoints: #暴露bus刷新配置的端点 web: exposure: include: 'bus-refresh' 3、给cloud-config-client-3355客户端添加消息总线支持1、pom&lt;!--添加消息总线RabbitMQ支持--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; 2、bootstrap.yml#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口 rabbitmq: host: localhost port: 5672 username: guest password: guest server: port: 3355 spring: application: name: config-client cloud: #Config客户端配置 config: label: master #分支名称 name: config #配置文件名称 profile: dev #读取后缀名称 上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml uri: http://localhost:3344 #配置中心地址 #rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口 rabbitmq: host: 106.xx.xx.xx port: 5672 username: guest password: guest eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ # 暴露监控端点 management: endpoints: web: exposure: include: \"*\" 4、给cloud-config-client-3366客户端添加消息总线支持同上5、测试1、修改Github上配置文件增加版本号 2、发送 post 请求curl -X POST \"http://localhost:3344/actuator/bus-refresh 3、配置中心http://config-3344.com:3344/config-dev.yml 同步更新了配置信息 4、客户端http://localhost:3355/configInfo 发现并没有更新，运行指定 定点试试：curl -X POST \"http://localhost:3355/actuator/bus-refresh 运行后发现就更新了，很奇怪哦 5、结论一次修改，广播通知，处处生效（目前只有服务端是这样的，客户端只能手动，问题原因未知） 4、SpringCloud Bus 动态刷新定点(局部)通知1、概念指定具体某一个实例生效而不是全部 2、公式http://localhost:配置中心的端口号/actuator/bus-refresh/{destination} /bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例 3、案例只刷新 3355 curl -X POST \"http://localhost:3344/actuator/bus-refresh/config-client:3355\" 参考：https://blog.csdn.net/haoweng4800/article/details/102946846 https://www.cnblogs.com/huanshilang/p/12585877.html https://www.jianshu.com/p/efac7bd8941f","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"bus","slug":"bus","permalink":"https://mykkto.github.io/tags/bus/"},{"name":"节点链接","slug":"节点链接","permalink":"https://mykkto.github.io/tags/%E8%8A%82%E7%82%B9%E9%93%BE%E6%8E%A5/"}],"author":"mykk"},{"title":"SpringCloud-Config分布式配置","slug":"03javafenbushi/01springcloud/10_SpringCloud-Config","date":"2022-02-04T01:33:12.000Z","updated":"2022-02-11T12:43:26.690Z","comments":true,"path":"posts/fc38d8b7.html","link":"","permalink":"https://mykkto.github.io/posts/fc38d8b7.html","excerpt":"","text":"1、概述1、官网https://docs.spring.io/spring-cloud-config/docs/2.2.8.RELEASE/reference/html/ 2、分布式系统面临的—配置问题 微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。 ​ SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理。 3、是什么 SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。 4、怎么玩SpringCloud Config分为服务端和客户端两部分。 服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口 客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。 5、能干嘛 集中管理配置文件 不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release 运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息 当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置 将配置信息以REST接口的形式暴露，post、curl访问刷新均可…… 6、与GitHub整合配置由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，但最推荐的还是Git，而且使用的是http/https访问的形式 2、Config服务端配置1、创建github仓库1、新建仓库用你自己的账号在GitHub/gitee 上新建一个名为springcloud-config的新Repository 2、获得刚新建的git地址https://gitee.com/TK_LIMR/spring-cloud-config.git 3、本地硬盘目录上新建git仓库并clonegit clone https://gitee.com/TK_LIMR/spring-cloud-config.git 4、编辑application.yml环境# 不同的开发环境，不同的微服务名字 spring: profiles: active: - dev --- spring: profiles: dev #开发环境 application: name: microservicecloud-config-kk-dev config: info: version1 --- spring: profiles: test #测试环境 application: name: microservicecloud-config-kk-test # 请保存为UTF-8格式 5、上传到gitee上（1）git add . （2）git commit -m \"init yml\" （3）git push origin master 2、项目搭建1、建model新建Module模块cloud-config-center-3344 2、pom&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-config-center-3344&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 3344 spring: application: name: cloud-config-center #注册进Eureka服务器的微服务名 cloud: config: server: git: uri: https://gitee.com/TK_LIMR/spring-cloud-config.git #GitHub上面的git仓库名字 ####权限登录(这里填写自己的) force-pull: true username: xxxxxxxx@163.com password: xxxxxxxx ####搜索目录 search-paths: - springcloud-config ####读取分支 label: master #服务注册到eureka地址 eureka: client: service-url: defaultZone: http://localhost:7001/eureka 4、主启动@EnableConfigServer package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.config.server.EnableConfigServer; @SpringBootApplication @EnableConfigServer public class ConfigCenterMain3344 { public static void main(String[] args) { SpringApplication.run (ConfigCenterMain3344.class,args); } } 5、本地hosts配置127.0.0.1 config-3344.com 6、启动测试生产：http://config-3344.com:3344/master/config-prod.yml 开发：http://config-3344.com:3344/master/config-dev.yml 测试：http://config-3344.com:3344/master/config-test.yml 3、配置读取规则1、官网 2、/{label}/{application}-{profile}.yml参数说明：/分支/服务名/环境 1、master分支http://config-3344.com:3344/master/config-dev.yml http://config-3344.com:3344/master/config-test.yml http://config-3344.com:3344/master/config-prod.yml 2、dev分支http://config-3344.com:3344/dev/config-dev.yml http://config-3344.com:3344/dev/config-test.yml http://config-3344.com:3344/dev/config-prod.yml 3、/{application}-{profile}.yml参数说明：/服务名/环境 http://config-3344.com:3344/config-dev.yml http://config-3344.com:3344/config-test.yml http://config-3344.com:3344/config-prod.yml http://config-3344.com:3344/config-xxxx.yml(不存在的配置) 4、/{application}/{profile}[/{label}]参数说明：/服务名/环境/分支 http://config-3344.com:3344/config/dev/master http://config-3344.com:3344/config/test/master http://config-3344.com:3344/config/test/dev 5、参数说明/{label}-{name}-{profiles}.yml label：分支(branch)name ：服务名profiles：环境(dev/test/prod) 3、Config客户端配置1、建model和测试1、建model新建cloud-config-client-3355 2、pom&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-config-client-3355&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、bootstrap.ymlapplicaiton.yml 是用户级的资源配置项bootstrap.yml 是系统级的，优先级更加高 server: port: 3355 spring: application: name: config-client cloud: #Config客户端配置 config: label: master #分支名称 name: config #配置文件名称 profile: dev #读取后缀名称 上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml uri: http://localhost:3344 #配置中心地址 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient public class ConfigClientMain3355 { public static void main(String[] args) { SpringApplication.run (ConfigClientMain3355.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class ConfigClientController { @Value(\"${config.info}\") private String configInfo; @GetMapping(\"/configInfo\") public String getConfigInfo() { return configInfo; } } 6、测试1、启动Config配置中心3344微服务并自测 http://config-3344.com:3344/master/config-prod.yml http://config-3344.com:3344/master/config-dev.yml 2、启动3355作为Client准备访问 http://localhost:3355/configInfo 2、动态刷新问题 Linux运维修改GitHub上的配置文件内容做调整 刷新3344，发现ConfigServer配置中心立刻响应 刷新3355，发现ConfigClient客户端没有任何响应 3355没有变化除非自己重启或者重新加载 难到每次运维修改配置文件，客户端都需要重启？？噩梦 4、Config客户端之动态刷新操作3355模块 1、POM引入actuator监控&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; 2、修改YML，暴露监控端口# 暴露监控端点 management: endpoints: web: exposure: include: \"*\" 3、业务类Controller修改@RefreshScope package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RefreshScope public class ConfigClientController { @Value(\"${spring.application.name}\") private String configInfo; @GetMapping(\"/configInfo\") public String getConfigInfo() { return configInfo; } } 4、此时修改github—&gt; 3344 —-&gt;33551、添加一个版本号为1 2、此时看下3344（config服务端），没有重启的状态下 没有更新！ 3、此时看下3355（config客户端），没有重启的状态下 没有更新！ 4、总结：是不会更新的 5、解决：需要运维人员运行解决 必须是POST请求 curl -X POST \"http://localhost:3355/actuator/refresh\" 5、还存在的问题 每个微服务都要执行一次post请求，手动刷新？ 写循环代码解决（shell脚本） 可否广播，一次通知，处处生效？ 鸡肋所在 可以使用阿里的nacos 替换解决 整合SpringCloud-Bus解决","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"配置中心","slug":"配置中心","permalink":"https://mykkto.github.io/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"},{"name":"config","slug":"config","permalink":"https://mykkto.github.io/tags/config/"}],"author":"mykk"},{"title":"SpringCloud-Zuul路由网关","slug":"03javafenbushi/01springcloud/09_SpringCloud-GateWay","date":"2022-02-02T01:22:13.000Z","updated":"2022-02-06T10:45:24.575Z","comments":true,"path":"posts/d633875f.html","link":"","permalink":"https://mykkto.github.io/posts/d633875f.html","excerpt":"","text":"一、概述简介1、官网1、上一代zuul 1.Xhttps://github.com/Netflix/zuul/wiki 2、Gatewayhttps://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/ 2、是什么1、概述Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等 2、一句话SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。 3、能干嘛 反向代理 鉴权 流量控制 熔断 日志监控 …… 4、网关在微服务的位置 5、GateWay优于Zuul的地方1、我们为什么选择Gateway？1、neflix不太靠谱，zuul2.0一直跳票，迟迟不发布2、SpringCloud Gateway具有如下特性 基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建； 动态路由：能够匹配任何请求属性； 可以对路由指定 Predicate（断言）和 Filter（过滤器）； 集成Hystrix的断路器功能； 集成 Spring Cloud 服务发现功能； 易于编写的 Predicate（断言）和 Filter（过滤器）； 请求限流功能； 支持路径重写。 3、SpringCloud Gateway 与 Zuul的区别 Zuul 1.x，是一个基于 阻塞 I/ O 的 API Gateway Zuul 1.x 基于Servlet 2. 5使用阻塞架构它不支持任何长连接(如 WebSocket) Zuul 的设计模式和Nginx较像，每次 I/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++ 实现，Zuul 用 Java 实现，而 JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。 Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。 Zuul 2.x的性能较 Zuul 1.x 有较大提升。在性能方面，根据官方提供的基准测试， Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。 Spring Cloud Gateway 建立 在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上， 使用非阻塞 API。 Spring Cloud Gateway 还 支持 WebSocket， 并且与Spring紧密集成拥有更好的开发体验 2、Zuul1.x模型Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。 Servlet的生命周期?servlet由servlet container进行生命周期管理。 container启动时构造servlet对象并调用servlet init()进行初始化； container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。 container关闭时调用servlet destory()销毁servlet； 3、GateWay模型WebFlux是什么 https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework 传统的Web框架，比如说：struts2，springmvc等都是基于Servlet API与Servlet容器基础之上运行的。但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程（Spring5必须让你使用java8） 二、三大核心概念1、Route(路由)路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由 2、Predicate(断言)参考的是Java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由 3、Filter(过滤)指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。 4、总体web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。predicate就是我们的匹配条件；而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了 三、Gateway工作流程1、官网客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。 Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。 Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。 2、核心逻辑路由转发+执行过滤器链 四、入门案例1、模块创建步骤1、建modelcloud-gateway-gateway9527 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-gateway-gateway9527&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--gateway--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka-client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--一般基础配置类--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 9527 spring: application: name: cloud-gateway eureka: instance: hostname: cloud-gateway-service client: #服务提供者provider注册进eureka服务列表内 service-url: register-with-eureka: true fetch-registry: true defaultZone: http://eureka7001.com:7001/eureka 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient public class GatewayMain9527 { public static void main(String[] args) { SpringApplication.run (GatewayMain9527.class,args); } } 2、网关映射配置1、yml配置spring: application: name: cloud-gateway cloud: gateway: routes: - id: payment_routh #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 uri: http://localhost:8001 #匹配后提供服务的路由地址 predicates: - Path=/payment/get/** # 断言，路径相匹配的进行路由 - id: payment_routh2 #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 uri: http://localhost:8001 #匹配后提供服务的路由地址 predicates: - Path=/payment/lb/** # 断言，路径相匹配的进行路由 2、配置说明 4、测试1、启动 eureka集群，启动8001/8002，启动网关9527 添加网关前uri：http://localhost:8001/payment/get/1 添加网关后uri：http://localhost:9527/payment/get/1 3、YML配置说明Gateway网关路由有两种配置方式： 1、方式一：在配置文件yml中配置既上面案例的方式 1、方式二：代码中注入RouteLocator的Beanpackage com.kk.springcloud.config; import org.springframework.cloud.gateway.route.RouteLocator; import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class GatewayConfig { /** * 配置了一个id为route-name的路由规则， * 当访问地址 http://localhost:9527/kk时会自动转发到地址：http://news.baidu.com/ * * @param builder * @return */ @Bean public RouteLocator customRouteLocator(RouteLocatorBuilder builder) { RouteLocatorBuilder.Builder routes = builder.routes ( ); routes.route (\"path_route_mykk\", r -&gt; r.path (\"/kk\").uri (\"http://www.baidu.com/\")).build ( ); return routes.build ( ); } @Bean public RouteLocator customRouteLocator2(RouteLocatorBuilder builder) { RouteLocatorBuilder.Builder routes = builder.routes ( ); routes.route (\"path_route_mykk2\", r -&gt; r.path (\"/kkz\").uri (\"http://www.weibo.com/kkz\")).build ( ); return routes.build ( ); } } 五、微服务名实现动态路由1、概述默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能 2、启动一个eureka7001 + 两个服务提供者8001/8002 4、yml1、需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。 2、lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri server: port: 9527 spring: application: name: cloud-gateway cloud: gateway: discovery: locator: enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由 routes: - id: payment_routh #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 predicates: - Path=/payment/get/** # 断言，路径相匹配的进行路由 - id: payment_routh2 #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 predicates: - Path=/payment/lb/** # 断言，路径相匹配的进行路由 eureka: instance: hostname: cloud-gateway-service client: #服务提供者provider注册进eureka服务列表内 service-url: register-with-eureka: true fetch-registry: true defaultZone: http://eureka7001.com:7001/eureka 5、测试url：http://localhost:9527/payment/lb 六、Predicate(断言)的使用1、启动看下日志 2、Route Predicate FactoriesSpring Cloud Gateway 创建 Route 对象时， 使用 RoutePredicateFactory 创建 Predicate 对象，Predicate 对象可以赋值给 Route。 Spring Cloud Gateway 包含许多内置的Route Predicate Factories。 所有这些谓词是都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑 and 组合。 3、常用的Route Predicate1、After Route Predicate必须要在配置断言的时区的时间之后对应的uri请求才能生效 package com.kk.test; import java.time.ZonedDateTime; public class Test { public static void main(String[] args) { ZonedDateTime zbj = ZonedDateTime.now ( ); // 默认时区 System.out.println (zbj); // ZonedDateTime zny = ZonedDateTime.now(ZoneId.of(\"America/New_York\")); // 用指定时区获取当前时间 // System.out.println(zny); } } - After=2022-02-03T13:53:16.164+08:00[Asia/Shanghai] # 断言，路径相匹配的进行路由 spring: application: name: cloud-gateway cloud: gateway: discovery: locator: enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由 routes: - id: payment_routh #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 predicates: - Path=/payment/get/** # 断言，路径相匹配的进行路由 - After=2022-02-03T13:53:16.164+08:00[Asia/Shanghai] # 断言，路径相匹配的进行路由 - id: payment_routh2 #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 predicates: - Path=/payment/lb/** # 断言，路径相匹配的进行路由 2、Before Route Predicate必须要在配置断言的时区的时间之前对应的uri请求才能生效 - Before=2022-02-03T13:53:16.164+08:00[Asia/Shanghai] # 断言，路径相匹配的进行路由 3、Between Route Predicate必须要在配置断言的时区的时间范围内对应的uri请求才能生效 - Between=2022-02-03T13:53:16.164+08:00[Asia/Shanghai],2022-12-03T13:53:16.164+08:00[Asia/Shanghai] # 断言，路径相匹配的进行路由 4、Cookie Route Predicate必须显示的指定携带的cookie信息，才能访问对应的uri - Cookie=username,mykk # 断言，路径相匹配的进行路由 1、不带cookie的情况 curl http://localhost:9527/payment/get/1 2、携带cookie的情况 curl http://localhost:9527/payment/get/1 --cookie \"username=mykk\" 5、Header Route Predicate必须显示的指定携带的请求头Header 信息，才能访问对应的uri。 两个参数：一个是属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。 - Header=X-Request-Id, \\d+ # 请求头要有X-Request-Id属性并且值为整数的正则表达式 1、不带Header的情况 curl http://localhost:9527/payment/get/1 2、携带Header的情况 curl http://localhost:9527/payment/get/1 -H \"X-Request-Id:123\" 6、Host Route Predicate必须显示的携带指定规则的主机地址 Host信息 ，才能访问对应的uri。 - Host=**.mykk.com 访问测试 curl http://localhost:9527/payment/get/1 -H \"Host:www.mykk.com\" curl http://localhost:9527/payment/get/1 -H \"Host:news.mykk.com\" 7、Method Route Predicate必须显示的指定请求方式 ，才能访问对应的uri。 - Method=GET # 请求方式 8、Path Route Predicate路由到指定的路径 9、Query Route Predicate必须显示的携带指定规则的 请求参数 ，才能访问对应的uri。 说明：支持传入两个参数，一个是属性名，一个为属性值，属性值可以是正则表达式。 测试： url：curl http://localhost:9527/payment/get/1?username=111 七、Filter的使用1、概述路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。 Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生 1、生命周期前置：pre 后置：post 2、种类单一：GatewayFilter https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#the-addrequestparameter-gatewayfilter-factory 31种之多 全局：GlobalFilter 2、常用的GatewayFilterAddRequestParameter filters: - AddRequestParameter=X-Request-Id,1024 #过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024 server: port: 9527 spring: application: name: cloud-gateway cloud: gateway: discovery: locator: enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由 routes: - id: payment_routh #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 filters: - AddRequestParameter=X-Request-Id,1024 #过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024 predicates: - Path=/payment/get/** # 断言，路径相匹配的进行路由 - After=2022-02-03T13:53:16.164+08:00[Asia/Shanghai] # 断言，路径相匹配的进行路由 # - Cookie=username,mykk # - Header=X-Request-Id, \\d+ # 请求头要有X-Request-Id属性并且值为整数的正则表达式 # - Host=**.mykk.com # - Method=GET # 请求方式 - Query=username, \\d+ # 要有参数名username并且值还要是整数才能路由 - id: payment_routh2 #payment_route #路由的ID，没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service #匹配后提供服务的路由地址 predicates: - Path=/payment/lb/** # 断言，路径相匹配的进行路由 eureka: instance: hostname: cloud-gateway-service client: #服务提供者provider注册进eureka服务列表内 service-url: register-with-eureka: true fetch-registry: true defaultZone: http://eureka7001.com:7001/eureka 3、自定义过滤器自定义全局GlobalFilter 1、两个主要接口介绍implements GlobalFilter,Ordered 2、能干嘛 全局日志记录 统一网关鉴权 …… 3、代码package com.kk.springcloud.config.config; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Component; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; import java.util.Date; @Component public class MyLogGateWayFilter implements GlobalFilter, Ordered { @Override // 过滤逻辑 public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { System.out.println(\"time:\"+new Date ()+\"\\t 执行了自定义的全局过滤器: \"+\"MyLogGateWayFilter\"+\"hello\"); String uname = exchange.getRequest().getQueryParams().getFirst(\"uname\"); if (uname == null) { System.out.println(\"****用户名为null，无法登录\"); exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } // 优先级，越少越大 @Override public int getOrder() { return 0; } } 测试：curl http://localhost:9527/payment/get/1?uname=11","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"路由网关","slug":"路由网关","permalink":"https://mykkto.github.io/tags/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"},{"name":"alibaba","slug":"alibaba","permalink":"https://mykkto.github.io/tags/alibaba/"},{"name":"gateway","slug":"gateway","permalink":"https://mykkto.github.io/tags/gateway/"}],"author":"mykk"},{"title":"mysql开启远程连接","slug":"04jichu/03mysql/01_Mysql_smallPosture","date":"2022-01-27T14:27:39.000Z","updated":"2022-01-31T02:19:51.693Z","comments":true,"path":"posts/bf62bc57.html","link":"","permalink":"https://mykkto.github.io/posts/bf62bc57.html","excerpt":"","text":"1、前言最近快过年了，过去肯定是要敲代码，写博文的，近期在写SpringCloud全家桶，数据库一直是在本地，想着还有几台云机在云上运行着，于是连接了下，出现了如下问题： 之前还是好的，可能挺久没用的权限自己关闭了，安装是docker 可以参考之前博主的简书文章 ： https://www.jianshu.com/p/f554c85b25c1 版本顺便说下5.7.35 MySQL Community Server (GPL) 2、开启远程连接#开启远程连接 GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'a1b2c3' WITH GRANT OPTION; #root 用户名 #a1b2c3 密码 #刷新权限，立即生效 flush privileges; 3、修改密码#修改密码(5.7.35) set password = password ('a1b2c3'); #修改密码（高版本 8.0+） update mysql.user set authentication_string=password('a1b2c3') where user='a1b2c3'; #刷新权限，立即生效 flush privileges;","categories":[{"name":"mysql","slug":"mysql","permalink":"https://mykkto.github.io/categories/mysql/"}],"tags":[{"name":"小姿势","slug":"小姿势","permalink":"https://mykkto.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"linux","slug":"linux","permalink":"https://mykkto.github.io/tags/linux/"}],"author":"mykk"},{"title":"SpringCloud-Zuul路由网关","slug":"03javafenbushi/01springcloud/08_SpringCloud_Zuul","date":"2022-01-25T13:38:21.000Z","updated":"2022-02-02T03:29:00.626Z","comments":true,"path":"posts/d633875f.html","link":"","permalink":"https://mykkto.github.io/posts/d633875f.html","excerpt":"","text":"1、概述1、官网https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.1.RELEASE/reference/html/#router-and-filter-zuul 2、是什么Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。 Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。 API网关为微服务架构中的服务提供了统一的访问入口，客户端通过API网关访问相关服务。API网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。 Zuul包含了如下最主要的功能：代理+路由+过滤三大功能 3、能干嘛1、路由2、过滤3、负载均衡4、灰度发布（金丝雀发布）起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。 在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。新版本没什么问题，那么逐步扩大范围、流量，把所有用户都迁移到新版本上面来。 2、路由基本配置路由功能负责将外部请求转发到具体的服务实例上去，是实现统一访问入口的基础 1、建Modelcloud-zuul-gateway9527 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-zuul-gateway9527&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 9527 spring: application: name: cloud-zuul-gateway eureka: client: service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka defaultZone: http://eureka7001.com:7001/eureka instance: instance-id: gateway-9527.com prefer-ip-address: true 4、hosts修改(本地环境)因为是本地环境，服务器，域名等资源有限 添加配置项：C:\\Windows\\System32\\drivers\\etc 127.0.0.1 myzuul.com 5、主启动注意：@EnableZuulProxy package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.zuul.EnableZuulProxy; @SpringBootApplication @EnableZuulProxy public class ZuulMain9527 { public static void main(String[] args) { SpringApplication.run (ZuulMain9527.class,args); } } 6、启动顺序1、eureka集群 2、8006生产者 3、9527网关 7、测试1、不用路由http://localhost:8001/payment/consul controller @GetMapping(\"/payment/consul\") public String paymentInfo() { return \"springcloud with consul: \" + serverPort + \"\\t\\t\" + UUID.randomUUID ( ).toString ( ); } 2、路由（1）zuul映射配置+注册中心注册后对外暴露的服务名称+rest调用地址 （2）url： http://myzuul.com:9527/cloud-payment-service/payment/consul ![](C:\\Users\\my_kk\\Documents\\Tencent Files\\763856958\\FileRecv_posts\\03javafenbushi\\01springcloud\\20220201141019.png) 3、路由访问映射规则1、名称代理1、yml详解zuul: routes: # 路由映射配置 mypayment.path: /mypayment/** #IE地址栏输入的路径 mypayment.serviceId: cloud-payment-service # 指定服务端的名称 server: port: 9527 spring: application: name: cloud-zuul-gateway eureka: client: service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka defaultZone: http://eureka7001.com:7001/eureka instance: instance-id: gateway-9527.com prefer-ip-address: true zuul: routes: # 路由映射配置 mypayment.path: /mypayment/** #IE地址栏输入的路径 mypayment.serviceId: cloud-payment-service # 指定服务端的名称 2、测试1、路由访问：OKhttp://myzuul.com:9527/mypayment/payment/consul 2、原路径访问：OKhttp://myzuul.com:9527/cloud-payment-service/payment/consul 2、忽略原有真实服务名1、yml配置zuul: ignored-services: cloud-payment-service #忽略服务名 2、测试1、使用服务名访问（失败）：http://myzuul.com:9527/cloud-payment-service/payment/consul ![](C:\\Users\\my_kk\\Documents\\Tencent Files\\763856958\\FileRecv_posts\\03javafenbushi\\01springcloud\\20220201165024.png) 2、映射访问：依旧可以！ 五角星：批量忽略zuul: ignored-services: \"*\" 3、路由转发和负载均衡功能1、生产者：SMS短信模块(8008)1、建modelcloud-provider-sms8008 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-sms8008&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 8008 ###服务名称(服务注册到eureka名称) spring: application: name: cloud-provider-sms eureka: client: #服务提供者provider注册进eureka服务列表内 service-url: register-with-eureka: true fetch-registry: true defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka #defaultZone: http://127.0.0.1:7001/eureka,http://127.0.0.1:7002/eureka #defaultZone: http://eureka7001.com:7001/eureka # eureka集群加@老本版 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient public class SMSMain8008 { public static void main(String[] args) { SpringApplication.run (SMSMain8008.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class SMSController { @Value(\"${server.port}\") private String serverPort; @GetMapping(\"/sms\") public String sms() { return \"sms provider service: \"+\"\\t\"+serverPort; } } 6、启动服务 2、网关：zuul（9527）1、ymlzuul: # ignored-services: cloud-payment-service #忽略服务名 routes: # 路由映射配置 mysms.path: /mysms/** # IE地址栏输入的路径 mysms.serviceId: cloud-provider-sms # 指定服务端的名称 server: port: 9527 spring: application: name: cloud-zuul-gateway eureka: client: service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka defaultZone: http://eureka7001.com:7001/eureka instance: instance-id: gateway-9527.com prefer-ip-address: true zuul: # ignored-services: cloud-payment-service #忽略服务名 routes: # 路由映射配置 mysms.path: /mysms/** # IE地址栏输入的路径 mysms.serviceId: cloud-provider-sms # 指定服务端的名称 mypayment.path: /mypayment/** # IE地址栏输入的路径 mypayment.serviceId: cloud-payment-service # 指定服务端的名称 2、说明由于Zuul自动集成了Ribbon和Hystrix，所以Zuul天生就有负载均衡和服务容错能力 3、测试负载效果url： 4、设置统一公共前缀yml配置zuul: prefix: /mykk server: port: 9527 spring: application: name: cloud-zuul-gateway eureka: client: service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka defaultZone: http://eureka7001.com:7001/eureka instance: instance-id: gateway-9527.com prefer-ip-address: true zuul: prefix: /mykk # ignored-services: cloud-payment-service #忽略服务名 routes: # 路由映射配置 mysms.path: /mysms/** # IE地址栏输入的路径 mysms.serviceId: cloud-provider-sms # 指定服务端的名称 mypayment.path: /mypayment/** # IE地址栏输入的路径 mypayment.serviceId: cloud-payment-service # 指定服务端的名称 测试url（1）http://myzuul.com:9527/mykk/mypayment/payment/consul （2）http://myzuul.com:9527/mykk/mysms/sms 4、查看路由信息1、POM&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; 2、yml# 开启查看路由的端点 management: endpoints: web: exposure: include: 'routes' 3、查看路由详细信息url：http://localhost:9527/actuator/routes 5、过滤器1、功能过滤功能负责对请求过程进行额外的处理，是请求校验过滤及服务聚合的基础。 2、过滤器的生命周期 3、ZuulFilter1、过滤类型 pre：在请求被路由到目标服务前执行，比如权限校验、打印日志等功能； routing：在请求被路由到目标服务时执行 post：在请求被路由到目标服务后执行，比如给目标服务的响应添加头信息，收集统计数据等功能； error：请求在其他阶段发生错误时执行。 2、过滤顺序数字小的先执行 3、过滤是否开启shouldFilter方法为true走 4、执行逻辑自己的业务逻辑 4、案例Case1、说明前置过滤器，用于在请求路由到目标服务前打印请求日志 2、自定义过滤器过滤器代码： package com.kk.springcloud.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import com.netflix.zuul.exception.ZuulException; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; import javax.servlet.http.HttpServletRequest; import java.util.Date; @Component @Slf4j public class PreLogFilter extends ZuulFilter { /** * 定义过滤器的类型 * pre:在请求被路由之前执行 * route:在路由请求的时候执行 * post:请求路由以后执行 * error:处理请求时发生错误的时候执行 * * @return 过滤器的类型 */ @Override public String filterType() { return \"pre\"; } /** * 过滤器执行的顺序，配置多个有顺序的过滤 * 执行顺序从小到大 * * @return 执行顺序 */ @Override public int filterOrder() { // 优先级为0，数字越大，优先级越低 return 1; } /** * 是否开启过滤器 * true:开启 * false:禁用 * * @return 是否开启过滤器 */ @Override public boolean shouldFilter() { // 是否开启 return true; } /** * 过滤器的业务实现 * * @return null 没有意义 * @throws ZuulException 异常信息 */ @Override public Object run() throws ZuulException { // 业务逻辑代码 RequestContext requestContext = RequestContext.getCurrentContext ( ); HttpServletRequest request = requestContext.getRequest ( ); String host = request.getRemoteHost ( ); String method = request.getMethod ( ); String uri = request.getRequestURI ( ); log.info(\"=====&gt; Remote host:{},method:{},uri:{}\", host, method, uri); System.out.println (\"********\" + new Date ( ).getTime ( )); return null; } } 3、测试(1)url：http://myzuul.com:9527/mykk/mysms/sms (2)在调用8008之前会打印日志 4、yml 配置开关★这里需要特别注意：开启这里之后，per配置失效，不清楚为什么，博主搞了很久尝试才发现是这个问题，建议使用硬编码，在java上配置开关zuul: prefix: /mykk # ignored-services: cloud-payment-service #忽略服务名 routes: # 路由映射配置 mysms.path: /mysms/** # IE地址栏输入的路径 mysms.serviceId: cloud-provider-sms # 指定服务端的名称 mypayment.path: /mypayment/** # IE地址栏输入的路径 mypayment.serviceId: cloud-payment-service # 指定服务端的名称 #yml配置开关 # PreLogFilter: # pre: # disable: true 参考文章链接1、限制IP过滤博文https://www.jianshu.com/p/20d77ca5cfbc","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"路由网关","slug":"路由网关","permalink":"https://mykkto.github.io/tags/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"},{"name":"zuul","slug":"zuul","permalink":"https://mykkto.github.io/tags/zuul/"}],"author":"mykk"},{"title":"SpringCloud-Hystrix断路器","slug":"03javafenbushi/01springcloud/07_SpringCloud_Hystrix","date":"2022-01-23T13:19:18.000Z","updated":"2022-02-09T14:32:16.645Z","comments":true,"path":"posts/b0ab6264.html","link":"","permalink":"https://mykkto.github.io/posts/b0ab6264.html","excerpt":"","text":"1、概述1、分布式系统面临的问题复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。 服务雪崩 多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”. 对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。 所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。 2、是什么 Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。 “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。 3、能干嘛 服务降级 服务熔断 接近实时的监控 ……….. 4、官网文档https://github.com/Netflix/Hystrix/wiki/How-To-Use 5、Hystrix停更https://github.com/Netflix/Hystrix 被动修复bugs 不再接受合并请求 不再发布新版本 2、Hystrix重要概念1、服务降级1、操作服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback 2、哪些情况会出发降级 程序运行异常 超时 服务熔断触发服务降级 线程池/信号量打满也会导致服务降级 2、服务熔断类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示 就是保险丝：服务的降级-&gt;进而熔断-&gt;恢复调用链路 3、服务限流秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行 3、hystrix案例1、构建1、建model新建cloud-provider-hystrix-payment8001 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-hystrix-payment8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--hystrix--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 8001 spring: application: name: cloud-provider-hystrix-payment eureka: client: register-with-eureka: true fetch-registry: true service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka defaultZone: http://eureka7001.com:7001/eureka 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient //本服务启动后会自动注册进eureka服务中 public class PaymentHystrixMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentHystrixMain8001.class,args); } } 5、业务类1、servicepackage com.kk.springcloud.service.imp; import com.kk.springcloud.service.PaymentHystrixServoce; import org.springframework.stereotype.Service; import java.util.concurrent.TimeUnit; @Service public class PaymentHystrixServoceImpl implements PaymentHystrixServoce { /** * 正常访问，一切OK * * @param id * @return */ public String paymentInfo_OK(Integer id) { return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_OK,id: \" + id + \"\\t\" + \"O(∩_∩)O\"; } /** * 超时访问，演示降级 * * @param id * @return */ public String paymentInfo_TimeOut(Integer id) { try { TimeUnit.SECONDS.sleep (3); } catch (InterruptedException e) { e.printStackTrace ( ); } return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_TimeOut,id: \" + id + \"\\t\" + \"O(∩_∩)O，耗费3秒\"; } } 2、controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.service.imp.PaymentHystrixServoceImpl; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; @RestController @Slf4j public class PaymentHystrixController { @Autowired private PaymentHystrixServoceImpl paymentService; @Value(\"${server.port}\") private String serverPort; @GetMapping(\"/payment/hystrix/ok/{id}\") public String paymentInfo_OK(@PathVariable(\"id\") Integer id) { String result = paymentService.paymentInfo_OK(id); log.info(\"****result: \"+result); return result; } @GetMapping(\"/payment/hystrix/timeout/{id}\") public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) throws InterruptedException { String result = paymentService.paymentInfo_TimeOut(id); log.info(\"****result: \"+result); return result; } } 6、测试1、启动顺序先启动eureka，再启动hystrix 8001 2、访问 success的方法： http://localhost:8001/payment/hystrix/ok/1 每次调用耗费3 秒钟 http://localhost:8001/payment/hystrix/timeout/1 2、高并发测试上述在非高并发情形下，还能勉强满足 1、Jmeter压测测试1、开启Jmeter，来20000个并发压死8001，20000个请求都去访问paymentInfo_TimeOut服务 2、再来一个访问从3秒到不止3秒 http://localhost:8001/payment/hystrix/timeout/1 从秒回到延迟一秒多 http://localhost:8001/payment/hystrix/ok/1 3、看演示结果两个都在自己转圈圈 为什么会被卡死：tomcat的默认的工作线程数被打满 了，没有多余的线程来分解压力和处理。 2、Jmeter压测结论上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问，那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死 3、看热闹不嫌弃事大，80新建加入cloud-consumer-feign-hystrix-order80 1、POM&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-feign-hystrix-order80&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--openfeign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--hystrix--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般基础通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、YMLserver: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ 3、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication @EnableFeignClients public class OrderHystrixMain80 { public static void main(String[] args) { SpringApplication.run (OrderHystrixMain80.class,args); } } 4、业务类 service package com.kk.springcloud.service; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; @Component @FeignClient(value = \"CLOUD-PROVIDER-HYSTRIX-PAYMENT\") public interface PaymentHystrixService { @GetMapping(\"/payment/hystrix/ok/{id}\") String paymentInfo_OK(@PathVariable(\"id\") Integer id); @GetMapping(\"/payment/hystrix/timeout/{id}\") String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id); } controller package com.kk.springcloud.controller; import com.kk.springcloud.service.PaymentHystrixService; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController @Slf4j public class OrderHystirxController { @Resource private PaymentHystrixService paymentHystrixService; @GetMapping(\"/consumer/payment/hystrix/ok/{id}\") public String paymentInfo_OK(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_OK (id); return result; } @GetMapping(\"/consumer/payment/hystrix/timeout/{id}\") public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_TimeOut (id); return result; } } 5、测试 需要启动的服务 url http://localhost/consumer/payment/hystrix/ok/1 6、高并发测试 2W个线程压8001 消费端80微服务再去访问正常的Ok微服务8001地址，http://localhost/consumer/payment/hystrix/ok/1 消费者80，o(╥﹏╥)o 要么转圈圈等待（2W个并发） 要么消费端报超时错误（20W个并发，冲垮） 3、故障现象和导致原因 8001同一层次的其它接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕 80此时调用8001，客户端访问响应缓慢，转圈圈 4、上诉结论正因为有上述故障或不佳表现，才有我们的降级/容错/限流等技术诞生 5、如何解决？解决的要求1、超时导致服务器变慢(转圈)超时不再等待 2、出错(宕机或程序运行出错)出错要有兜底（降级） 3、解决 对方服务(8001)超时了，调用者(80)不能一直卡死等待，必须有服务降级 对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级 对方服务(8001)OK，调用者(80)自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级 3-1实战：服务降级1、降级配置注解@HystrixCommand 2、8001先从自身找问题设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级fallback。 3、8001fallback1、业务类启用1、代码8001（8002）PaymentServiceImpl @HystrixCommand(fallbackMethod = \"paymentInfo_TimeOutHandler\", commandProperties = { @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"3000\") }) ----------------------- public String paymentInfo_TimeOutHandler(Integer id) { return \"/(ㄒoㄒ)/调用支付接口超时或异常：\\t\" + \"\\t当前线程池名字\" + Thread.currentThread ( ).getName ( ); } package com.kk.springcloud.service.imp; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty; import org.springframework.stereotype.Service; import java.util.concurrent.TimeUnit; @Service public class PaymentHystrixServoceImpl { /** * 正常访问，一切OK * * @param id * @return */ public String paymentInfo_OK(Integer id) { return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_OK,id: \" + id + \"\\t\" + \"O(∩_∩)O\"; } /** * 超时访问，演示降级 * * @param id * @return */ @HystrixCommand(fallbackMethod = \"paymentInfo_TimeOutHandler\", commandProperties = { @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"3000\") }) public String paymentInfo_TimeOut(Integer id) { int age = 10/0; try { TimeUnit.SECONDS.sleep (3); } catch (InterruptedException e) { e.printStackTrace ( ); } return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_TimeOut,id: \" + id + \"\\t\" + \"O(∩_∩)O，耗费3秒\"; } public String paymentInfo_TimeOutHandler(Integer id) { return \"/(ㄒoㄒ)/调用支付接口超时或异常：\\t\" + \"\\t当前线程池名字\" + Thread.currentThread ( ).getName ( ); } } 2、@HystrixCommand报异常后如何处理一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的 fallbackMethod调用类中的指定方法 2、主启动类激活添加新注解@EnableCircuitBreaker 3、制造问题：测试降级效果 上图故意制造两个异常： 1 int age = 10/0; 计算异常 2 我们能接受3秒钟，它运行5秒钟，超时异常。 当前服务不可用了，做服务降级，兜底的方案都是 paymentInfo_TimeOutHandler 无论是延迟指定时间还是异常，都会到对应方法降级 4、80fallback1、说明80订单微服务，也可以更好的保护自己，自己也依样画葫芦进行客户端降级保护 2、注意点我们自己配置过的热部署方式对java代码的改动明显，但对@HystrixCommand内属性的修改建议重启微服务 3、ymlfeign: hystrix: enabled: true server: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ feign: hystrix: enabled: true 4、主启动@EnableHystrix package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication @EnableFeignClients @EnableHystrix public class OrderHystrixMain80 { public static void main(String[] args) { SpringApplication.run (OrderHystrixMain80.class,args); } } 5、业务类 @HystrixCommand(fallbackMethod = \"paymentTimeOutFallbackMethod\", commandProperties = { @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"1500\") }) ------------------ public String paymentTimeOutFallbackMethod(@PathVariable(\"id\") Integer id) { return \"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o\"; } package com.kk.springcloud.controller; import com.kk.springcloud.service.PaymentHystrixService; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController @Slf4j public class OrderHystirxController { @Resource private PaymentHystrixService paymentHystrixService; @GetMapping(\"/consumer/payment/hystrix/ok/{id}\") @HystrixCommand(fallbackMethod = \"paymentTimeOutFallbackMethod\", commandProperties = { @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"1500\") }) public String paymentInfo_OK(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_OK (id); return result; } public String paymentTimeOutFallbackMethod(@PathVariable(\"id\") Integer id) { return \"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o\"; } @GetMapping(\"/consumer/payment/hystrix/timeout/{id}\") public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_TimeOut (id); return result; } } 6、测试url：http://localhost//consumer/payment/hystrix/ok/1 5、目前问题 每个业务方法对应一个兜底的方法，代码膨胀 统一和自定义的分开 6、问题解决1、每个方法配置一个？？？膨胀（feign接口系列）@DefaultProperties(defaultFallback = \"\") 每个方法配置一个服务降级方法，技术上可以，实际上傻X 除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaultFallback = “”) 统一跳转到统一处理结果页面 通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量，O(∩_∩)O哈哈~ ----------------- @DefaultProperties(defaultFallback = \"payment_Global_FallbackMethod\") ----------------- @HystrixCommand //加了@DefaultProperties属性注解，并且没有写具体方法名字，就用统一全局的 ----------------- public String payment_Global_FallbackMethod() { return \"Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~\"; } package com.kk.springcloud.controller; import com.kk.springcloud.service.PaymentHystrixService; import com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController @Slf4j @DefaultProperties(defaultFallback = \"payment_Global_FallbackMethod\") public class OrderHystirxController { @Resource private PaymentHystrixService paymentHystrixService; @GetMapping(\"/consumer/payment/hystrix/ok/{id}\") @HystrixCommand(fallbackMethod = \"paymentTimeOutFallbackMethod\", commandProperties = { @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"1500\") }) public String paymentInfo_OK(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_OK (id); return result; } public String paymentTimeOutFallbackMethod(@PathVariable(\"id\") Integer id) { return \"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o\"; } @GetMapping(\"/consumer/payment/hystrix/timeout/{id}\") @HystrixCommand //加了@DefaultProperties属性注解，并且没有写具体方法名字，就用统一全局的 public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) { String result = paymentHystrixService.paymentInfo_TimeOut (id); return result; } public String payment_Global_FallbackMethod() { return \"Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~\"; } } 2、和业务逻辑混一起？？？混乱原因：服务降级，客户端去调用服务端，碰上服务端宕机或关闭 本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦 未来我们要面对的异常 运行 超时 宕机 根据cloud-consumer-feign-hystrix-order80已经有的PaymentHystrixService接口，重新新建一个类(PaymentFallbackService)实现该接口，统一为接口里面的方法进行异常处理 service统一处理异常业务 package com.kk.springcloud.service.impl; import com.kk.springcloud.service.PaymentHystrixService; import org.springframework.stereotype.Component; @Component public class PaymentFallbackService implements PaymentHystrixService { // 如果下游的服务接口挂掉，则进入这个实现类 @Override public String paymentInfo_OK(Integer id) { return \"服务调用失败，提示来自：cloud-consumer-feign-order80\"; } @Override public String paymentInfo_TimeOut(Integer id) { return \"服务调用失败，提示来自：cloud-consumer-feign-order80\"; } } yml # 用于服务降级 在注解@FeignClient中添加fallbackFactory属性值 feign: hystrix: enabled: true #在Feign中开启Hystrix openFeign：调用下游的接口 fallback = PaymentFallbackService.class package com.kk.springcloud.service; import com.kk.springcloud.service.impl.PaymentFallbackService; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; @Component @FeignClient(value = \"CLOUD-PROVIDER-HYSTRIX-PAYMENT\",fallback = PaymentFallbackService.class) public interface PaymentHystrixService { @GetMapping(\"/payment/hystrix/ok/{id}\") String paymentInfo_OK(@PathVariable(\"id\") Integer id); @GetMapping(\"/payment/hystrix/timeout/{id}\") String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id); } 测试：http://localhost/consumer/payment/hystrix/ok/1 正常访问： 故意关闭微服务8001后访问： 3-2实战：服务熔断1、断路器一句话就是家里的保险丝 2、熔断是什么熔断机制概述：熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。 在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand。 3、实操修改cloud-provider-hystrix-payment8001 1、PaymentService//服务熔断 @HystrixCommand(fallbackMethod = \"paymentCircuitBreaker_fallback\", commandProperties = { @HystrixProperty(name = \"circuitBreaker.enabled\", value = \"true\"),//是否开启断路器 @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),//请求次数 @HystrixProperty(name = \"circuitBreaker.sleepWindowInMilliseconds\", value = \"10000\"),//时间范围 @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"60\"),//失败率达到多少后跳闸 }) public String paymentCircuitBreaker(@PathVariable(\"id\") Integer id) { if (id &lt; 0) { throw new RuntimeException (\"******id 不能负数\"); } String serialNumber = IdUtil.simpleUUID ( ); return Thread.currentThread ( ).getName ( ) + \"\\t\" + \"调用成功，流水号: \" + serialNumber; } public String paymentCircuitBreaker_fallback(@PathVariable(\"id\") Integer id) { return \"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~ id: \" + id; } 2、PaymentController@GetMapping(\"/payment/circuit/{id}\") public String paymentCircuitBreaker(@PathVariable(\"id\") Integer id) { String result = paymentService.paymentCircuitBreaker (id); log.info (\"****result: \" + result); return result; } 4、测试正确：http://localhost:8001/payment/circuit/1 错误：http://localhost:8001/payment/circuit/-1 5、原理(小总结)1、熔断类型 熔断打开 请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态 熔断关闭 熔断关闭不会对服务进行熔断 熔断半开 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断 2、官网断路器流程图1、断路器在什么情况下开始起作用涉及到断路器的三个重要参数：快照时间窗、请求总数阀值、错误百分比阀值。1：快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。 2：请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。 3：错误百分比阀值：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开 2、断路器开启或者关闭的条件 当满足一定的阀值的时候（默认10秒内超过20个请求次数） 当失败率达到一定的时候（默认10秒内超过50%的请求失败） 到达以上阀值，断路器将会开启 当开启的时候，所有请求都不会进行转发 一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5 3、断路器打开之后1：再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。 2：原来的主逻辑要如何恢复呢？对于这一问题，hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。 4、★ All配置//========================All @HystrixCommand(fallbackMethod = \"str_fallbackMethod\", groupKey = \"strGroupCommand\", commandKey = \"strCommand\", threadPoolKey = \"strThreadPool\", commandProperties = { // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离 @HystrixProperty(name = \"execution.isolation.strategy\", value = \"THREAD\"), // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数） @HystrixProperty(name = \"execution.isolation.semaphore.maxConcurrentRequests\", value = \"10\"), // 配置命令执行的超时时间 @HystrixProperty(name = \"execution.isolation.thread.timeoutinMilliseconds\", value = \"10\"), // 是否启用超时时间 @HystrixProperty(name = \"execution.timeout.enabled\", value = \"true\"), // 执行超时的时候是否中断 @HystrixProperty(name = \"execution.isolation.thread.interruptOnTimeout\", value = \"true\"), // 执行被取消的时候是否中断 @HystrixProperty(name = \"execution.isolation.thread.interruptOnCancel\", value = \"true\"), // 允许回调方法执行的最大并发数 @HystrixProperty(name = \"fallback.isolation.semaphore.maxConcurrentRequests\", value = \"10\"), // 服务降级是否启用，是否执行回调函数 @HystrixProperty(name = \"fallback.enabled\", value = \"true\"), // 是否启用断路器 @HystrixProperty(name = \"circuitBreaker.enabled\", value = \"true\"), // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候， // 如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。 @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"20\"), // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过 // circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50, // 就把断路器设置为 \"打开\" 状态，否则就设置为 \"关闭\" 状态。 @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"50\"), // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后， // 会将断路器置为 \"半开\" 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 \"打开\" 状态， // 如果成功就设置为 \"关闭\" 状态。 @HystrixProperty(name = \"circuitBreaker.sleepWindowinMilliseconds\", value = \"5000\"), // 断路器强制打开 @HystrixProperty(name = \"circuitBreaker.forceOpen\", value = \"false\"), // 断路器强制关闭 @HystrixProperty(name = \"circuitBreaker.forceClosed\", value = \"false\"), // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间 @HystrixProperty(name = \"metrics.rollingStats.timeinMilliseconds\", value = \"10000\"), // 该属性用来设置滚动时间窗统计指标信息时划分\"桶\"的数量，断路器在收集指标信息的时候会根据 // 设置的时间窗长度拆分成多个 \"桶\" 来累计各度量值，每个\"桶\"记录了一段时间内的采集指标。 // 比如 10 秒内拆分成 10 个\"桶\"收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常 @HystrixProperty(name = \"metrics.rollingStats.numBuckets\", value = \"10\"), // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。 @HystrixProperty(name = \"metrics.rollingPercentile.enabled\", value = \"false\"), // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。 @HystrixProperty(name = \"metrics.rollingPercentile.timeInMilliseconds\", value = \"60000\"), // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。 @HystrixProperty(name = \"metrics.rollingPercentile.numBuckets\", value = \"60000\"), // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数， // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行， // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。 @HystrixProperty(name = \"metrics.rollingPercentile.bucketSize\", value = \"100\"), // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。 @HystrixProperty(name = \"metrics.healthSnapshot.intervalinMilliseconds\", value = \"500\"), // 是否开启请求缓存 @HystrixProperty(name = \"requestCache.enabled\", value = \"true\"), // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中 @HystrixProperty(name = \"requestLog.enabled\", value = \"true\"), }, threadPoolProperties = { // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量 @HystrixProperty(name = \"coreSize\", value = \"10\"), // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列， // 否则将使用 LinkedBlockingQueue 实现的队列。 @HystrixProperty(name = \"maxQueueSize\", value = \"-1\"), // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。 // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue // 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。 @HystrixProperty(name = \"queueSizeRejectionThreshold\", value = \"5\"), } ) public String strConsumer() { return \"hello 2020\"; } public String str_fallbackMethod() { return \"*****fall back str_fallbackMethod\"; } 3-3实战：服务限流采用alibaba的Sentinel，后面扩展 4、hystrix工作流程 1 创建 HystrixCommand（用在依赖的服务返回单个操作结果的时候） 或 HystrixObserableCommand（用在依赖的服务返回多个操作结果的时候） 对象。2 命令执行。其中 HystrixComand 实现了下面前两种执行方式；而 HystrixObservableCommand 实现了后两种执行方式：execute()：同步执行，从依赖的服务返回一个单一的结果对象， 或是在发生错误的时候抛出异常。queue()：异步执行， 直接返回 一个Future对象， 其中包含了服务执行结束时要返回的单一结果对象。observe()：返回 Observable 对象，它代表了操作的多个结果，它是一个 Hot Obserable（不论 “事件源” 是否有 “订阅者”，都会在创建后对事件进行发布，所以对于 Hot Observable 的每一个 “订阅者” 都有可能是从 “事件源” 的中途开始的，并可能只是看到了整个操作的局部过程）。toObservable()： 同样会返回 Observable 对象，也代表了操作的多个结果，但它返回的是一个Cold Observable（没有 “订阅者” 的时候并不会发布事件，而是进行等待，直到有 “订阅者” 之后才发布事件，所以对于 Cold Observable 的订阅者，它可以保证从一开始看到整个操作的全部过程）。3 若当前命令的请求缓存功能是被启用的， 并且该命令缓存命中， 那么缓存的结果会立即以 Observable 对象的形式 返回。4 检查断路器是否为打开状态。如果断路器是打开的，那么Hystrix不会执行命令，而是转接到 fallback 处理逻辑（第 8 步）；如果断路器是关闭的，检查是否有可用资源来执行命令（第 5 步）。5 线程池/请求队列/信号量是否占满。如果命令依赖服务的专有线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满， 那么 Hystrix 也不会执行命令， 而是转接到 fallback 处理逻辑（第8步）。6 Hystrix 会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。HystrixCommand.run() ：返回一个单一的结果，或者抛出异常。HystrixObservableCommand.construct()： 返回一个Observable 对象来发射多个结果，或通过 onError 发送错误通知。7 Hystrix会将 “成功”、”失败”、”拒绝”、”超时” 等信息报告给断路器， 而断路器会维护一组计数器来统计这些数据。断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行 “熔断/短路”。8 当命令执行失败的时候， Hystrix 会进入 fallback 尝试回退处理， 我们通常也称该操作为 “服务降级”。而能够引起服务降级处理的情况有下面几种：第4步： 当前命令处于”熔断/短路”状态，断路器是打开的时候。第5步： 当前命令的线程池、 请求队列或 者信号量被占满的时候。第6步：HystrixObservableCommand.construct() 或 HystrixCommand.run() 抛出异常的时候。9 当Hystrix命令执行成功之后， 它会将处理结果直接返回或是以Observable 的形式返回。 tips：如果我们没有为命令实现降级逻辑或者在降级处理逻辑中抛出了异常， Hystrix 依然会返回一个 Observable 对象， 但是它不会发射任何结果数据， 而是通过 onError 方法通知命令立即中断请求，并通过onError()方法将引起命令失败的异常发送给调用者。 5、服务监控HystrixDashboard1、概述除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。 2、仪表盘90011、建model新建cloud-consumer-hystrix-dashboard9001 2、POM&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;/dependency&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-hystrix-dashboard9001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 9001 4、@EnableHystrixDashboardpackage com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard; @SpringBootApplication @EnableHystrixDashboard public class HystrixDashboardMain9001 { public static void main(String[] args) { SpringApplication.run (HystrixDashboardMain9001.class,args); } } 5、所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置 &lt;!-- actuator监控信息完善 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; 6、进入面板http://localhost:9001/hystrix 3、断路器演示(服务监控hystrixDashboard)1、修改cloud-provider-hystrix-payment80011、注意新版本注意:新版本Hystrix需要在主启动类MainAppHystrix8001中指定监控路径 报错信息：Unable to connect to Command Metric Stream. /** *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑 *ServletRegistrationBean因为springboot的默认路径不是\"/hystrix.stream\"， *只要在自己的项目里配置上下面的servlet就可以了 */ @Bean public ServletRegistrationBean getServlet() { HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet(); ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet); registrationBean.setLoadOnStartup(1); registrationBean.addUrlMappings(\"/hystrix.stream\"); registrationBean.setName(\"HystrixMetricsStreamServlet\"); return registrationBean; } package com.kk.springcloud; import com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.web.servlet.ServletRegistrationBean; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; import org.springframework.context.annotation.Bean; @SpringBootApplication @EnableEurekaClient //本服务启动后会自动注册进eureka服务中 @EnableCircuitBreaker public class PaymentHystrixMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentHystrixMain8001.class, args); } /** * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑 * ServletRegistrationBean因为springboot的默认路径不是\"/hystrix.stream\"， * 只要在自己的项目里配置上下面的servlet就可以了 */ @Bean public ServletRegistrationBean getServlet() { HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet ( ); ServletRegistrationBean registrationBean = new ServletRegistrationBean (streamServlet); registrationBean.setLoadOnStartup (1); registrationBean.addUrlMappings (\"/hystrix.stream\"); registrationBean.setName (\"HystrixMetricsStreamServlet\"); return registrationBean; } } 2、监控测试1、9001监控8001http://localhost:8001/hystrix.stream 1：Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，可以通过配置该属性来降低客户端的网络和CPU消耗。 2：Title：该参数对应了头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，可以通过配置该信息来展示更合适的标题。 2、访问正确：http://localhost:8001/payment/circuit/1 错误：http://localhost:8001/payment/circuit/-1 3、★ 如何看仪表盘 4、搞懂一个才能看懂复杂的","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"断路器","slug":"断路器","permalink":"https://mykkto.github.io/tags/%E6%96%AD%E8%B7%AF%E5%99%A8/"},{"name":"Hystrix","slug":"Hystrix","permalink":"https://mykkto.github.io/tags/Hystrix/"}],"author":"mykk"},{"title":"SpringCloud-OpenFeign远程调用服务","slug":"03javafenbushi/01springcloud/06_SpringCloud_OpenFeign","date":"2022-01-21T13:32:13.000Z","updated":"2022-01-25T15:12:13.313Z","comments":true,"path":"posts/a723ac51.html","link":"","permalink":"https://mykkto.github.io/posts/a723ac51.html","excerpt":"","text":"1、概述1、是什么https://github.com/spring-cloud/spring-cloud-openfeign Feign是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需创建一个接口并在接口上添加注解即可 2、能干嘛1、 Feign能干什么Feign旨在使编写Java Http客户端变得更容易。前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。 2、Feign集成了Ribbon利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用 3、区别1、feignFeign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; 2、openfeignOpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; 2、OpenFeign使用步骤1、建model新建cloud-consumer-feign-order80 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-feign-order80&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--openfeign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般基础通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication @EnableFeignClients public class OrderFeignMain80 { public static void main(String[] args) { SpringApplication.run (OrderFeignMain80.class,args); } } 5、业务类1、新建PaymentFeignService接口并新增注解@FeignClientpackage com.kk.springcloud.service; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; @Component @FeignClient(value = \"CLOUD-PAYMENT-SERVICE\") public interface PaymentFeignService { @GetMapping(value = \"/payment/get/{id}\") CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(\"id\") Long id); } 2、控制层Controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentFeignService; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController public class OrderFeignController { @Resource private PaymentFeignService paymentFeignService; @GetMapping(value = \"consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(\"id\") Long id){ return paymentFeignService.getPaymentById (id); } } 6、测试1、启动顺序 启动 7001/7002 eureka集群 启动 8001/8002 生产者集群 启动 OpenFeign:80 消费者 2、访问http://localhost/consumer/payment/get/1 3、Feign自带负载均衡配置项 7、小结 3、OpenFeign超时控制1、模拟超时超时设置，故意设置超时演示出错情况 1、服务提供方8001故意写暂停程序com.kk.springcloud.controller.PaymentController; @GetMapping(value = \"/payment/feign/timeout\") public String paymentFeignTimeOut() { System.out.println (\"*****paymentFeignTimeOut from port: \" + serverPort); //暂停几秒钟线程 try { TimeUnit.SECONDS.sleep (3); } catch (InterruptedException e) { e.printStackTrace ( ); } return serverPort; } 2、服务消费方80添加超时方法PaymentFeignServicecom.kk.springcloud.service.PaymentFeignService @GetMapping(value = \"/payment/feign/timeout\") String paymentFeignTimeOut(); 3、服务消费方80添加超时方法OrderFeignControllercom.kk.springcloud.controller.OrderFeignController @GetMapping(value = \"/consumer/payment/feign/timeout\") public String paymentFeignTimeOut() { return paymentFeignService.paymentFeignTimeOut ( ); } 4、测试url：http://localhost/consumer/payment/feign/timeout 5、小结OpenFeign默认等待1秒钟，超过后报错 2、是什么1、概述默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。 2、默认支持Ribbon 3、超时时间配置#设置feign客户端超时时间(OpenFeign默认支持ribbon) ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间 ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 5000 4、OpenFeign日志打印功能1、是什么Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。说白了就是对Feign接口的调用情况进行监控和输出 2、日志级别 NONE：默认的，不显示任何日志； BASIC：仅记录请求方法、URL、响应状态码及执行时间； HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息； FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。 3、配置日志 beanpackage com.kk.springcloud.config; import feign.Logger; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class OpenFeignConfig { @Configuration public class FeignConfig { @Bean Logger.Level feignLoggerLevel() { return Logger.Level.FULL; } } } 4、yml中配置logging: level: # feign日志以什么级别监控哪个接口 com.kk.springcloud.service.PaymentFeignService: debug server: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ #设置feign客户端超时时间(OpenFeign默认支持ribbon) ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间 ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 5000 logging: level: # feign日志以什么级别监控哪个接口 com.kk.springcloud.service.PaymentFeignService: debug 5、后台启动查看","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"远程调用服务","slug":"远程调用服务","permalink":"https://mykkto.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"name":"openfeign","slug":"openfeign","permalink":"https://mykkto.github.io/tags/openfeign/"}],"author":"mykk"},{"title":"SpringCloud- Ribbon负载均衡服务","slug":"03javafenbushi/01springcloud/05_SpringCloud_Ribbon","date":"2022-01-17T14:42:11.000Z","updated":"2022-01-19T15:44:00.931Z","comments":true,"path":"posts/9091e07b.html","link":"","permalink":"https://mykkto.github.io/posts/9091e07b.html","excerpt":"","text":"1、概述1、是什么 Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。 简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。 2、官网资料1、文档https://github.com/Netflix/ribbon/wiki/Getting-Started 2、Ribbon目前也进入维护模式 未来替换方案： 3、能干吗1、LB（负载均衡）简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。常见的负载均衡有软件Nginx，LVS，硬件 F5等。 总结：Ribbon = 负载均衡+RestTemplate调用 2、区别（ribbon VS nginx） Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。 3、划分1、集中式LB 即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方； 2、进程内LB 将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。 Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。 2、Ribbon案例1、架构说明 Ribbon在工作时分成两步 第一步先选择 EurekaServer ,它优先选择在同一个区域内负载较少的server. 第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。 总结：Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。 2、POM1、坐标&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; 2、eureka-client 自带 ribbon证明如下： 可以看到spring-cloud-starter-netflix-eureka-client 确实引入了Ribbon 3、二说RestTemplate的使用1、官网https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html 2、getForObject方法/getForEntity（读） 返回对象为响应体中数据转化成的对象，基本上可以理解为Json 返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等 3、postForObject/postForEntity(写)写一个单元测试用例，测试用例的内容是向指定的URL提交一个Post(帖子). @Test void testSimple() { // 请求地址 String url = \"http://jsonplaceholder.typicode.com/posts\"; // 要发送的数据对象 PostDTO postDTO = new PostDTO(); postDTO.setUserId(110); postDTO.setTitle(\"zimug 发布文章\"); postDTO.setBody(\"zimug 发布文章 测试内容\"); // 发送post请求，并输出结果 PostDTO result = restTemplate.postForObject(url, postDTO, PostDTO.class); System.out.println(result); } 上面的所有的postForObject请求传参方法，postForEntity都可以使用，使用方法上也几乎是一致的，只是在返回结果接收的时候略有差别。使用ResponseEntity&lt;T&gt; responseEntity来接收响应结果。用responseEntity.getBody()获取响应体。响应体内容同postForObject方法返回结果一致。剩下的这些响应信息就是postForEntity比postForObject多出来的内容 HttpStatus statusCode = responseEntity.getStatusCode(); 获取整体的响应状态信息 int statusCodeValue = responseEntity.getStatusCodeValue(); 获取响应码值 HttpHeaders headers = responseEntity.getHeaders(); 获取响应头等 @Test public void testEntityPoJo() { // 请求地址 String url = \"http://jsonplaceholder.typicode.com/posts\"; // 要发送的数据对象 PostDTO postDTO = new PostDTO(); postDTO.setUserId(110); postDTO.setTitle(\"zimug 发布文章\"); postDTO.setBody(\"zimug 发布文章 测试内容\"); // 发送post请求，并输出结果 ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, postDTO, String.class); String body = responseEntity.getBody(); // 获取响应体 System.out.println(\"HTTP 响应body：\" + postDTO.toString()); //以下是postForEntity比postForObject多出来的内容 HttpStatus statusCode = responseEntity.getStatusCode(); // 获取响应码 int statusCodeValue = responseEntity.getStatusCodeValue(); // 获取响应码值 HttpHeaders headers = responseEntity.getHeaders(); // 获取响应头 System.out.println(\"HTTP 响应状态：\" + statusCode); System.out.println(\"HTTP 响应状态码：\" + statusCodeValue); System.out.println(\"HTTP Headers信息：\" + headers); } 4、GET请求方法&lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(URI var1, Class&lt;T&gt; responseType); 5、POST请求方法 &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(URI url, @Nullable Object request, Class&lt;T&gt; responseType); 3、Ribbon核心组件IRule1、IRule：根据特定算法中从服务列表中选取一个要访问的服务 轮询: com.netflix.loadbalancer.RoundRobinRule 随机: com.netflix.loadbalancer.RandomRule com.netflix.loadbalancer.RetryRule 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务 WeightedResponseTimeRule 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择 BestAvailableRule 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务 AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例 ZoneAvoidanceRule 默认规则,复合判断server所在区域的性能和server的可用性选择服务器 2、案例修改cloud-consumer-order801、细节说明官方文档明确给出了警告：这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。 2、新建packagecom.kk.myrule 3、新建MySelfRule规则类package com.kk.myrule; import com.netflix.loadbalancer.IRule; import com.netflix.loadbalancer.RandomRule; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class MySelfRule { @Bean public IRule myRule() { return new RandomRule ( );//定义为随机 } } 4、主启动类添加@RibbonClient@RibbonClient(name = \"CLOUD-PAYMENT-SERVICE\",configuration=MySelfRule.class) 5、测试启动：（1）eureka（单个或者集群都行），（2）生产者8001（单个或者集群都行），（3）消费者80 http://localhost/consumer/payment/get/1 4、Ribbon负载均衡算法1、原理负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标 ，每次服务重启动后rest接口计数从1开始。 List instances = discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”); 如： List [0] instances = 127.0.0.1:8002 List [1] instances = 127.0.0.1:8001 8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理： 当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002如此类推…… 2、RoundRobinRule源码 这里不是死循环，而是自旋锁，compareAndSet（CAS操作，JUC中乐观锁的底层实现） 3、手写1、8001和8002分别加入 @Value(\"${server.port}\") private String serverPort; @GetMapping(value = \"/payment/lb\") public String getPaymentLB() { return serverPort; } 2、去掉注解@LoadBalanced 3、新建LoadBalancer接口package com.kk.springcloud.lb; import org.springframework.cloud.client.ServiceInstance; import java.util.List; public interface LoadBalancer { ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances); } 4、新建MyLBpackage com.kk.springcloud.lb; import org.springframework.cloud.client.ServiceInstance; import org.springframework.stereotype.Component; import java.util.List; import java.util.concurrent.atomic.AtomicInteger; @Component public class MyLB implements LoadBalancer { private AtomicInteger atomicInteger = new AtomicInteger (0); @Override public ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances) { int index = getAndIncrement ( ) % serviceInstances.size ( ); return serviceInstances.get (index); } public final int getAndIncrement() { int current; int next; do { current = this.atomicInteger.get ( ); next = current &gt;= 2147483647 ? 0 : current + 1; } while (!this.atomicInteger.compareAndSet (current, next)); System.out.println (\"*****next: \" + next); return next; } } 5、OrderController@Resource private LoadBalancer loadBalancer; @GetMapping(\"/consumer/payment/lb\") public String getPaymentLB() { List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); if (instances == null || instances.size ( ) &lt;= 0) { return null; } ServiceInstance serviceInstance = loadBalancer.instances (instances); URI uri = serviceInstance.getUri ( ); return restTemplate.getForObject (uri + \"/payment/lb\", String.class); } package com.kk.springcloud.controller; import com.kk.springcloud.lb.LoadBalancer; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; import java.net.URI; import java.util.List; @RestController @Slf4j public class OrderController { //public static final String PAYMENT_URL = \"http://localhost:8001\"; public static final String PAYMENT_URL = \"http://cloud-payment-service\"; //可以获取注册中心上的服务列表 @Resource private DiscoveryClient discoveryClient; @Resource private LoadBalancer loadBalancer; @GetMapping(\"/consumer/payment/lb\") public String getPaymentLB() { List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); if (instances == null || instances.size ( ) &lt;= 0) { return null; } ServiceInstance serviceInstance = loadBalancer.instances (instances); URI uri = serviceInstance.getUri ( ); return restTemplate.getForObject (uri + \"/payment/lb\", String.class); } @Resource private RestTemplate restTemplate; @GetMapping(\"/consumer/payment/create\") public CommonResult&lt;Payment&gt; create(Payment payment) { return restTemplate.postForObject (PAYMENT_URL + \"/payment/create\", payment, CommonResult.class); //写操作 } @GetMapping(\"/consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPayment(@PathVariable(\"id\") Long id) { return restTemplate.getForObject (PAYMENT_URL + \"/payment/get/\" + id, CommonResult.class); } } 6、测试http://localhost/consumer/payment/lb 注意：8001和8002别名配置都要配好否则自定义算法 获取的url会报错","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://mykkto.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"ribbon","slug":"ribbon","permalink":"https://mykkto.github.io/tags/ribbon/"}],"author":"mykk"},{"title":"hexo + github 在百度和谷歌 SEO站点收录","slug":"00blog/01_seo","date":"2022-01-16T14:41:15.000Z","updated":"2022-01-16T15:15:19.628Z","comments":true,"path":"posts/f1d997d.html","link":"","permalink":"https://mykkto.github.io/posts/f1d997d.html","excerpt":"","text":"1、百度 seo1、登陆百度站长管理https://ziyuan.baidu.com/linksubmit/url?sitename=http://site:abc.github.io 2、填写自己的blog地址 3、hexo设置校验C:\\Users\\Administrator\\Desktop\\myblog\\mykkTo.github.io\\themes\\matery\\layout\\_partial 4、成功 5、站点收录https://mykkto.github.io/baidu_urls.txt 2、谷歌 seo参考https://www.jianshu.com/p/9be9b4786f97","categories":[{"name":"博客","slug":"博客","permalink":"https://mykkto.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://mykkto.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://mykkto.github.io/tags/github/"},{"name":"seo","slug":"seo","permalink":"https://mykkto.github.io/tags/seo/"},{"name":"百度","slug":"百度","permalink":"https://mykkto.github.io/tags/%E7%99%BE%E5%BA%A6/"},{"name":"谷歌","slug":"谷歌","permalink":"https://mykkto.github.io/tags/%E8%B0%B7%E6%AD%8C/"}],"author":"mykk"},{"title":"SpringCloud-Consul","slug":"03javafenbushi/01springcloud/04_SpringCloud_Consul","date":"2022-01-16T13:42:11.000Z","updated":"2022-01-17T15:12:15.319Z","comments":true,"path":"posts/51c7125f.html","link":"","permalink":"https://mykkto.github.io/posts/51c7125f.html","excerpt":"","text":"1、Consul简介1、是什么 Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。 提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。 它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows 2、能干嘛1、服务发现提供HTTP和DNS两种发现方式。 2、健康监测支持多种方式，HTTP、TCP、Docker、Shell脚本定制化监控 3、KV存储Key、Value的存储方式 4、多数据中心Consul支持多数据中心 5、可视化Web界面3、官网文档1、下载地址https://www.consul.io/downloads.html 2、学习文档https://www.springcloud.cc/spring-cloud-consul.html 2、安装并运行Consul1、官网安装https://www.consul.io/downloads 2、安装说明下载完成后只有一个consul.exe文件，硬盘路径下双击运行，查看版本号信息 3、使用开发模式启动（1）命令：consul agent -dev （2）通过以下地址可以访问Consul的首页：http://localhost:8500 （3）效果： 3、服务提供者1、建modelcloud-providerconsul-payment8006 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-providerconsul-payment8006&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--SpringCloud consul-server --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--日常通用jar包配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、yml###consul服务端口号 server: port: 8006 spring: application: name: consul-provider-payment ####consul注册中心地址 cloud: consul: host: localhost port: 8500 discovery: #hostname: 127.0.0.1 service-name: ${spring.application.name} 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Payment8006 { public static void main(String[] args) { SpringApplication.run (Payment8006.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import java.util.UUID; @RestController public class PaymentController { @Value(\"${server.port}\") private String serverPort; @GetMapping(\"/payment/consul\") public String paymentInfo() { return \"springcloud with consul: \" + serverPort + \"\\t\\t\" + UUID.randomUUID ( ).toString ( ); } } 5、测试1、访问http://localhost:8006/payment/consul 2、控制台 4、服务消费者1、建modelcloud-consumerconsul-order82 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumerconsul-order82&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--SpringCloud consul-server --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--日常通用jar包配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、yml###consul服务端口号 server: port: 82 spring: application: name: cloud-consumer-order ####consul注册中心地址 cloud: consul: host: localhost port: 8500 discovery: #hostname: 127.0.0.1 service-name: ${spring.application.name} 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class OrderConsulMain82 { public static void main(String[] args) { SpringApplication.run (OrderConsulMain82.class,args); } } 5、业务类1、Bean配置类package com.kk.springcloud.config; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextBean { @Bean @LoadBalanced public RestTemplate getRestTemplate() { return new RestTemplate ( ); } } 2、Controllerpackage com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class OrderConsulController { public static final String INVOKE_URL = \"http://cloud-provider-payment\"; //consul-provider-payment @Autowired private RestTemplate restTemplate; @GetMapping(value = \"/consumer/payment/consul\") public String paymentInfo() { String result = restTemplate.getForObject (INVOKE_URL + \"/payment/consul\", String.class); System.out.println (\"消费者调用支付服务(consule)---&gt;result:\" + result); return result; } } 6、测试1、客户端 2、访问http://localhost/consumer/payment/consul 5、三个注册中心异同点1、CAPCAP理论关注粒度是数据，而不是整体系统设计的策略 C:Consistency（强一致性） A:Availability（可用性） P:Partition tolerance（分区容错性） 2、CAP图最多只能同时较好的满足两个。 CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。 3、AP-CP架构图1、AP(Eureka)AP架构 当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。结论：违背了一致性C的要求，只满足可用性和分区容错，即AP 2、CP(Zookeeper/Consul)CP架构 当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性结论：违背了可用性A的要求，只满足一致性和分区容错，即CP","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Consul","slug":"Consul","permalink":"https://mykkto.github.io/tags/Consul/"}],"author":"mykk"},{"title":"Springcloud-Zookeeper(快速入门)","slug":"03javafenbushi/01springcloud/03_SpringCloud-Zookeeper","date":"2022-01-15T15:01:12.000Z","updated":"2022-01-17T15:12:07.880Z","comments":true,"path":"posts/c0125b8a.html","link":"","permalink":"https://mykkto.github.io/posts/c0125b8a.html","excerpt":"","text":"安装参考【后面写】https://blog.csdn.net/zhou_fan_xi/article/details/103275955 安装完，windown访问测试 telnet 106.52.23.202 2181 1、注册中心Zookeeper基本概述 zookeeper是一个分布式协调工具，可以实现注册中心功能 关闭Linux服务器防火墙后才能启动zookeeper服务器 zookeeper服务器取代Eureka服务器，zk作为服务注册中心 2、服务提供者1、建model新建cloud-provider-payment8004 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合zookeeper客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;!--先排除自带的zookeeper3.5.3--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.9版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改yml#8004表示注册到zookeeper服务器的支付服务提供者端口号 server: port: 8004 #服务别名----注册zookeeper到注册中心名称 spring: application: name: cloud-provider-payment cloud: zookeeper: connect-string: 106.52.23.202:2181 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient//该注解用于向使用consul或者zookeeper作为注册中心时注册服务 public class PaymentMain8004 { public static void main(String[] args) { SpringApplication.run (PaymentMain8004.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.util.UUID; @RestController public class PaymentController { @Value(\"${server.port}\") private String serverPort; @RequestMapping(value = \"/payment/zk\") public String paymentzk() { return \"springcloud with zookeeper: \" + serverPort + \"\\t\" + UUID.randomUUID ( ).toString ( ); } } 6、启动8004注册进zookeeper1、liunx启动 zookeeper#查看执行路径 [root@VM-0-13-centos bin]# pwd /root/zookeeper-3.4.9/bin #启动 [root@VM-0-13-centos bin]# ./zkServer.sh start #停止 [root@VM-0-13-centos bin]# ./zkServer.sh stop #重启 [root@VM-0-13-centos bin]# ./zkServer.sh restart 7、测试1、访问服务http://localhost:8004/payment/zk 2、查看服务端被是否被注册#进入 zookeeper客户端 [root@VM-0-13-centos bin]# ./zkCli.sh WatchedEvent state:SyncConnected type:None path:null #查看序列 [zk: localhost:2181(CONNECTED) 0] ls /services/cloud-provider-payment [a6293666-45c1-490e-adb8-bee63f121983] #查看详细信息 [zk: localhost:2181(CONNECTED) 1] ls /services/cloud-provider-payment/a6293666-45c1-490e-adb8-bee63f121983 [] [zk: localhost:2181(CONNECTED) 2] get /services/cloud-provider-payment/a6293666-45c1-490e-adb8-bee63f121983 {\"name\":\"cloud-provider-payment\",\"id\":\"a6293666-45c1-490e-adb8-bee63f121983\",\"address\":\"FYYX-2020GVNPLA\",\"port\":8004,\"sslPort\":null,\"payload\":{\"@class\":\"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\"id\":\"application-1\",\"name\":\"cloud-provider-payment\",\"metadata\":{}},\"registrationTimeUTC\":1642423897607,\"serviceType\":\"DYNAMIC\",\"uriSpec\":{\"parts\":[{\"value\":\"scheme\",\"variable\":true},{\"value\":\"://\",\"variable\":false},{\"value\":\"address\",\"variable\":true},{\"value\":\":\",\"variable\":false},{\"value\":\"port\",\"variable\":true}]}} 8、思考服务节点是临时节点还是持久节点？？ （1）当我关闭 8004节点后，zookeeper 依旧会持续发心跳，当有接收到反馈则还有序列号，没有则返回空[] （2）然后再次启动，则返回一个新的序列，由此说明这是一个临时节点 3、服务消费者1、建model新建cloud-consumerzk-order81 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumerzk-order81&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合zookeeper客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;!--先排除自带的zookeeper--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.9版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改yml#81表示注册到zookeeper服务器的支付服务提供者端口号 server: port: 81 #服务别名----注册zookeeper到注册中心名称 spring: application: name: cloud-consumer-order cloud: zookeeper: connect-string: 106.52.23.202:2181 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class OrderZK81 { public static void main(String[] args) { SpringApplication.run (OrderZK81.class,args); } } 5、业务类1、配置Beanpackage com.kk.springcloud.config; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextBean { @Bean @LoadBalanced// 给予 RestTemplate 负载均衡的能力 public RestTemplate getRestTemplate() { return new RestTemplate ( ); } } 2、Controllerpackage com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class OrderZKController81 { public static final String INVOKE_URL = \"http://cloud-provider-payment\"; @Autowired private RestTemplate restTemplate; @RequestMapping(value = \"/consumer/payment/zk\") public String paymentInfo() { String result = restTemplate.getForObject (INVOKE_URL + \"/payment/zk\", String.class); System.out.println (\"消费者调用支付服务(zookeeper)---&gt;result:\" + result); return result; } } 6、测试1、zookeeper[zk: localhost:2181(CONNECTED) 21] ls /services [cloud-provider-payment, cloud-consumer-order] 2、访问http://localhost:81/consumer/payment/zk","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"https://mykkto.github.io/tags/Zookeeper/"}],"author":"mykk"},{"title":"SpringCloud-Eureka","slug":"03javafenbushi/01springcloud/02_SpringCloud-Eureka","date":"2022-01-14T14:35:22.000Z","updated":"2022-01-17T15:11:52.902Z","comments":true,"path":"posts/402d692e.html","link":"","permalink":"https://mykkto.github.io/posts/402d692e.html","excerpt":"","text":"1、Eureka基础知识1、什么是服务治理 Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。 2、什么是服务注册1、概念 Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。 在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址)) 2、图解 3、Eureka两组件1、EurekaServer提供服务注册服务各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。 2、EurekaClient通过注册中心进行访问是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒） 2、单机Eureka构建步骤1、eurekaServer端服务注册中心1、建modelcloud-eureka-server7001 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-eureka-server7001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--eureka-server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--boot web actuator--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改ymlserver: port: 7001 eureka: instance: hostname: localhost #eureka服务端的实例名称 client: #false表示不向注册中心注册自己。 register-with-eureka: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 fetch-registry: false service-url: #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。 defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ 4、主启动@SpringBootApplication @EnableEurekaServer public class EurekaMain7001 { public static void main(String[] args) { SpringApplication.run (EurekaMain7001.class,args); } } 5、测试1、访问：http://localhost:7001/ 2、返回结果页面 No application available 没有服务被发现 O(∩_∩)O因为没有注册服务进来当然不可能有服务被发现 2、EurekaClient端provider-80011、建model(不变)cloud-provider-payment8001 2、写pom（增加）以前老版本，别再使用 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; 现在新版本,当前使用 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; 3、改yml(增加)eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: defaultZone: http://localhost:7001/eureka 4、主启动(添加)@EnableEurekaClient 5、测试（1）先要启动EurekaServer，再启动8001 （2）访问：http://localhost:7001/ 6、自我保护机制 3、EurekaClient端consumer-801、建model（不变）2、写pom（同上） &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--引入公共部分--&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; 3、改yml（同上）eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: defaultZone: http://localhost:7001/eureka 4、主启动（同上）@SpringBootApplication @EnableEurekaClient public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 5、测试（1）先要启动EurekaServer，再启动80 （2）访问：http://localhost/consumer/payment/get/1 3、集群Eureka构建步骤1、Eureka集群原理说明1、图解 2、问题：微服务RPC远程服务调用最核心的是什么3、解决方案：高可用，试想你的注册中心只有一个only one，会导致整个为服务环境不可用，所以 解决办法：搭建Eureka注册中心集群 ，实现负载均衡+故障容错 2、EurekaServer集群环境构建步骤1、建model新建cloud-eureka-server7002，参考7001 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-eureka-server7002&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--eureka-server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--boot web actuator--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、修配置由于本地主机只有一台，为了模拟两台（多台)，则将 多个ip（域名eureka7001.com,eureka7002.com) 指向本地(127.0.0.1) 1、找到对应的配置目录C:\\Windows\\System32\\drivers\\etc 2、写入配置文件 127.0.0.1 eureka7001.com127.0.0.1 eureka7002.com 4、改yml1、7001server: port: 7001 eureka: instance: hostname: eureka7001.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7002.com:7002/eureka/ 2、7002server: port: 7002 eureka: instance: hostname: eureka7002.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7001.com:7001/eureka/ 5、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @SpringBootApplication @EnableEurekaServer public class EurekaMain7002 { public static void main(String[] args) { SpringApplication.run (EurekaMain7002.class,args); } } 3、支付8001发布到Eureka集群1、修改yml主要修改一处：defaultZone: server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 4、订单80发布到Eureka集群1、修改yml主要修改一处：defaultZone: server: port: 80 spring: application: name: cloud-consumer-service eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 5、测试流程测试以上配置是否生效 1、启动集群先要启动EurekaServer，7001/7002服务 2、启动生产者再要启动服务提供者provider，8001 3、启动消费者再要启动消费者，80 4、测试http://localhost/consumer/payment/get/1 6、支付8001集群构建【8002】1、方式一：直接把整份8001 copy出一个新的，需改yml ，port即可【推荐】 server: port: 8002 2、方式二：（1）打开idea配置，取消勾选单一服务按钮 （2）修改yml server: port: 8002 （3）启动 7、负载均衡1、订单80调用调整在调用的时候不能写死成ip+端口，需要使用服务名：cloud-payment-service 2、@LoadBalanced注解使用@LoadBalanced注解赋予RestTemplate负载均衡的能力 修改配置信息添加注解【80端口】 8、测试负载均衡1、启动顺序说明（1）先要启动EurekaServer，7001/7002服务 （2）再要启动服务提供者provider，8001/8002服务 2、访问http://localhost/consumer/payment/get/1 3、结果（1）达到负载效果 （2）8001/8002端口交替出现 4、小结Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了 4、actuator微服务信息完善1、主机名称:服务名称修改1、当前问题含有主机名名称 2、修改8001instance: instance-id: payment8001 完整 yml server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 instance: instance-id: payment8001 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、效果其实就是取别名 2、访问信息有IP信息提示1、问题：没有IP提示 2、修改8001prefer-ip-address: true #访问路径可以显示IP地址 3、效果 5、服务发现Discovery1、概述对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息 2、修改8001的Controller1、增加@Resource private DiscoveryClient discoveryClient; @Value(\"${server.port}\") private String serverPort; /** * 查看注册服务的信息 * @return */ @GetMapping(value = \"/payment/discovery\") public Object discovery() { // 目前已经注册的微服务列表 List&lt;String&gt; services = discoveryClient.getServices ( ); for (String element : services) { log.info (element); } // 根据名称获取的微服务实例（就像类和对象的关系） List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); for (ServiceInstance element : instances) { log.info (element.getServiceId ( ) + \"\\t\" + element.getHost ( ) + \"\\t\" + element.getPort ( ) + \"\\t\" + element.getUri ( )); } return this.discoveryClient; } 2、全部package com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.*; import javax.annotation.Resource; import java.util.List; @RestController @Slf4j /* * @Description: * @Author: 阿K * @CreateDate: 2022/1/16 18:11 * @Param: * @Return: **/ public class PaymentController { @Resource private PaymentService paymentService; @Resource private DiscoveryClient discoveryClient; @Value(\"${server.port}\") private String serverPort; /** * 查看注册服务的信息 * * @return */ @GetMapping(value = \"/payment/discovery\") public Object discovery() { // 目前已经注册的微服务列表 List&lt;String&gt; services = discoveryClient.getServices ( ); for (String element : services) { log.info (element); } // 根据名称获取的微服务实例（就像类和对象的关系） List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); for (ServiceInstance element : instances) { log.info (element.getServiceId ( ) + \"\\t\" + element.getHost ( ) + \"\\t\" + element.getPort ( ) + \"\\t\" + element.getUri ( )); } return this.discoveryClient; } @PostMapping(value = \"/payment/create\") public CommonResult create(@RequestBody Payment payment) { int result = paymentService.create (payment); log.info (\"*****插入结果1：\" + result + \"111\"); if (result &gt; 0) { //成功 return new CommonResult (200, \"插入数据库成功\", result); } else { return new CommonResult (444, \"插入数据库失败\", null); } } @GetMapping(value = \"/payment/get/{id}\") public CommonResult getPaymentById(@PathVariable(\"id\") Long id) { Payment payment = paymentService.getPaymentById (id); log.info (\"*****查询结果：\" + payment); if (payment != null) { //说明有数据，能查询成功 return new CommonResult (200, \"查询成功8081\", payment); } else { return new CommonResult (444, \"没有对应记录，查询ID：\" + id, null); } } } 3、8001主启动1、增加@EnableDiscoveryClient 2、全部package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient// 此注解后期若是不用 Eureka，将被下方注解所代替 @EnableDiscoveryClient// 服务注册发现 public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 4、测试1、启动顺序先要启动EurekaServer，再启动8001主启动类，需要稍等一会儿 2、访问http://localhost:8001/payment/discovery 6、Eureka自我保护1、故障现象保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。 如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE 2、导致原因此举属于CAP里面的AP分支 一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存 1、问题一：为什么会产生Eureka自我保护机制？ 为了防止EurekaClient可以正常运行，但是 与 EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除 2、问题二：什么是自我保护模式？ 默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。 3、怎么禁止自我保护1、注册中心7001（1）出厂默认，自我保护机制是开启的 eureka.server.enable-self-preservation=true （2）使用eureka.server.enable-self-preservation = false 可以禁用自我保护模式 server: port: 7001 eureka: instance: hostname: eureka7001.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7002.com:7002/eureka/ server: #关闭自我保护机制，保证不可用服务被及时踢除 enable-self-preservation: false eviction-interval-timer-in-ms: 2000 （3）效果 2、生产者80011、默认（1）单位为秒(默认是30秒) eureka.instance.lease-renewal-interval-in-seconds=30 （2）单位为秒(默认是90秒) eureka.instance.lease-expiration-duration-in-seconds=90 2、配置 server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 instance: instance-id: payment8001 prefer-ip-address: true #访问路径可以显示IP地址 #心跳检测与续约时间 #开发时设置小些，保证服务关闭后注册中心能即使剔除服务 #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒) lease-renewal-interval-in-seconds: 1 #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务 lease-expiration-duration-in-seconds: 2 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、测试（1）先启动7001，在启动8001 （2）再关闭8001，发现服务已经被删除了 7、Eureka停更``https://github.com/Netflix/eureka/wiki` 技术选型可以考虑 zookeeper、nacos(alibaba)","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Eureka","slug":"Eureka","permalink":"https://mykkto.github.io/tags/Eureka/"}],"author":"mykk"},{"title":"SpringCloud 项目构建 and 技术选型","slug":"03javafenbushi/01springcloud/01_SpringCloud-Build","date":"2022-01-12T15:42:15.000Z","updated":"2022-01-17T15:12:05.214Z","comments":true,"path":"posts/9df20094.html","link":"","permalink":"https://mykkto.github.io/posts/9df20094.html","excerpt":"","text":"1、版本 2、官网地址【Spring Cloud】1、英文https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/ 2、中文https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md 3、springboothttps://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/ 3、项目搭建-父工程构建 父工程坐标 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 统一管理jar包版本 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt; &lt;mysql.version&gt;5.1.47&lt;/mysql.version&gt; &lt;druid.version&gt;1.1.16&lt;/druid.version&gt; &lt;mybatis.spring.boot.version&gt;1.3.0&lt;/mybatis.spring.boot.version&gt; &lt;/properties&gt; &lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--spring boot 2.2.2--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring cloud Hoxton.SR1--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Hoxton.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;${mysql.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;${druid.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;${mybatis.spring.boot.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${junit.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;${lombok.version}&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;addResources&gt;true&lt;/addResources&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 4、项目搭建-Rest微服务工程构建1、坐标&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、ymlserver: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、主启动@SpringBootApplication public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 4、业务类1、建表CREATE TABLE `payment` ( `id` bigint NOT NULL AUTO_INCREMENT , `serial` varchar(255) NULL , PRIMARY KEY (`id`) ) 2、实体（entity）（1）通用返回结果实体@Data @AllArgsConstructor @NoArgsConstructor public class CommonResult&lt;T&gt; { private Integer code; private String message; private T data; public CommonResult(Integer code, String message) { this(code,message,null); } } （2）Payment@Data @AllArgsConstructor @NoArgsConstructor public class Payment { private Long id; private String serial; } 3、dao层1、接口PaymentDao编写package com.kk.springcloud.dao; import com.kk.springcloud.entities.Payment; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; @Mapper public interface PaymentDao { public int create(Payment payment); //写 public Payment getPaymentById(@Param(\"id\") Long id); //读取 } 2、mybatis的映射文件PaymentMapper.xml（1）路径src\\main\\resources\\mapper\\PaymentMapper.xml （2）头文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.kk.springcloud.dao.PaymentDao\"&gt; &lt;insert id=\"create\" parameterType=\"com.kk.springcloud.entities.Payment\" useGeneratedKeys=\"true\" keyProperty=\"id\"&gt; insert into payment(serial) values(${serial}); &lt;/insert&gt; &lt;resultMap id=\"BaseResultMap\" type=\"com.kk.springcloud.entities.Payment\"&gt; &lt;id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"&gt;&lt;/id&gt; &lt;id column=\"serial\" property=\"serial\" jdbcType=\"VARCHAR\"&gt;&lt;/id&gt; &lt;/resultMap&gt; &lt;select id=\"getPaymentById\" parameterType=\"Long\" resultMap=\"BaseResultMap\"&gt; select * from payment where id=#{id} &lt;/select&gt; &lt;/mapper&gt; 4、service1、接口package com.kk.springcloud.service; import com.kk.springcloud.entities.Payment; import org.apache.ibatis.annotations.Param; public interface PaymentService { public int create(Payment payment); //写 public Payment getPaymentById(@Param(\"id\") Long id); //读取 } 2、实现类package com.kk.springcloud.service.impl; import com.kk.springcloud.dao.PaymentDao; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import org.springframework.stereotype.Service; import javax.annotation.Resource; @Service public class PaymentServiceImpl implements PaymentService { @Resource private PaymentDao paymentDao; public int create(Payment payment) { return paymentDao.create (payment); } public Payment getPaymentById(Long id) { return paymentDao.getPaymentById (id); } } 5、controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController @Slf4j public class PaymentController { @Resource private PaymentService paymentService; @PostMapping(value = \"/payment/create\") public CommonResult create(Payment payment) { int result = paymentService.create (payment); log.info (\"*****插入结果：\" + result); if (result &gt; 0) { //成功 return new CommonResult (200, \"插入数据库成功\", result); } else { return new CommonResult (444, \"插入数据库失败\", null); } } @GetMapping(value = \"/payment/get/{id}\") public CommonResult getPaymentById(@PathVariable(\"id\") Long id) { Payment payment = paymentService.getPaymentById (id); log.info (\"*****查询结果：\" + payment); if (payment != null) { //说明有数据，能查询成功 return new CommonResult (200, \"查询成功\", payment); } else { return new CommonResult (444, \"没有对应记录，查询ID：\" + id, null); } } } 5、测试1、插入：使用post请求才能被插入，所以在url上无效，可以使用postmanhttp://localhost:8001/payment/create?serial=mykk02 2、查询：get请求，url，postman皆可http://localhost:8001/payment/get/1 5、热部署1、子工程 pom上面的依赖已经有加了，是这个 2、父工程 pom插件上面的依赖已经有加了，是这个 3、设置自动编译 4、开启自动更新1、打开设置面板ctrl + shift + alt + /同时按住，点击第一个Registry... 2、两个打勾 5、重启 IDEA6、项目搭建-Order订单微服务构建1、坐标&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-order80&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、ymlserver: port: 80 3、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class OrderMain80 { public static void main(String[] args) { SpringApplication.run (OrderMain80.class,args); } } 4、业务类1、创建entities 将cloud-provider-payment8001工程下的entities包下的两个实体类复制过来 2、RestTemplate1、官网： https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html 2、是什么 3、怎么用 3、配置类ApplicationContextConfig package com.kk.springcloud.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextConfig { @Bean public RestTemplate getRestTemplate(){ return new RestTemplate(); } } 4、创建 controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { public static final String PAYMENT_URL = \"http://localhost:8001\"; @Resource private RestTemplate restTemplate; @GetMapping(\"/consumer/payment/create\") public CommonResult&lt;Payment&gt; create(Payment payment) { return restTemplate.postForObject (PAYMENT_URL + \"/payment/create\", payment, CommonResult.class); //写操作 } @GetMapping(\"/consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPayment(@PathVariable(\"id\") Long id) { return restTemplate.getForObject (PAYMENT_URL + \"/payment/get/\" + id, CommonResult.class); } } 5、测试1、先启动cloud-provider-payment80012、再启动cloud-consumer-order803、测试消费者接口http://localhost/consumer/payment/get/1 注意点：被调用的生产者接口传参记得加注解 7、项目重构1、观察问题1、系统中有重复部分，重构 2、新建公共模块【cloud-api-commons】1、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all --&gt; &lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;5.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、实体将订单模块和支付模块公共实体放到这里 3、改造订单和支付1、删除各自的原先有过的entities文件夹2、各自分别引入公共模块&lt;!--引入公共部分--&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; 7、项目模块结构图","categories":[{"name":"分布式架构技术栈","slug":"分布式架构技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"搭建","slug":"搭建","permalink":"https://mykkto.github.io/tags/%E6%90%AD%E5%BB%BA/"}],"author":"mykk"},{"title":"南城故人","slug":"02informalessay/01duanzi/01_nanchengguren","date":"2022-01-10T17:33:22.000Z","updated":"2022-01-11T12:37:38.397Z","comments":true,"path":"posts/f2c0d8e3.html","link":"","permalink":"https://mykkto.github.io/posts/f2c0d8e3.html","excerpt":"","text":"摘自：南城故人 第8期内容： 18岁，你读了大学。20岁，你大二结束，开始悔恨自己前两年幼稚的行为于是开始努力22岁你大学毕业了，却发现找不到一份令自己满意的工作26岁，你看着身边的人都结了婚婚礼的份子钱逐年递增春节回家，父母从带你串亲戚变成了带你去见相亲对象见了十几个姑娘你每次都觉得和那个她比差了一点28岁那年，你遇到了一个和你遭遇差不多的姑娘你们有一搭没一搭的聊着她说：你还不错你喝了一口可乐说：你也是你还不确定喜不喜欢她双方家长就已经摆好了订婚宴结婚的前一周，你和朋友出去喝酒你说，不想结婚朋友说，你啊，就是想太多。谁不是这么过来的？ 29岁，你们终于结了婚婚礼办的不大不小，朋友来的不多不少攒了几年想要去实现理想的钱搭在了这一场百人的私人庙会上婚礼进行到中间司仪带着标准的商业化微笑对着台下的亲朋喊道要不要让他们亲一个！台下那些人跟着一起起哄不知道为什么你简简单单的亲了一口俩人恢复到了一开始的站位你小声说了一句：我爱你那个昨天还看不惯你倒腾模型的新娘愣了一下说：我也爱你你不确定她是不是对你说的就像你不确定是不是对她说的一样婚礼结束后，并没有你想象的浪漫你听着外屋的新娘一笔一笔的算着份子钱想着不过才两年，怎么就变成这样了想着想着，洞房夜就睡着了 30岁，她怀孕了辞掉了工作，在家养胎你在公司逐渐有了点地位手里管着十来个人独立负责一个项目结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享但你依然不敢放松每次加班电话那头都是抱怨与委屈但你不能争辩什么谁让她怀了你的孩子在这一刻不论是她的父母还是你的父母都无条件的站在这一边31岁，孩子落地了前前后后连孕检带住院费花了10万块钱不过无所谓你看着你的孩子，怎么看怎么喜欢高兴的仿佛这是你的新生32岁，这是人生最不愿意重复的一年平均睡眠3小时孩子每一个小时都要闹腾一次第二天拖着睡不醒的眼睛去上班老板说你上班不干活回家媳妇说你不干活你想了半天不明白，那谁干活呢？那辆开了3年的车成为了你真正的家你不在抱怨路上拥堵的交通你甚至开始希望再多堵一会回到家，你关了发动机在车上点了一根烟这是你每天最幸福的十分钟车前是功名利禄，车尾是柴米油盐 35岁 你因为身体越来越差加班越来越少晋升的速度也越来越缓慢那天下班，媳妇告诉你孩子要上幼儿园了双语的一个月3000你皱了皱眉头，那边就已经不耐烦了“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”你没说话，回屋给媳妇转了6000块钱这笔钱，你原本打算给自己过个生日，买个新电脑 38岁，孩子上了一年级老师说一年级最关键，打好基础很重要你笑着说，是是是，老师您多照顾新生接待的老师看着你不明事理的脸给你指了一条明路“课外辅导班，一个月2200”40岁的时候，孩子上了三年级老师说，三年级，最关键，承上启下很重要你笑着说：是是是，正打算再报个补习班 44岁，孩子上了初中有一天回到家，她对你说爸爸，我想学钢琴你没什么犹豫的你以为这些年，你已经习惯了但那句“爸爸现在买不起”你始终说不出口好在孩子比较懂事她说：爸爸没事，要不我先学陶笛也可以你看着这么懂事的孩子，却开心不起来 46岁，孩子上了一个不好不差的高中有一天你在开会，接到了老师的电话电话里说你的孩子在学校打架了叫你去一趟你唯唯诺诺的和那个比你还小5岁的领导请了个假到学校又被老师训了一通无非台词就是那一句你们做家长的就知道工作，能不能陪陪孩子你看着这个老师，有点可笑好像当时说：家长在外辛苦点多赚点钱让孩子多补补课的和他不是一个人 50岁，孩子上了大学很争气，是一个一本他学的专业你有点看不懂你只知道工作不一定好找而且学费还死贵你和他深夜想聊聊准备了半斤白酒，一碟花生米你说着那些曾经你最讨厌的话还是要为以后工作着想挑个热门的专业活着比热爱重要你们从交流变成了争吵你发现，你老了老到可能都打不过这个18岁的孩子你说不过他，只能说一句：我是你爸爸！孩子看着你，知道再怎么争辩都没用这场确立你最后威严的酒局不欢而散你听的不真切在孩子回自己屋的路上好像叨叨了一句“我不想活的像你一样”怎么就哭了呢？50岁的人了一定是酒太辣了，对不对一定是酒太辣了 55岁，孩子工作了，似乎有一点理解你了但你却反了过来，你说不要妥协56岁，孩子也结婚了你问他喜欢那个姑娘么他愣了愣说：喜欢吧60岁，辛苦了一辈子，想出去走走身边的那个人过了30年你依旧分不清到底喜不喜欢你们开始规划旅游路线这么多年了你们还是存在分歧，还是在争吵某个瞬间，你觉得这样可能也挺好一切都准备好了儿子说：爸妈，我工作太忙了可以帮我照顾一下孩子么你们退了机票，又回到了30年前 70岁，孩子的孩子也长大了，不用天天操心了你下定决心说：一定要去玩一趟可是手边的拐杖只能支持你走到楼下的花园75岁，你在医院的病床上身边聚满了人，你迷迷糊糊的看见医生摇了摇头周围那些人神情肃穆你明白了，你要死掉了你没有感到一丝害怕你突然问自己，我到底是什么时候死掉的呢？你想起来30岁的那场婚礼原来，那时候，你就死掉了吧 依照惯例死前的3秒，你的大脑要走马灯倒叙你这75个年头的一生画面一张一张的过1秒2秒两秒过去了你面无表情的看着这两秒内的回忆第3秒突然你笑了原来已经回到了15岁的那一年 你看见一个男孩他叼着一袋牛奶，背着书包从另一个女孩家的阳台下跑过那个男孩朝窗户里看了看那是15岁的你暗恋的那个女孩子你想不起来她长什么样子了最后一秒你努力的回忆着然后终于笑了出来3秒过去了身边的人突然间开始嚎啕大哭你可能听不清了你最后听到的嘈杂的声音是一群十五六的少年 起着哄说的答应他答应他答应他不爱你，不度生 热评：取一位账号已注销的评论：“有些人27岁就死了，直到72岁才被埋上”。能够想清楚过去，抓得住现在，放眼在未来吧，做一个能活到72岁的糊涂蛋。","categories":[{"name":"生活碎片化-段子","slug":"生活碎片化-段子","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96-%E6%AE%B5%E5%AD%90/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"段子","slug":"段子","permalink":"https://mykkto.github.io/tags/%E6%AE%B5%E5%AD%90/"},{"name":"感慨","slug":"感慨","permalink":"https://mykkto.github.io/tags/%E6%84%9F%E6%85%A8/"}],"author":"mykk"},{"title":"SpringCloud and Alibaba合集","slug":"03javafenbushi/01springcloud/00_SpringCloud","date":"2022-01-10T16:42:15.000Z","updated":"2022-02-01T08:39:08.760Z","comments":true,"path":"posts/58914314.html","link":"","permalink":"https://mykkto.github.io/posts/58914314.html","excerpt":"","text":"1、项目构建and技术选型2、Eureka服务注册与发现4、Consul服务注册与发现5、Ribbon负载均衡服务调用6、OpenFeign服务接口调用7、Hystrix断路器8、zuul路由网关9、Gateway新一代网关10、Seata处理分布式事务11、Sentinel实现熔断与限流12、Nacos服务注册和配置中心13、Sleuth分布式请求链路追踪14、Stream消息驱动15、Bus 消息总线16、config分布式配置中心食用技巧1、同时启动多个SpringbootIDEA SpringBoot多个项目 开启 RunDashboard， 在项目根目录 .idea 文件夹 中 workspace.xml文件中加入 &lt;component name=\"RunDashboard\"&gt; &lt;option name=\"configurationTypes\"&gt; &lt;set&gt; &lt;option value=\"SpringBootApplicationConfigurationType\" /&gt; &lt;/set&gt; &lt;/option&gt; &lt;/component&gt; 2、本地hosts配置windown 10位置：C:\\Windows\\System32\\drivers\\etc","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"springcloud-alibaba","slug":"springcloud-alibaba","permalink":"https://mykkto.github.io/tags/springcloud-alibaba/"},{"name":"合集","slug":"合集","permalink":"https://mykkto.github.io/tags/%E5%90%88%E9%9B%86/"}],"author":"mykk"},{"title":"KK语录（日记）","slug":"02informalessay/02_语录","date":"2022-01-10T15:12:19.000Z","updated":"2022-01-11T13:41:21.196Z","comments":true,"path":"posts/bd37926a.html","link":"","permalink":"https://mykkto.github.io/posts/bd37926a.html","excerpt":"","text":"","categories":[{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"}],"tags":[{"name":"语录","slug":"语录","permalink":"https://mykkto.github.io/tags/%E8%AF%AD%E5%BD%95/"},{"name":"日记","slug":"日记","permalink":"https://mykkto.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"话痨","slug":"话痨","permalink":"https://mykkto.github.io/tags/%E8%AF%9D%E7%97%A8/"}],"author":"mykk"},{"title":"美文","slug":"02informalessay/01_美文","date":"2022-01-10T14:33:12.000Z","updated":"2022-01-11T14:21:18.841Z","comments":true,"path":"posts/c3e91221.html","link":"","permalink":"https://mykkto.github.io/posts/c3e91221.html","excerpt":"","text":"","categories":[{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"}],"tags":[{"name":"美文","slug":"美文","permalink":"https://mykkto.github.io/tags/%E7%BE%8E%E6%96%87/"}],"author":"mykk"},{"title":"生活碎片文章集合汇总","slug":"01menu/03_随笔（语录）","date":"2022-01-10T13:22:55.000Z","updated":"2022-01-10T13:55:50.327Z","comments":true,"path":"posts/1565718c.html","link":"","permalink":"https://mykkto.github.io/posts/1565718c.html","excerpt":"","text":"1、美文2、语录3、电影4、美图5、心得","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"总纲","slug":"总纲","permalink":"https://mykkto.github.io/tags/%E6%80%BB%E7%BA%B2/"},{"name":"分享","slug":"分享","permalink":"https://mykkto.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"mykk"},{"title":"(新)技术文章集合汇总","slug":"01menu/02_新菜单集合","date":"2022-01-09T14:55:55.000Z","updated":"2022-01-10T16:16:03.843Z","comments":true,"path":"posts/f747eac7.html","link":"","permalink":"https://mykkto.github.io/posts/f747eac7.html","excerpt":"","text":"一、技术（较为系统编排）1、java数据结构与算法 ★11 https://www.jianshu.com/p/929ca9e209e8 2、java设计模式https://www.jianshu.com/p/63df8cd03619 8、java单体架构技术栈https://www.jianshu.com/p/0a4a1ced23c7 9、java分布式架构技术栈https://www.jianshu.com/p/00aa796bb5b8 10、框架之外技术栈汇总https://www.jianshu.com/p/d0167f082cbf N1、内力篇汇总0-java内力——总纲 - 简书 (jianshu.com) 11、Liunxhttps://www.jianshu.com/p/409970d8d0f1 12、前端大杂烩https://www.jianshu.com/p/82fa0c99e019 13、各项目整合分解大杂烩https://www.jianshu.com/p/d30b07569dc3 14、面试题汇总：技术=面试题+项目总结 ★https://www.jianshu.com/p/5e3b81aef034 15、一些不错的网站：https://www.jianshu.com/p/53bf0d4a930d 16、随性记录一小点随性记录一小点 2021-07-15至未来 7、工具代码备份UT-工具代码 JDK各版本演变 4、netty 5、JVM【重量级】 n、大数据n、前端n、golangn、以太坊n、区块链n、scala 2、工作，博客，公众号等所学技术汇总3、心得（工作）4、语录（感悟）","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}],"author":"mykk"},{"title":"(旧)简书文章过往两年纲要","slug":"01menu/01_旧菜单合集","date":"2022-01-09T11:19:19.000Z","updated":"2022-01-10T16:12:51.476Z","comments":true,"path":"posts/c3e91221.html","link":"","permalink":"https://mykkto.github.io/posts/c3e91221.html","excerpt":"","text":"1、技术（较为系统编排）1、java数据结构与算法 ★https://www.jianshu.com/p/929ca9e209e8 2、java设计模式https://www.jianshu.com/p/63df8cd03619 8、java单体架构技术栈https://www.jianshu.com/p/0a4a1ced23c7 9、java分布式架构技术栈https://www.jianshu.com/p/00aa796bb5b8 10、框架之外技术栈汇总https://www.jianshu.com/p/d0167f082cbf N1、内力篇汇总0-java内力——总纲 - 简书 (jianshu.com) 11、Liunxhttps://www.jianshu.com/p/409970d8d0f1 12、前端大杂烩https://www.jianshu.com/p/82fa0c99e019 13、各项目整合分解大杂烩https://www.jianshu.com/p/d30b07569dc3 14、面试题汇总：技术=面试题+项目总结 ★https://www.jianshu.com/p/5e3b81aef034 15、一些不错的网站：https://www.jianshu.com/p/53bf0d4a930d 16、随性记录一小点随性记录一小点 2021-07-15至未来 7、工具代码备份UT-工具代码 JDK各版本演变 4、netty 5、JVM【重量级】 n、大数据n、前端n、golangn、以太坊n、区块链n、scala 2、工作，博客，公众号等所学技术汇总3、心得（工作）4、语录（感悟）","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}],"author":"mykk"}],"categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"},{"name":"mysql","slug":"mysql","permalink":"https://mykkto.github.io/categories/mysql/"},{"name":"博客","slug":"博客","permalink":"https://mykkto.github.io/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"分布式架构技术栈","slug":"分布式架构技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/"},{"name":"生活碎片化-段子","slug":"生活碎片化-段子","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96-%E6%AE%B5%E5%AD%90/"},{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"},{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"消息驱动","slug":"消息驱动","permalink":"https://mykkto.github.io/tags/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"},{"name":"stream","slug":"stream","permalink":"https://mykkto.github.io/tags/stream/"},{"name":"服务跟踪","slug":"服务跟踪","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA/"},{"name":"sleuth","slug":"sleuth","permalink":"https://mykkto.github.io/tags/sleuth/"},{"name":"bus","slug":"bus","permalink":"https://mykkto.github.io/tags/bus/"},{"name":"节点链接","slug":"节点链接","permalink":"https://mykkto.github.io/tags/%E8%8A%82%E7%82%B9%E9%93%BE%E6%8E%A5/"},{"name":"配置中心","slug":"配置中心","permalink":"https://mykkto.github.io/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"},{"name":"config","slug":"config","permalink":"https://mykkto.github.io/tags/config/"},{"name":"路由网关","slug":"路由网关","permalink":"https://mykkto.github.io/tags/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"},{"name":"alibaba","slug":"alibaba","permalink":"https://mykkto.github.io/tags/alibaba/"},{"name":"gateway","slug":"gateway","permalink":"https://mykkto.github.io/tags/gateway/"},{"name":"小姿势","slug":"小姿势","permalink":"https://mykkto.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"linux","slug":"linux","permalink":"https://mykkto.github.io/tags/linux/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"zuul","slug":"zuul","permalink":"https://mykkto.github.io/tags/zuul/"},{"name":"断路器","slug":"断路器","permalink":"https://mykkto.github.io/tags/%E6%96%AD%E8%B7%AF%E5%99%A8/"},{"name":"Hystrix","slug":"Hystrix","permalink":"https://mykkto.github.io/tags/Hystrix/"},{"name":"远程调用服务","slug":"远程调用服务","permalink":"https://mykkto.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"name":"openfeign","slug":"openfeign","permalink":"https://mykkto.github.io/tags/openfeign/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://mykkto.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"ribbon","slug":"ribbon","permalink":"https://mykkto.github.io/tags/ribbon/"},{"name":"hexo","slug":"hexo","permalink":"https://mykkto.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://mykkto.github.io/tags/github/"},{"name":"seo","slug":"seo","permalink":"https://mykkto.github.io/tags/seo/"},{"name":"百度","slug":"百度","permalink":"https://mykkto.github.io/tags/%E7%99%BE%E5%BA%A6/"},{"name":"谷歌","slug":"谷歌","permalink":"https://mykkto.github.io/tags/%E8%B0%B7%E6%AD%8C/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Consul","slug":"Consul","permalink":"https://mykkto.github.io/tags/Consul/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"https://mykkto.github.io/tags/Zookeeper/"},{"name":"Eureka","slug":"Eureka","permalink":"https://mykkto.github.io/tags/Eureka/"},{"name":"搭建","slug":"搭建","permalink":"https://mykkto.github.io/tags/%E6%90%AD%E5%BB%BA/"},{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"段子","slug":"段子","permalink":"https://mykkto.github.io/tags/%E6%AE%B5%E5%AD%90/"},{"name":"感慨","slug":"感慨","permalink":"https://mykkto.github.io/tags/%E6%84%9F%E6%85%A8/"},{"name":"springcloud-alibaba","slug":"springcloud-alibaba","permalink":"https://mykkto.github.io/tags/springcloud-alibaba/"},{"name":"合集","slug":"合集","permalink":"https://mykkto.github.io/tags/%E5%90%88%E9%9B%86/"},{"name":"语录","slug":"语录","permalink":"https://mykkto.github.io/tags/%E8%AF%AD%E5%BD%95/"},{"name":"日记","slug":"日记","permalink":"https://mykkto.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"话痨","slug":"话痨","permalink":"https://mykkto.github.io/tags/%E8%AF%9D%E7%97%A8/"},{"name":"美文","slug":"美文","permalink":"https://mykkto.github.io/tags/%E7%BE%8E%E6%96%87/"},{"name":"总纲","slug":"总纲","permalink":"https://mykkto.github.io/tags/%E6%80%BB%E7%BA%B2/"},{"name":"分享","slug":"分享","permalink":"https://mykkto.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}]}