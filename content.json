{"meta":{"title":"jack","subtitle":"jackの博客","description":"专科 | 计算机与网络 | 简书作者","author":"jack","url":"https://mykkto.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.725Z","comments":true,"path":"404.html","permalink":"https://mykkto.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2022-01-06T14:09:33.869Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://mykkto.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2022-01-06T14:09:33.871Z","updated":"2022-01-06T14:09:33.871Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://mykkto.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.745Z","comments":true,"path":"List/index.html","permalink":"https://mykkto.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.867Z","comments":true,"path":"about/index.html","permalink":"https://mykkto.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.867Z","comments":true,"path":"archives/index.html","permalink":"https://mykkto.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"categories/index.html","permalink":"https://mykkto.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-01-06T15:45:01.231Z","updated":"2022-01-06T15:45:01.231Z","comments":true,"path":"contact/index.html","permalink":"https://mykkto.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 jackの友链信息 博客名称: jckの博客 博客网址: https://mykkto.github.io/"},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-01-06T14:09:33.871Z","comments":true,"path":"friends/index.html","permalink":"https://mykkto.github.io/friends/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-01-06T14:09:33.869Z","comments":true,"path":"census/index.html","permalink":"https://mykkto.github.io/census/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.872Z","comments":true,"path":"resource/index.html","permalink":"https://mykkto.github.io/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.873Z","comments":true,"path":"tags/index.html","permalink":"https://mykkto.github.io/tags/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.747Z","comments":true,"path":"List/tools/index.html","permalink":"https://mykkto.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-06T14:09:33.745Z","comments":true,"path":"List/movies/index.html","permalink":"https://mykkto.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-06T14:09:33.746Z","comments":true,"path":"List/music/index.html","permalink":"https://mykkto.github.io/List/music/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-01-08T15:55:11.896Z","updated":"2022-01-06T14:09:33.734Z","comments":true,"path":"List/galleries/index.html","permalink":"https://mykkto.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-01-06T14:09:33.735Z","updated":"2022-01-06T14:09:33.735Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://mykkto.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-01-06T14:09:33.734Z","updated":"2022-01-06T14:09:33.734Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://mykkto.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-01-06T14:09:33.737Z","updated":"2022-01-06T14:09:33.737Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-01-06T14:09:33.738Z","updated":"2022-01-06T14:09:33.738Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-01-06T14:09:33.740Z","updated":"2022-01-06T14:09:33.740Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://mykkto.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-01-06T14:09:33.736Z","updated":"2022-01-06T14:09:33.736Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-01-06T14:09:33.739Z","updated":"2022-01-06T14:09:33.739Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-01-06T14:09:33.738Z","updated":"2022-01-06T14:09:33.738Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://mykkto.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-01-06T14:09:33.743Z","updated":"2022-01-06T14:09:33.743Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-01-06T14:09:33.744Z","updated":"2022-01-06T14:09:33.744Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://mykkto.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-01-08T15:55:21.871Z","updated":"2022-01-06T14:09:33.742Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-01-06T14:09:33.743Z","updated":"2022-01-06T14:09:33.743Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://mykkto.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringCloud-OpenFeign远程调用服务","slug":"03javafenbushi/01springcloud/06_SpringCloud_OpenFeign","date":"2022-01-29T13:32:13.000Z","updated":"2022-01-23T07:20:20.730Z","comments":true,"path":"posts/a723ac51.html","link":"","permalink":"https://mykkto.github.io/posts/a723ac51.html","excerpt":"","text":"1、概述1、是什么https://github.com/spring-cloud/spring-cloud-openfeign Feign是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需创建一个接口并在接口上添加注解即可 2、能干嘛1、 Feign能干什么Feign旨在使编写Java Http客户端变得更容易。前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。 2、Feign集成了Ribbon利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用 3、区别1、feignFeign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; 2、openfeignOpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; 2、OpenFeign使用步骤1、建model新建cloud-consumer-feign-order80 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-feign-order80&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--openfeign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般基础通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication @EnableFeignClients public class OrderFeignMain80 { public static void main(String[] args) { SpringApplication.run (OrderFeignMain80.class,args); } } 5、业务类1、新建PaymentFeignService接口并新增注解@FeignClientpackage com.kk.springcloud.service; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; @Component @FeignClient(value = \"CLOUD-PAYMENT-SERVICE\") public interface PaymentFeignService { @GetMapping(value = \"/payment/get/{id}\") CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(\"id\") Long id); } 2、控制层Controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentFeignService; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController public class OrderFeignController { @Resource private PaymentFeignService paymentFeignService; @GetMapping(value = \"consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(\"id\") Long id){ return paymentFeignService.getPaymentById (id); } } 6、测试1、启动顺序 启动 7001/7002 eureka集群 启动 8001/8002 生产者集群 启动 OpenFeign:80 消费者 2、访问http://localhost/consumer/payment/get/1 3、Feign自带负载均衡配置项 7、小结 3、OpenFeign超时控制1、模拟超时超时设置，故意设置超时演示出错情况 1、服务提供方8001故意写暂停程序com.kk.springcloud.controller.PaymentController; @GetMapping(value = \"/payment/feign/timeout\") public String paymentFeignTimeOut() { System.out.println (\"*****paymentFeignTimeOut from port: \" + serverPort); //暂停几秒钟线程 try { TimeUnit.SECONDS.sleep (3); } catch (InterruptedException e) { e.printStackTrace ( ); } return serverPort; } 2、服务消费方80添加超时方法PaymentFeignServicecom.kk.springcloud.service.PaymentFeignService @GetMapping(value = \"/payment/feign/timeout\") String paymentFeignTimeOut(); 3、服务消费方80添加超时方法OrderFeignControllercom.kk.springcloud.controller.OrderFeignController @GetMapping(value = \"/consumer/payment/feign/timeout\") public String paymentFeignTimeOut() { return paymentFeignService.paymentFeignTimeOut ( ); } 4、测试url：http://localhost/consumer/payment/feign/timeout 5、小结OpenFeign默认等待1秒钟，超过后报错 2、是什么1、概述默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。 2、默认支持Ribbon 3、超时时间配置#设置feign客户端超时时间(OpenFeign默认支持ribbon) ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间 ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 5000 4、OpenFeign日志打印功能1、是什么Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。说白了就是对Feign接口的调用情况进行监控和输出 2、日志级别 NONE：默认的，不显示任何日志； BASIC：仅记录请求方法、URL、响应状态码及执行时间； HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息； FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。 3、配置日志 beanpackage com.kk.springcloud.config; import feign.Logger; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class OpenFeignConfig { @Configuration public class FeignConfig { @Bean Logger.Level feignLoggerLevel() { return Logger.Level.FULL; } } } 4、yml中配置logging: level: # feign日志以什么级别监控哪个接口 com.kk.springcloud.service.PaymentFeignService: debug server: port: 80 eureka: client: register-with-eureka: false service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ #设置feign客户端超时时间(OpenFeign默认支持ribbon) ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间 ReadTimeout: 5000 #指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 5000 logging: level: # feign日志以什么级别监控哪个接口 com.kk.springcloud.service.PaymentFeignService: debug 5、后台启动查看","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"远程调用服务","slug":"远程调用服务","permalink":"https://mykkto.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"name":"openfeign","slug":"openfeign","permalink":"https://mykkto.github.io/tags/openfeign/"}],"author":"mykk"},{"title":"mysql开启远程连接","slug":"04jichu/03mysql/01_Mysql_smallPosture","date":"2022-01-27T14:27:39.000Z","updated":"2022-01-25T12:33:49.057Z","comments":true,"path":"posts/bf62bc57.html","link":"","permalink":"https://mykkto.github.io/posts/bf62bc57.html","excerpt":"","text":"1、前言最近快过年了，过去肯定是要敲代码，写博文的，近期在写SpringCloud全家桶，数据库一直是在本地，想着还有几台云机在云上运行着，于是连接了下，出现了如下问题： –图 之前还是好的，可能挺久没用的权限自己关闭了，安装是docker 可以参考之前博主的简书文章 ： https://www.jianshu.com/p/f554c85b25c1 版本顺便说下5.7.35 MySQL Community Server (GPL) 2、开启远程连接#开启远程连接 GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'a1b2c3' WITH GRANT OPTION; #root 用户名 #a1b2c3 密码 #刷新权限，立即生效 flush privileges; 3、修改密码#修改密码(5.7.35) set password = password ('a1b2c3'); #修改密码（高版本 8.0+） update mysql.user set authentication_string=password('a1b2c3') where user='a1b2c3'; #刷新权限，立即生效 flush privileges;","categories":[{"name":"mysql","slug":"mysql","permalink":"https://mykkto.github.io/categories/mysql/"}],"tags":[{"name":"小姿势","slug":"小姿势","permalink":"https://mykkto.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"linux","slug":"linux","permalink":"https://mykkto.github.io/tags/linux/"}],"author":"mykk"},{"title":"SpringCloud-Hystrix断路器","slug":"03javafenbushi/01springcloud/07_SpringCloud_Hystrix","date":"2022-01-26T13:19:18.000Z","updated":"2022-01-25T15:05:54.351Z","comments":true,"path":"posts/b0ab6264.html","link":"","permalink":"https://mykkto.github.io/posts/b0ab6264.html","excerpt":"","text":"1、概述1、分布式系统面临的问题复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。 服务雪崩 多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”. 对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。 所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。 2、是什么 Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。 “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。 3、能干嘛 服务降级 服务熔断 接近实时的监控 ……….. 4、官网文档https://github.com/Netflix/Hystrix/wiki/How-To-Use 5、Hystrix停更https://github.com/Netflix/Hystrix 被动修复bugs 不再接受合并请求 不再发布新版本 2、Hystrix重要概念1、服务降级1、操作服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback 2、哪些情况会出发降级 程序运行异常 超时 服务熔断触发服务降级 线程池/信号量打满也会导致服务降级 2、服务熔断类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示 就是保险丝：服务的降级-&gt;进而熔断-&gt;恢复调用链路 3、服务限流秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行 3、hystrix案例1、构建1、建model新建cloud-provider-hystrix-payment8001 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-hystrix-payment8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--hystrix--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、ymlserver: port: 8001 spring: application: name: cloud-provider-hystrix-payment eureka: client: register-with-eureka: true fetch-registry: true service-url: #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka defaultZone: http://eureka7001.com:7001/eureka 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient //本服务启动后会自动注册进eureka服务中 public class PaymentHystrixMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentHystrixMain8001.class,args); } } 5、业务类1、servicepackage com.kk.springcloud.service.imp; import com.kk.springcloud.service.PaymentHystrixServoce; import org.springframework.stereotype.Service; import java.util.concurrent.TimeUnit; @Service public class PaymentHystrixServoceImpl implements PaymentHystrixServoce { /** * 正常访问，一切OK * * @param id * @return */ public String paymentInfo_OK(Integer id) { return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_OK,id: \" + id + \"\\t\" + \"O(∩_∩)O\"; } /** * 超时访问，演示降级 * * @param id * @return */ public String paymentInfo_TimeOut(Integer id) { try { TimeUnit.SECONDS.sleep (3); } catch (InterruptedException e) { e.printStackTrace ( ); } return \"线程池:\" + Thread.currentThread ( ).getName ( ) + \"paymentInfo_TimeOut,id: \" + id + \"\\t\" + \"O(∩_∩)O，耗费3秒\"; } } 2、controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.service.imp.PaymentHystrixServoceImpl; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; @RestController @Slf4j public class PaymentHystrixController { @Autowired private PaymentHystrixServoceImpl paymentService; @Value(\"${server.port}\") private String serverPort; @GetMapping(\"/payment/hystrix/ok/{id}\") public String paymentInfo_OK(@PathVariable(\"id\") Integer id) { String result = paymentService.paymentInfo_OK(id); log.info(\"****result: \"+result); return result; } @GetMapping(\"/payment/hystrix/timeout/{id}\") public String paymentInfo_TimeOut(@PathVariable(\"id\") Integer id) throws InterruptedException { String result = paymentService.paymentInfo_TimeOut(id); log.info(\"****result: \"+result); return result; } } 6、测试1、启动顺序先启动eureka，再启动hystrix 8001 2、访问 success的方法： http://localhost:8001/payment/hystrix/ok/1 每次调用耗费3 秒钟 http://localhost:8001/payment/hystrix/timeout/1 2、高并发测试上述在非高并发情形下，还能勉强满足 1、Jmeter压测测试1、开启Jmeter，来20000个并发压死8001，20000个请求都去访问paymentInfo_TimeOut服务 2、再来一个访问从3秒到不止3秒 http://localhost:8001/payment/hystrix/timeout/1 从秒回到延迟一秒多 http://localhost:8001/payment/hystrix/ok/1 3、看演示结果两个都在自己转圈圈 为什么会被卡死：tomcat的默认的工作线程数被打满 了，没有多余的线程来分解压力和处理。 2、Jmeter压测结论上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问，那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死 3、看热闹不嫌弃事大，80新建加入cloud-consumer-feign-hystrix-order80 3、故障现象和导致原因 8001同一层次的其它接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕 80此时调用8001，客户端访问响应缓慢，转圈圈 4、上诉结论正因为有上述故障或不佳表现，才有我们的降级/容错/限流等技术诞生 5、如何解决？解决的要求4、hystrix工作流程5、服务监控HystrixDashboard","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"断路器","slug":"断路器","permalink":"https://mykkto.github.io/tags/%E6%96%AD%E8%B7%AF%E5%99%A8/"},{"name":"Hystrix","slug":"Hystrix","permalink":"https://mykkto.github.io/tags/Hystrix/"}],"author":"mykk"},{"title":"SpringCloud-Zuul路由网关","slug":"03javafenbushi/01springcloud/08_SpringCloud_Zuul","date":"2022-01-25T13:38:21.000Z","updated":"2022-01-23T07:20:57.585Z","comments":true,"path":"posts/d633875f.html","link":"","permalink":"https://mykkto.github.io/posts/d633875f.html","excerpt":"","text":"1、概述1、官网https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.1.RELEASE/reference/html/#router-and-filter-zuul 2、是什么Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。 Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。 API网关为微服务架构中的服务提供了统一的访问入口，客户端通过API网关访问相关服务。API网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。 Zuul包含了如下最主要的功能：代理+路由+过滤三大功能 3、能干嘛1、路由2、过滤3、负载均衡4、灰度发布（金丝雀发布）起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。 在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。新版本没什么问题，那么逐步扩大范围、流量，把所有用户都迁移到新版本上面来。 2、路由基本配置路由功能负责将外部请求转发到具体的服务实例上去，是实现统一访问入口的基础 1、建Modelcloud-zuul-gateway9527 2、pom3、yml4、hosts修改(本地环境)因为是本地环境，服务器，域名等资源有限 5、主启动6、启动顺序7、测试3、路由访问映射规则4、查看路由信息5、过滤器","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"路由网关","slug":"路由网关","permalink":"https://mykkto.github.io/tags/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"},{"name":"zuul","slug":"zuul","permalink":"https://mykkto.github.io/tags/zuul/"}],"author":"mykk"},{"title":"SpringCloud- Ribbon负载均衡服务","slug":"03javafenbushi/01springcloud/05_SpringCloud_Ribbon","date":"2022-01-17T14:42:11.000Z","updated":"2022-01-19T15:44:00.931Z","comments":true,"path":"posts/9091e07b.html","link":"","permalink":"https://mykkto.github.io/posts/9091e07b.html","excerpt":"","text":"1、概述1、是什么 Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。 简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。 2、官网资料1、文档https://github.com/Netflix/ribbon/wiki/Getting-Started 2、Ribbon目前也进入维护模式 未来替换方案： 3、能干吗1、LB（负载均衡）简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。常见的负载均衡有软件Nginx，LVS，硬件 F5等。 总结：Ribbon = 负载均衡+RestTemplate调用 2、区别（ribbon VS nginx） Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。 3、划分1、集中式LB 即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方； 2、进程内LB 将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。 Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。 2、Ribbon案例1、架构说明 Ribbon在工作时分成两步 第一步先选择 EurekaServer ,它优先选择在同一个区域内负载较少的server. 第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。 总结：Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。 2、POM1、坐标&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; 2、eureka-client 自带 ribbon证明如下： 可以看到spring-cloud-starter-netflix-eureka-client 确实引入了Ribbon 3、二说RestTemplate的使用1、官网https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html 2、getForObject方法/getForEntity（读） 返回对象为响应体中数据转化成的对象，基本上可以理解为Json 返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等 3、postForObject/postForEntity(写)写一个单元测试用例，测试用例的内容是向指定的URL提交一个Post(帖子). @Test void testSimple() { // 请求地址 String url = \"http://jsonplaceholder.typicode.com/posts\"; // 要发送的数据对象 PostDTO postDTO = new PostDTO(); postDTO.setUserId(110); postDTO.setTitle(\"zimug 发布文章\"); postDTO.setBody(\"zimug 发布文章 测试内容\"); // 发送post请求，并输出结果 PostDTO result = restTemplate.postForObject(url, postDTO, PostDTO.class); System.out.println(result); } 上面的所有的postForObject请求传参方法，postForEntity都可以使用，使用方法上也几乎是一致的，只是在返回结果接收的时候略有差别。使用ResponseEntity&lt;T&gt; responseEntity来接收响应结果。用responseEntity.getBody()获取响应体。响应体内容同postForObject方法返回结果一致。剩下的这些响应信息就是postForEntity比postForObject多出来的内容 HttpStatus statusCode = responseEntity.getStatusCode(); 获取整体的响应状态信息 int statusCodeValue = responseEntity.getStatusCodeValue(); 获取响应码值 HttpHeaders headers = responseEntity.getHeaders(); 获取响应头等 @Test public void testEntityPoJo() { // 请求地址 String url = \"http://jsonplaceholder.typicode.com/posts\"; // 要发送的数据对象 PostDTO postDTO = new PostDTO(); postDTO.setUserId(110); postDTO.setTitle(\"zimug 发布文章\"); postDTO.setBody(\"zimug 发布文章 测试内容\"); // 发送post请求，并输出结果 ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, postDTO, String.class); String body = responseEntity.getBody(); // 获取响应体 System.out.println(\"HTTP 响应body：\" + postDTO.toString()); //以下是postForEntity比postForObject多出来的内容 HttpStatus statusCode = responseEntity.getStatusCode(); // 获取响应码 int statusCodeValue = responseEntity.getStatusCodeValue(); // 获取响应码值 HttpHeaders headers = responseEntity.getHeaders(); // 获取响应头 System.out.println(\"HTTP 响应状态：\" + statusCode); System.out.println(\"HTTP 响应状态码：\" + statusCodeValue); System.out.println(\"HTTP Headers信息：\" + headers); } 4、GET请求方法&lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(URI var1, Class&lt;T&gt; responseType); 5、POST请求方法 &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables); &lt;T&gt; ResponseEntity&lt;T&gt; postForEntity(URI url, @Nullable Object request, Class&lt;T&gt; responseType); 3、Ribbon核心组件IRule1、IRule：根据特定算法中从服务列表中选取一个要访问的服务 轮询: com.netflix.loadbalancer.RoundRobinRule 随机: com.netflix.loadbalancer.RandomRule com.netflix.loadbalancer.RetryRule 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务 WeightedResponseTimeRule 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择 BestAvailableRule 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务 AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例 ZoneAvoidanceRule 默认规则,复合判断server所在区域的性能和server的可用性选择服务器 2、案例修改cloud-consumer-order801、细节说明官方文档明确给出了警告：这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。 2、新建packagecom.kk.myrule 3、新建MySelfRule规则类package com.kk.myrule; import com.netflix.loadbalancer.IRule; import com.netflix.loadbalancer.RandomRule; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class MySelfRule { @Bean public IRule myRule() { return new RandomRule ( );//定义为随机 } } 4、主启动类添加@RibbonClient@RibbonClient(name = \"CLOUD-PAYMENT-SERVICE\",configuration=MySelfRule.class) 5、测试启动：（1）eureka（单个或者集群都行），（2）生产者8001（单个或者集群都行），（3）消费者80 http://localhost/consumer/payment/get/1 4、Ribbon负载均衡算法1、原理负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标 ，每次服务重启动后rest接口计数从1开始。 List instances = discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”); 如： List [0] instances = 127.0.0.1:8002 List [1] instances = 127.0.0.1:8001 8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理： 当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002如此类推…… 2、RoundRobinRule源码 这里不是死循环，而是自旋锁，compareAndSet（CAS操作，JUC中乐观锁的底层实现） 3、手写1、8001和8002分别加入 @Value(\"${server.port}\") private String serverPort; @GetMapping(value = \"/payment/lb\") public String getPaymentLB() { return serverPort; } 2、去掉注解@LoadBalanced 3、新建LoadBalancer接口package com.kk.springcloud.lb; import org.springframework.cloud.client.ServiceInstance; import java.util.List; public interface LoadBalancer { ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances); } 4、新建MyLBpackage com.kk.springcloud.lb; import org.springframework.cloud.client.ServiceInstance; import org.springframework.stereotype.Component; import java.util.List; import java.util.concurrent.atomic.AtomicInteger; @Component public class MyLB implements LoadBalancer { private AtomicInteger atomicInteger = new AtomicInteger (0); @Override public ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances) { int index = getAndIncrement ( ) % serviceInstances.size ( ); return serviceInstances.get (index); } public final int getAndIncrement() { int current; int next; do { current = this.atomicInteger.get ( ); next = current &gt;= 2147483647 ? 0 : current + 1; } while (!this.atomicInteger.compareAndSet (current, next)); System.out.println (\"*****next: \" + next); return next; } } 5、OrderController@Resource private LoadBalancer loadBalancer; @GetMapping(\"/consumer/payment/lb\") public String getPaymentLB() { List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); if (instances == null || instances.size ( ) &lt;= 0) { return null; } ServiceInstance serviceInstance = loadBalancer.instances (instances); URI uri = serviceInstance.getUri ( ); return restTemplate.getForObject (uri + \"/payment/lb\", String.class); } package com.kk.springcloud.controller; import com.kk.springcloud.lb.LoadBalancer; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; import java.net.URI; import java.util.List; @RestController @Slf4j public class OrderController { //public static final String PAYMENT_URL = \"http://localhost:8001\"; public static final String PAYMENT_URL = \"http://cloud-payment-service\"; //可以获取注册中心上的服务列表 @Resource private DiscoveryClient discoveryClient; @Resource private LoadBalancer loadBalancer; @GetMapping(\"/consumer/payment/lb\") public String getPaymentLB() { List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); if (instances == null || instances.size ( ) &lt;= 0) { return null; } ServiceInstance serviceInstance = loadBalancer.instances (instances); URI uri = serviceInstance.getUri ( ); return restTemplate.getForObject (uri + \"/payment/lb\", String.class); } @Resource private RestTemplate restTemplate; @GetMapping(\"/consumer/payment/create\") public CommonResult&lt;Payment&gt; create(Payment payment) { return restTemplate.postForObject (PAYMENT_URL + \"/payment/create\", payment, CommonResult.class); //写操作 } @GetMapping(\"/consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPayment(@PathVariable(\"id\") Long id) { return restTemplate.getForObject (PAYMENT_URL + \"/payment/get/\" + id, CommonResult.class); } } 6、测试http://localhost/consumer/payment/lb 注意：8001和8002别名配置都要配好否则自定义算法 获取的url会报错","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://mykkto.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"ribbon","slug":"ribbon","permalink":"https://mykkto.github.io/tags/ribbon/"}],"author":"mykk"},{"title":"hexo + github 在百度和谷歌 SEO站点收录","slug":"00blog/01_seo","date":"2022-01-16T14:41:15.000Z","updated":"2022-01-16T15:15:19.628Z","comments":true,"path":"posts/f1d997d.html","link":"","permalink":"https://mykkto.github.io/posts/f1d997d.html","excerpt":"","text":"1、百度 seo1、登陆百度站长管理https://ziyuan.baidu.com/linksubmit/url?sitename=http://site:abc.github.io 2、填写自己的blog地址 3、hexo设置校验C:\\Users\\Administrator\\Desktop\\myblog\\mykkTo.github.io\\themes\\matery\\layout\\_partial 4、成功 5、站点收录https://mykkto.github.io/baidu_urls.txt 2、谷歌 seo参考https://www.jianshu.com/p/9be9b4786f97","categories":[{"name":"博客","slug":"博客","permalink":"https://mykkto.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://mykkto.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://mykkto.github.io/tags/github/"},{"name":"seo","slug":"seo","permalink":"https://mykkto.github.io/tags/seo/"},{"name":"百度","slug":"百度","permalink":"https://mykkto.github.io/tags/%E7%99%BE%E5%BA%A6/"},{"name":"谷歌","slug":"谷歌","permalink":"https://mykkto.github.io/tags/%E8%B0%B7%E6%AD%8C/"}],"author":"mykk"},{"title":"SpringCloud-Consul","slug":"03javafenbushi/01springcloud/04_SpringCloud_Consul","date":"2022-01-16T13:42:11.000Z","updated":"2022-01-17T15:12:15.319Z","comments":true,"path":"posts/51c7125f.html","link":"","permalink":"https://mykkto.github.io/posts/51c7125f.html","excerpt":"","text":"1、Consul简介1、是什么 Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。 提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。 它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows 2、能干嘛1、服务发现提供HTTP和DNS两种发现方式。 2、健康监测支持多种方式，HTTP、TCP、Docker、Shell脚本定制化监控 3、KV存储Key、Value的存储方式 4、多数据中心Consul支持多数据中心 5、可视化Web界面3、官网文档1、下载地址https://www.consul.io/downloads.html 2、学习文档https://www.springcloud.cc/spring-cloud-consul.html 2、安装并运行Consul1、官网安装https://www.consul.io/downloads 2、安装说明下载完成后只有一个consul.exe文件，硬盘路径下双击运行，查看版本号信息 3、使用开发模式启动（1）命令：consul agent -dev （2）通过以下地址可以访问Consul的首页：http://localhost:8500 （3）效果： 3、服务提供者1、建modelcloud-providerconsul-payment8006 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-providerconsul-payment8006&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--SpringCloud consul-server --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--日常通用jar包配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、yml###consul服务端口号 server: port: 8006 spring: application: name: consul-provider-payment ####consul注册中心地址 cloud: consul: host: localhost port: 8500 discovery: #hostname: 127.0.0.1 service-name: ${spring.application.name} 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Payment8006 { public static void main(String[] args) { SpringApplication.run (Payment8006.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import java.util.UUID; @RestController public class PaymentController { @Value(\"${server.port}\") private String serverPort; @GetMapping(\"/payment/consul\") public String paymentInfo() { return \"springcloud with consul: \" + serverPort + \"\\t\\t\" + UUID.randomUUID ( ).toString ( ); } } 5、测试1、访问http://localhost:8006/payment/consul 2、控制台 4、服务消费者1、建modelcloud-consumerconsul-order82 2、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumerconsul-order82&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--SpringCloud consul-server --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--日常通用jar包配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、yml###consul服务端口号 server: port: 82 spring: application: name: cloud-consumer-order ####consul注册中心地址 cloud: consul: host: localhost port: 8500 discovery: #hostname: 127.0.0.1 service-name: ${spring.application.name} 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class OrderConsulMain82 { public static void main(String[] args) { SpringApplication.run (OrderConsulMain82.class,args); } } 5、业务类1、Bean配置类package com.kk.springcloud.config; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextBean { @Bean @LoadBalanced public RestTemplate getRestTemplate() { return new RestTemplate ( ); } } 2、Controllerpackage com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class OrderConsulController { public static final String INVOKE_URL = \"http://cloud-provider-payment\"; //consul-provider-payment @Autowired private RestTemplate restTemplate; @GetMapping(value = \"/consumer/payment/consul\") public String paymentInfo() { String result = restTemplate.getForObject (INVOKE_URL + \"/payment/consul\", String.class); System.out.println (\"消费者调用支付服务(consule)---&gt;result:\" + result); return result; } } 6、测试1、客户端 2、访问http://localhost/consumer/payment/consul 5、三个注册中心异同点1、CAPCAP理论关注粒度是数据，而不是整体系统设计的策略 C:Consistency（强一致性） A:Availability（可用性） P:Partition tolerance（分区容错性） 2、CAP图最多只能同时较好的满足两个。 CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。 3、AP-CP架构图1、AP(Eureka)AP架构 当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。结论：违背了一致性C的要求，只满足可用性和分区容错，即AP 2、CP(Zookeeper/Consul)CP架构 当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性结论：违背了可用性A的要求，只满足一致性和分区容错，即CP","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Consul","slug":"Consul","permalink":"https://mykkto.github.io/tags/Consul/"}],"author":"mykk"},{"title":"Springcloud-Zookeeper(快速入门)","slug":"03javafenbushi/01springcloud/03_SpringCloud-Zookeeper","date":"2022-01-15T15:01:12.000Z","updated":"2022-01-17T15:12:07.880Z","comments":true,"path":"posts/c0125b8a.html","link":"","permalink":"https://mykkto.github.io/posts/c0125b8a.html","excerpt":"","text":"安装参考【后面写】https://blog.csdn.net/zhou_fan_xi/article/details/103275955 安装完，windown访问测试 telnet 106.52.23.202 2181 1、注册中心Zookeeper基本概述 zookeeper是一个分布式协调工具，可以实现注册中心功能 关闭Linux服务器防火墙后才能启动zookeeper服务器 zookeeper服务器取代Eureka服务器，zk作为服务注册中心 2、服务提供者1、建model新建cloud-provider-payment8004 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合zookeeper客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;!--先排除自带的zookeeper3.5.3--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.9版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改yml#8004表示注册到zookeeper服务器的支付服务提供者端口号 server: port: 8004 #服务别名----注册zookeeper到注册中心名称 spring: application: name: cloud-provider-payment cloud: zookeeper: connect-string: 106.52.23.202:2181 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient//该注解用于向使用consul或者zookeeper作为注册中心时注册服务 public class PaymentMain8004 { public static void main(String[] args) { SpringApplication.run (PaymentMain8004.class,args); } } 5、业务类package com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.util.UUID; @RestController public class PaymentController { @Value(\"${server.port}\") private String serverPort; @RequestMapping(value = \"/payment/zk\") public String paymentzk() { return \"springcloud with zookeeper: \" + serverPort + \"\\t\" + UUID.randomUUID ( ).toString ( ); } } 6、启动8004注册进zookeeper1、liunx启动 zookeeper#查看执行路径 [root@VM-0-13-centos bin]# pwd /root/zookeeper-3.4.9/bin #启动 [root@VM-0-13-centos bin]# ./zkServer.sh start #停止 [root@VM-0-13-centos bin]# ./zkServer.sh stop #重启 [root@VM-0-13-centos bin]# ./zkServer.sh restart 7、测试1、访问服务http://localhost:8004/payment/zk 2、查看服务端被是否被注册#进入 zookeeper客户端 [root@VM-0-13-centos bin]# ./zkCli.sh WatchedEvent state:SyncConnected type:None path:null #查看序列 [zk: localhost:2181(CONNECTED) 0] ls /services/cloud-provider-payment [a6293666-45c1-490e-adb8-bee63f121983] #查看详细信息 [zk: localhost:2181(CONNECTED) 1] ls /services/cloud-provider-payment/a6293666-45c1-490e-adb8-bee63f121983 [] [zk: localhost:2181(CONNECTED) 2] get /services/cloud-provider-payment/a6293666-45c1-490e-adb8-bee63f121983 {\"name\":\"cloud-provider-payment\",\"id\":\"a6293666-45c1-490e-adb8-bee63f121983\",\"address\":\"FYYX-2020GVNPLA\",\"port\":8004,\"sslPort\":null,\"payload\":{\"@class\":\"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\"id\":\"application-1\",\"name\":\"cloud-provider-payment\",\"metadata\":{}},\"registrationTimeUTC\":1642423897607,\"serviceType\":\"DYNAMIC\",\"uriSpec\":{\"parts\":[{\"value\":\"scheme\",\"variable\":true},{\"value\":\"://\",\"variable\":false},{\"value\":\"address\",\"variable\":true},{\"value\":\":\",\"variable\":false},{\"value\":\"port\",\"variable\":true}]}} 8、思考服务节点是临时节点还是持久节点？？ （1）当我关闭 8004节点后，zookeeper 依旧会持续发心跳，当有接收到反馈则还有序列号，没有则返回空[] （2）然后再次启动，则返回一个新的序列，由此说明这是一个临时节点 3、服务消费者1、建model新建cloud-consumerzk-order81 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumerzk-order81&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- SpringBoot整合Web组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- SpringBoot整合zookeeper客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;!--先排除自带的zookeeper--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.9版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改yml#81表示注册到zookeeper服务器的支付服务提供者端口号 server: port: 81 #服务别名----注册zookeeper到注册中心名称 spring: application: name: cloud-consumer-order cloud: zookeeper: connect-string: 106.52.23.202:2181 4、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class OrderZK81 { public static void main(String[] args) { SpringApplication.run (OrderZK81.class,args); } } 5、业务类1、配置Beanpackage com.kk.springcloud.config; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextBean { @Bean @LoadBalanced// 给予 RestTemplate 负载均衡的能力 public RestTemplate getRestTemplate() { return new RestTemplate ( ); } } 2、Controllerpackage com.kk.springcloud.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class OrderZKController81 { public static final String INVOKE_URL = \"http://cloud-provider-payment\"; @Autowired private RestTemplate restTemplate; @RequestMapping(value = \"/consumer/payment/zk\") public String paymentInfo() { String result = restTemplate.getForObject (INVOKE_URL + \"/payment/zk\", String.class); System.out.println (\"消费者调用支付服务(zookeeper)---&gt;result:\" + result); return result; } } 6、测试1、zookeeper[zk: localhost:2181(CONNECTED) 21] ls /services [cloud-provider-payment, cloud-consumer-order] 2、访问http://localhost:81/consumer/payment/zk","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"https://mykkto.github.io/tags/Zookeeper/"}],"author":"mykk"},{"title":"SpringCloud-Eureka","slug":"03javafenbushi/01springcloud/02_SpringCloud-Eureka","date":"2022-01-14T14:35:22.000Z","updated":"2022-01-17T15:11:52.902Z","comments":true,"path":"posts/402d692e.html","link":"","permalink":"https://mykkto.github.io/posts/402d692e.html","excerpt":"","text":"1、Eureka基础知识1、什么是服务治理 Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。 2、什么是服务注册1、概念 Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。 在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址)) 2、图解 3、Eureka两组件1、EurekaServer提供服务注册服务各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。 2、EurekaClient通过注册中心进行访问是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒） 2、单机Eureka构建步骤1、eurekaServer端服务注册中心1、建modelcloud-eureka-server7001 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-eureka-server7001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--eureka-server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--boot web actuator--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、改ymlserver: port: 7001 eureka: instance: hostname: localhost #eureka服务端的实例名称 client: #false表示不向注册中心注册自己。 register-with-eureka: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 fetch-registry: false service-url: #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。 defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ 4、主启动@SpringBootApplication @EnableEurekaServer public class EurekaMain7001 { public static void main(String[] args) { SpringApplication.run (EurekaMain7001.class,args); } } 5、测试1、访问：http://localhost:7001/ 2、返回结果页面 No application available 没有服务被发现 O(∩_∩)O因为没有注册服务进来当然不可能有服务被发现 2、EurekaClient端provider-80011、建model(不变)cloud-provider-payment8001 2、写pom（增加）以前老版本，别再使用 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; 现在新版本,当前使用 &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; 3、改yml(增加)eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: defaultZone: http://localhost:7001/eureka 4、主启动(添加)@EnableEurekaClient 5、测试（1）先要启动EurekaServer，再启动8001 （2）访问：http://localhost:7001/ 6、自我保护机制 3、EurekaClient端consumer-801、建model（不变）2、写pom（同上） &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--引入公共部分--&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; 3、改yml（同上）eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: defaultZone: http://localhost:7001/eureka 4、主启动（同上）@SpringBootApplication @EnableEurekaClient public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 5、测试（1）先要启动EurekaServer，再启动80 （2）访问：http://localhost/consumer/payment/get/1 3、集群Eureka构建步骤1、Eureka集群原理说明1、图解 2、问题：微服务RPC远程服务调用最核心的是什么3、解决方案：高可用，试想你的注册中心只有一个only one，会导致整个为服务环境不可用，所以 解决办法：搭建Eureka注册中心集群 ，实现负载均衡+故障容错 2、EurekaServer集群环境构建步骤1、建model新建cloud-eureka-server7002，参考7001 2、写pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-eureka-server7002&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--eureka-server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--boot web actuator--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--一般通用配置--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3、修配置由于本地主机只有一台，为了模拟两台（多台)，则将 多个ip（域名eureka7001.com,eureka7002.com) 指向本地(127.0.0.1) 1、找到对应的配置目录C:\\Windows\\System32\\drivers\\etc 2、写入配置文件 127.0.0.1 eureka7001.com127.0.0.1 eureka7002.com 4、改yml1、7001server: port: 7001 eureka: instance: hostname: eureka7001.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7002.com:7002/eureka/ 2、7002server: port: 7002 eureka: instance: hostname: eureka7002.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7001.com:7001/eureka/ 5、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @SpringBootApplication @EnableEurekaServer public class EurekaMain7002 { public static void main(String[] args) { SpringApplication.run (EurekaMain7002.class,args); } } 3、支付8001发布到Eureka集群1、修改yml主要修改一处：defaultZone: server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 4、订单80发布到Eureka集群1、修改yml主要修改一处：defaultZone: server: port: 80 spring: application: name: cloud-consumer-service eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 5、测试流程测试以上配置是否生效 1、启动集群先要启动EurekaServer，7001/7002服务 2、启动生产者再要启动服务提供者provider，8001 3、启动消费者再要启动消费者，80 4、测试http://localhost/consumer/payment/get/1 6、支付8001集群构建【8002】1、方式一：直接把整份8001 copy出一个新的，需改yml ，port即可【推荐】 server: port: 8002 2、方式二：（1）打开idea配置，取消勾选单一服务按钮 （2）修改yml server: port: 8002 （3）启动 7、负载均衡1、订单80调用调整在调用的时候不能写死成ip+端口，需要使用服务名：cloud-payment-service 2、@LoadBalanced注解使用@LoadBalanced注解赋予RestTemplate负载均衡的能力 修改配置信息添加注解【80端口】 8、测试负载均衡1、启动顺序说明（1）先要启动EurekaServer，7001/7002服务 （2）再要启动服务提供者provider，8001/8002服务 2、访问http://localhost/consumer/payment/get/1 3、结果（1）达到负载效果 （2）8001/8002端口交替出现 4、小结Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了 4、actuator微服务信息完善1、主机名称:服务名称修改1、当前问题含有主机名名称 2、修改8001instance: instance-id: payment8001 完整 yml server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 instance: instance-id: payment8001 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、效果其实就是取别名 2、访问信息有IP信息提示1、问题：没有IP提示 2、修改8001prefer-ip-address: true #访问路径可以显示IP地址 3、效果 5、服务发现Discovery1、概述对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息 2、修改8001的Controller1、增加@Resource private DiscoveryClient discoveryClient; @Value(\"${server.port}\") private String serverPort; /** * 查看注册服务的信息 * @return */ @GetMapping(value = \"/payment/discovery\") public Object discovery() { // 目前已经注册的微服务列表 List&lt;String&gt; services = discoveryClient.getServices ( ); for (String element : services) { log.info (element); } // 根据名称获取的微服务实例（就像类和对象的关系） List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); for (ServiceInstance element : instances) { log.info (element.getServiceId ( ) + \"\\t\" + element.getHost ( ) + \"\\t\" + element.getPort ( ) + \"\\t\" + element.getUri ( )); } return this.discoveryClient; } 2、全部package com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.*; import javax.annotation.Resource; import java.util.List; @RestController @Slf4j /* * @Description: * @Author: 阿K * @CreateDate: 2022/1/16 18:11 * @Param: * @Return: **/ public class PaymentController { @Resource private PaymentService paymentService; @Resource private DiscoveryClient discoveryClient; @Value(\"${server.port}\") private String serverPort; /** * 查看注册服务的信息 * * @return */ @GetMapping(value = \"/payment/discovery\") public Object discovery() { // 目前已经注册的微服务列表 List&lt;String&gt; services = discoveryClient.getServices ( ); for (String element : services) { log.info (element); } // 根据名称获取的微服务实例（就像类和对象的关系） List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances (\"CLOUD-PAYMENT-SERVICE\"); for (ServiceInstance element : instances) { log.info (element.getServiceId ( ) + \"\\t\" + element.getHost ( ) + \"\\t\" + element.getPort ( ) + \"\\t\" + element.getUri ( )); } return this.discoveryClient; } @PostMapping(value = \"/payment/create\") public CommonResult create(@RequestBody Payment payment) { int result = paymentService.create (payment); log.info (\"*****插入结果1：\" + result + \"111\"); if (result &gt; 0) { //成功 return new CommonResult (200, \"插入数据库成功\", result); } else { return new CommonResult (444, \"插入数据库失败\", null); } } @GetMapping(value = \"/payment/get/{id}\") public CommonResult getPaymentById(@PathVariable(\"id\") Long id) { Payment payment = paymentService.getPaymentById (id); log.info (\"*****查询结果：\" + payment); if (payment != null) { //说明有数据，能查询成功 return new CommonResult (200, \"查询成功8081\", payment); } else { return new CommonResult (444, \"没有对应记录，查询ID：\" + id, null); } } } 3、8001主启动1、增加@EnableDiscoveryClient 2、全部package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; @SpringBootApplication @EnableEurekaClient// 此注解后期若是不用 Eureka，将被下方注解所代替 @EnableDiscoveryClient// 服务注册发现 public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 4、测试1、启动顺序先要启动EurekaServer，再启动8001主启动类，需要稍等一会儿 2、访问http://localhost:8001/payment/discovery 6、Eureka自我保护1、故障现象保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。 如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE 2、导致原因此举属于CAP里面的AP分支 一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存 1、问题一：为什么会产生Eureka自我保护机制？ 为了防止EurekaClient可以正常运行，但是 与 EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除 2、问题二：什么是自我保护模式？ 默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。 3、怎么禁止自我保护1、注册中心7001（1）出厂默认，自我保护机制是开启的 eureka.server.enable-self-preservation=true （2）使用eureka.server.enable-self-preservation = false 可以禁用自我保护模式 server: port: 7001 eureka: instance: hostname: eureka7001.com #eureka服务端的实例名称 client: register-with-eureka: false #false表示不向注册中心注册自己。 fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://eureka7002.com:7002/eureka/ server: #关闭自我保护机制，保证不可用服务被及时踢除 enable-self-preservation: false eviction-interval-timer-in-ms: 2000 （3）效果 2、生产者80011、默认（1）单位为秒(默认是30秒) eureka.instance.lease-renewal-interval-in-seconds=30 （2）单位为秒(默认是90秒) eureka.instance.lease-expiration-duration-in-seconds=90 2、配置 server: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 eureka: client: #表示是否将自己注册进EurekaServer默认为true。 register-with-eureka: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡 fetchRegistry: true service-url: #defaultZone: http://localhost:7001/eureka defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 instance: instance-id: payment8001 prefer-ip-address: true #访问路径可以显示IP地址 #心跳检测与续约时间 #开发时设置小些，保证服务关闭后注册中心能即使剔除服务 #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒) lease-renewal-interval-in-seconds: 1 #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务 lease-expiration-duration-in-seconds: 2 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、测试（1）先启动7001，在启动8001 （2）再关闭8001，发现服务已经被删除了 7、Eureka停更``https://github.com/Netflix/eureka/wiki` 技术选型可以考虑 zookeeper、nacos(alibaba)","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Eureka","slug":"Eureka","permalink":"https://mykkto.github.io/tags/Eureka/"}],"author":"mykk"},{"title":"SpringCloud 项目构建 and 技术选型","slug":"03javafenbushi/01springcloud/01_SpringCloud-Build","date":"2022-01-12T15:42:15.000Z","updated":"2022-01-17T15:12:05.214Z","comments":true,"path":"posts/9df20094.html","link":"","permalink":"https://mykkto.github.io/posts/9df20094.html","excerpt":"","text":"1、版本 2、官网地址【Spring Cloud】1、英文https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/ 2、中文https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md 3、springboothttps://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/ 3、项目搭建-父工程构建 父工程坐标 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 统一管理jar包版本 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt; &lt;mysql.version&gt;5.1.47&lt;/mysql.version&gt; &lt;druid.version&gt;1.1.16&lt;/druid.version&gt; &lt;mybatis.spring.boot.version&gt;1.3.0&lt;/mybatis.spring.boot.version&gt; &lt;/properties&gt; &lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--spring boot 2.2.2--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring cloud Hoxton.SR1--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Hoxton.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;${mysql.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;${druid.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;${mybatis.spring.boot.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${junit.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;${lombok.version}&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;addResources&gt;true&lt;/addResources&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 4、项目搭建-Rest微服务工程构建1、坐标&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、ymlserver: port: 8001 spring: application: name: cloud-payment-service datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver url: jdbc:mysql://localhost:3306/spring_cloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: a1b2c3 mybatis: mapperLocations: classpath:mapper/*.xml type-aliases-package: com.kk.springclond.entities 3、主启动@SpringBootApplication public class PaymentMain8001 { public static void main(String[] args) { SpringApplication.run (PaymentMain8001.class, args); } } 4、业务类1、建表CREATE TABLE `payment` ( `id` bigint NOT NULL AUTO_INCREMENT , `serial` varchar(255) NULL , PRIMARY KEY (`id`) ) 2、实体（entity）（1）通用返回结果实体@Data @AllArgsConstructor @NoArgsConstructor public class CommonResult&lt;T&gt; { private Integer code; private String message; private T data; public CommonResult(Integer code, String message) { this(code,message,null); } } （2）Payment@Data @AllArgsConstructor @NoArgsConstructor public class Payment { private Long id; private String serial; } 3、dao层1、接口PaymentDao编写package com.kk.springcloud.dao; import com.kk.springcloud.entities.Payment; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; @Mapper public interface PaymentDao { public int create(Payment payment); //写 public Payment getPaymentById(@Param(\"id\") Long id); //读取 } 2、mybatis的映射文件PaymentMapper.xml（1）路径src\\main\\resources\\mapper\\PaymentMapper.xml （2）头文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.kk.springcloud.dao.PaymentDao\"&gt; &lt;insert id=\"create\" parameterType=\"com.kk.springcloud.entities.Payment\" useGeneratedKeys=\"true\" keyProperty=\"id\"&gt; insert into payment(serial) values(${serial}); &lt;/insert&gt; &lt;resultMap id=\"BaseResultMap\" type=\"com.kk.springcloud.entities.Payment\"&gt; &lt;id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"&gt;&lt;/id&gt; &lt;id column=\"serial\" property=\"serial\" jdbcType=\"VARCHAR\"&gt;&lt;/id&gt; &lt;/resultMap&gt; &lt;select id=\"getPaymentById\" parameterType=\"Long\" resultMap=\"BaseResultMap\"&gt; select * from payment where id=#{id} &lt;/select&gt; &lt;/mapper&gt; 4、service1、接口package com.kk.springcloud.service; import com.kk.springcloud.entities.Payment; import org.apache.ibatis.annotations.Param; public interface PaymentService { public int create(Payment payment); //写 public Payment getPaymentById(@Param(\"id\") Long id); //读取 } 2、实现类package com.kk.springcloud.service.impl; import com.kk.springcloud.dao.PaymentDao; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import org.springframework.stereotype.Service; import javax.annotation.Resource; @Service public class PaymentServiceImpl implements PaymentService { @Resource private PaymentDao paymentDao; public int create(Payment payment) { return paymentDao.create (payment); } public Payment getPaymentById(Long id) { return paymentDao.getPaymentById (id); } } 5、controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import com.kk.springcloud.service.PaymentService; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RestController; import javax.annotation.Resource; @RestController @Slf4j public class PaymentController { @Resource private PaymentService paymentService; @PostMapping(value = \"/payment/create\") public CommonResult create(Payment payment) { int result = paymentService.create (payment); log.info (\"*****插入结果：\" + result); if (result &gt; 0) { //成功 return new CommonResult (200, \"插入数据库成功\", result); } else { return new CommonResult (444, \"插入数据库失败\", null); } } @GetMapping(value = \"/payment/get/{id}\") public CommonResult getPaymentById(@PathVariable(\"id\") Long id) { Payment payment = paymentService.getPaymentById (id); log.info (\"*****查询结果：\" + payment); if (payment != null) { //说明有数据，能查询成功 return new CommonResult (200, \"查询成功\", payment); } else { return new CommonResult (444, \"没有对应记录，查询ID：\" + id, null); } } } 5、测试1、插入：使用post请求才能被插入，所以在url上无效，可以使用postmanhttp://localhost:8001/payment/create?serial=mykk02 2、查询：get请求，url，postman皆可http://localhost:8001/payment/get/1 5、热部署1、子工程 pom上面的依赖已经有加了，是这个 2、父工程 pom插件上面的依赖已经有加了，是这个 3、设置自动编译 4、开启自动更新1、打开设置面板ctrl + shift + alt + /同时按住，点击第一个Registry... 2、两个打勾 5、重启 IDEA6、项目搭建-Order订单微服务构建1、坐标&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-consumer-order80&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、ymlserver: port: 80 3、主启动package com.kk.springcloud; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class OrderMain80 { public static void main(String[] args) { SpringApplication.run (OrderMain80.class,args); } } 4、业务类1、创建entities 将cloud-provider-payment8001工程下的entities包下的两个实体类复制过来 2、RestTemplate1、官网： https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html 2、是什么 3、怎么用 3、配置类ApplicationContextConfig package com.kk.springcloud.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class ApplicationContextConfig { @Bean public RestTemplate getRestTemplate(){ return new RestTemplate(); } } 4、创建 controllerpackage com.kk.springcloud.controller; import com.kk.springcloud.entities.CommonResult; import com.kk.springcloud.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { public static final String PAYMENT_URL = \"http://localhost:8001\"; @Resource private RestTemplate restTemplate; @GetMapping(\"/consumer/payment/create\") public CommonResult&lt;Payment&gt; create(Payment payment) { return restTemplate.postForObject (PAYMENT_URL + \"/payment/create\", payment, CommonResult.class); //写操作 } @GetMapping(\"/consumer/payment/get/{id}\") public CommonResult&lt;Payment&gt; getPayment(@PathVariable(\"id\") Long id) { return restTemplate.getForObject (PAYMENT_URL + \"/payment/get/\" + id, CommonResult.class); } } 5、测试1、先启动cloud-provider-payment80012、再启动cloud-consumer-order803、测试消费者接口http://localhost/consumer/payment/get/1 注意点：被调用的生产者接口传参记得加注解 7、项目重构1、观察问题1、系统中有重复部分，重构 2、新建公共模块【cloud-api-commons】1、pom&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud2021to2022&lt;/artifactId&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all --&gt; &lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;5.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 2、实体将订单模块和支付模块公共实体放到这里 3、改造订单和支付1、删除各自的原先有过的entities文件夹2、各自分别引入公共模块&lt;!--引入公共部分--&gt; &lt;dependency&gt; &lt;groupId&gt;com.kk&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; 7、项目模块结构图","categories":[{"name":"分布式架构技术栈","slug":"分布式架构技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"搭建","slug":"搭建","permalink":"https://mykkto.github.io/tags/%E6%90%AD%E5%BB%BA/"}],"author":"mykk"},{"title":"南城故人","slug":"02informalessay/01duanzi/01_nanchengguren","date":"2022-01-10T17:33:22.000Z","updated":"2022-01-11T12:37:38.397Z","comments":true,"path":"posts/f2c0d8e3.html","link":"","permalink":"https://mykkto.github.io/posts/f2c0d8e3.html","excerpt":"","text":"摘自：南城故人 第8期内容： 18岁，你读了大学。20岁，你大二结束，开始悔恨自己前两年幼稚的行为于是开始努力22岁你大学毕业了，却发现找不到一份令自己满意的工作26岁，你看着身边的人都结了婚婚礼的份子钱逐年递增春节回家，父母从带你串亲戚变成了带你去见相亲对象见了十几个姑娘你每次都觉得和那个她比差了一点28岁那年，你遇到了一个和你遭遇差不多的姑娘你们有一搭没一搭的聊着她说：你还不错你喝了一口可乐说：你也是你还不确定喜不喜欢她双方家长就已经摆好了订婚宴结婚的前一周，你和朋友出去喝酒你说，不想结婚朋友说，你啊，就是想太多。谁不是这么过来的？ 29岁，你们终于结了婚婚礼办的不大不小，朋友来的不多不少攒了几年想要去实现理想的钱搭在了这一场百人的私人庙会上婚礼进行到中间司仪带着标准的商业化微笑对着台下的亲朋喊道要不要让他们亲一个！台下那些人跟着一起起哄不知道为什么你简简单单的亲了一口俩人恢复到了一开始的站位你小声说了一句：我爱你那个昨天还看不惯你倒腾模型的新娘愣了一下说：我也爱你你不确定她是不是对你说的就像你不确定是不是对她说的一样婚礼结束后，并没有你想象的浪漫你听着外屋的新娘一笔一笔的算着份子钱想着不过才两年，怎么就变成这样了想着想着，洞房夜就睡着了 30岁，她怀孕了辞掉了工作，在家养胎你在公司逐渐有了点地位手里管着十来个人独立负责一个项目结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享但你依然不敢放松每次加班电话那头都是抱怨与委屈但你不能争辩什么谁让她怀了你的孩子在这一刻不论是她的父母还是你的父母都无条件的站在这一边31岁，孩子落地了前前后后连孕检带住院费花了10万块钱不过无所谓你看着你的孩子，怎么看怎么喜欢高兴的仿佛这是你的新生32岁，这是人生最不愿意重复的一年平均睡眠3小时孩子每一个小时都要闹腾一次第二天拖着睡不醒的眼睛去上班老板说你上班不干活回家媳妇说你不干活你想了半天不明白，那谁干活呢？那辆开了3年的车成为了你真正的家你不在抱怨路上拥堵的交通你甚至开始希望再多堵一会回到家，你关了发动机在车上点了一根烟这是你每天最幸福的十分钟车前是功名利禄，车尾是柴米油盐 35岁 你因为身体越来越差加班越来越少晋升的速度也越来越缓慢那天下班，媳妇告诉你孩子要上幼儿园了双语的一个月3000你皱了皱眉头，那边就已经不耐烦了“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”你没说话，回屋给媳妇转了6000块钱这笔钱，你原本打算给自己过个生日，买个新电脑 38岁，孩子上了一年级老师说一年级最关键，打好基础很重要你笑着说，是是是，老师您多照顾新生接待的老师看着你不明事理的脸给你指了一条明路“课外辅导班，一个月2200”40岁的时候，孩子上了三年级老师说，三年级，最关键，承上启下很重要你笑着说：是是是，正打算再报个补习班 44岁，孩子上了初中有一天回到家，她对你说爸爸，我想学钢琴你没什么犹豫的你以为这些年，你已经习惯了但那句“爸爸现在买不起”你始终说不出口好在孩子比较懂事她说：爸爸没事，要不我先学陶笛也可以你看着这么懂事的孩子，却开心不起来 46岁，孩子上了一个不好不差的高中有一天你在开会，接到了老师的电话电话里说你的孩子在学校打架了叫你去一趟你唯唯诺诺的和那个比你还小5岁的领导请了个假到学校又被老师训了一通无非台词就是那一句你们做家长的就知道工作，能不能陪陪孩子你看着这个老师，有点可笑好像当时说：家长在外辛苦点多赚点钱让孩子多补补课的和他不是一个人 50岁，孩子上了大学很争气，是一个一本他学的专业你有点看不懂你只知道工作不一定好找而且学费还死贵你和他深夜想聊聊准备了半斤白酒，一碟花生米你说着那些曾经你最讨厌的话还是要为以后工作着想挑个热门的专业活着比热爱重要你们从交流变成了争吵你发现，你老了老到可能都打不过这个18岁的孩子你说不过他，只能说一句：我是你爸爸！孩子看着你，知道再怎么争辩都没用这场确立你最后威严的酒局不欢而散你听的不真切在孩子回自己屋的路上好像叨叨了一句“我不想活的像你一样”怎么就哭了呢？50岁的人了一定是酒太辣了，对不对一定是酒太辣了 55岁，孩子工作了，似乎有一点理解你了但你却反了过来，你说不要妥协56岁，孩子也结婚了你问他喜欢那个姑娘么他愣了愣说：喜欢吧60岁，辛苦了一辈子，想出去走走身边的那个人过了30年你依旧分不清到底喜不喜欢你们开始规划旅游路线这么多年了你们还是存在分歧，还是在争吵某个瞬间，你觉得这样可能也挺好一切都准备好了儿子说：爸妈，我工作太忙了可以帮我照顾一下孩子么你们退了机票，又回到了30年前 70岁，孩子的孩子也长大了，不用天天操心了你下定决心说：一定要去玩一趟可是手边的拐杖只能支持你走到楼下的花园75岁，你在医院的病床上身边聚满了人，你迷迷糊糊的看见医生摇了摇头周围那些人神情肃穆你明白了，你要死掉了你没有感到一丝害怕你突然问自己，我到底是什么时候死掉的呢？你想起来30岁的那场婚礼原来，那时候，你就死掉了吧 依照惯例死前的3秒，你的大脑要走马灯倒叙你这75个年头的一生画面一张一张的过1秒2秒两秒过去了你面无表情的看着这两秒内的回忆第3秒突然你笑了原来已经回到了15岁的那一年 你看见一个男孩他叼着一袋牛奶，背着书包从另一个女孩家的阳台下跑过那个男孩朝窗户里看了看那是15岁的你暗恋的那个女孩子你想不起来她长什么样子了最后一秒你努力的回忆着然后终于笑了出来3秒过去了身边的人突然间开始嚎啕大哭你可能听不清了你最后听到的嘈杂的声音是一群十五六的少年 起着哄说的答应他答应他答应他不爱你，不度生 热评：取一位账号已注销的评论：“有些人27岁就死了，直到72岁才被埋上”。能够想清楚过去，抓得住现在，放眼在未来吧，做一个能活到72岁的糊涂蛋。","categories":[{"name":"生活碎片化-段子","slug":"生活碎片化-段子","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96-%E6%AE%B5%E5%AD%90/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"段子","slug":"段子","permalink":"https://mykkto.github.io/tags/%E6%AE%B5%E5%AD%90/"},{"name":"感慨","slug":"感慨","permalink":"https://mykkto.github.io/tags/%E6%84%9F%E6%85%A8/"}],"author":"mykk"},{"title":"SpringCloud and Alibaba合集","slug":"03javafenbushi/01springcloud/00_SpringCloud","date":"2022-01-10T16:42:15.000Z","updated":"2022-01-23T07:21:52.159Z","comments":true,"path":"posts/58914314.html","link":"","permalink":"https://mykkto.github.io/posts/58914314.html","excerpt":"","text":"1、项目构建and技术选型2、Eureka服务注册与发现4、Consul服务注册与发现5、Ribbon负载均衡服务调用6、OpenFeign服务接口调用7、Hystrix断路器8、zuul路由网关9、Gateway新一代网关10、Seata处理分布式事务11、Sentinel实现熔断与限流12、Nacos服务注册和配置中心13、Sleuth分布式请求链路追踪14、Stream消息驱动15、Bus 消息总线16、config分布式配置中心食用技巧1、同时启动多个SpringbootIDEA SpringBoot多个项目 开启 RunDashboard， 在项目根目录 .idea 文件夹 中 workspace.xml文件中加入 &lt;component name=\"RunDashboard\"&gt; &lt;option name=\"configurationTypes\"&gt; &lt;set&gt; &lt;option value=\"SpringBootApplicationConfigurationType\" /&gt; &lt;/set&gt; &lt;/option&gt; &lt;/component&gt;","categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"springcloud-alibaba","slug":"springcloud-alibaba","permalink":"https://mykkto.github.io/tags/springcloud-alibaba/"},{"name":"合集","slug":"合集","permalink":"https://mykkto.github.io/tags/%E5%90%88%E9%9B%86/"}],"author":"mykk"},{"title":"KK语录（日记）","slug":"02informalessay/02_语录","date":"2022-01-10T15:12:19.000Z","updated":"2022-01-11T13:41:21.196Z","comments":true,"path":"posts/bd37926a.html","link":"","permalink":"https://mykkto.github.io/posts/bd37926a.html","excerpt":"","text":"","categories":[{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"}],"tags":[{"name":"语录","slug":"语录","permalink":"https://mykkto.github.io/tags/%E8%AF%AD%E5%BD%95/"},{"name":"日记","slug":"日记","permalink":"https://mykkto.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"话痨","slug":"话痨","permalink":"https://mykkto.github.io/tags/%E8%AF%9D%E7%97%A8/"}],"author":"mykk"},{"title":"美文","slug":"02informalessay/01_美文","date":"2022-01-10T14:33:12.000Z","updated":"2022-01-11T14:21:18.841Z","comments":true,"path":"posts/c3e91221.html","link":"","permalink":"https://mykkto.github.io/posts/c3e91221.html","excerpt":"","text":"","categories":[{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"}],"tags":[{"name":"美文","slug":"美文","permalink":"https://mykkto.github.io/tags/%E7%BE%8E%E6%96%87/"}],"author":"mykk"},{"title":"生活碎片文章集合汇总","slug":"01menu/03_随笔（语录）","date":"2022-01-10T13:22:55.000Z","updated":"2022-01-10T13:55:50.327Z","comments":true,"path":"posts/1565718c.html","link":"","permalink":"https://mykkto.github.io/posts/1565718c.html","excerpt":"","text":"1、美文2、语录3、电影4、美图5、心得","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"总纲","slug":"总纲","permalink":"https://mykkto.github.io/tags/%E6%80%BB%E7%BA%B2/"},{"name":"分享","slug":"分享","permalink":"https://mykkto.github.io/tags/%E5%88%86%E4%BA%AB/"}],"author":"mykk"},{"title":"(新)技术文章集合汇总","slug":"01menu/02_新菜单集合","date":"2022-01-09T14:55:55.000Z","updated":"2022-01-10T16:16:03.843Z","comments":true,"path":"posts/f747eac7.html","link":"","permalink":"https://mykkto.github.io/posts/f747eac7.html","excerpt":"","text":"一、技术（较为系统编排）1、java数据结构与算法 ★11 https://www.jianshu.com/p/929ca9e209e8 2、java设计模式https://www.jianshu.com/p/63df8cd03619 8、java单体架构技术栈https://www.jianshu.com/p/0a4a1ced23c7 9、java分布式架构技术栈https://www.jianshu.com/p/00aa796bb5b8 10、框架之外技术栈汇总https://www.jianshu.com/p/d0167f082cbf N1、内力篇汇总0-java内力——总纲 - 简书 (jianshu.com) 11、Liunxhttps://www.jianshu.com/p/409970d8d0f1 12、前端大杂烩https://www.jianshu.com/p/82fa0c99e019 13、各项目整合分解大杂烩https://www.jianshu.com/p/d30b07569dc3 14、面试题汇总：技术=面试题+项目总结 ★https://www.jianshu.com/p/5e3b81aef034 15、一些不错的网站：https://www.jianshu.com/p/53bf0d4a930d 16、随性记录一小点随性记录一小点 2021-07-15至未来 7、工具代码备份UT-工具代码 JDK各版本演变 4、netty 5、JVM【重量级】 n、大数据n、前端n、golangn、以太坊n、区块链n、scala 2、工作，博客，公众号等所学技术汇总3、心得（工作）4、语录（感悟）","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}],"author":"mykk"},{"title":"(旧)简书文章过往两年纲要","slug":"01menu/01_旧菜单合集","date":"2022-01-09T11:19:19.000Z","updated":"2022-01-10T16:12:51.476Z","comments":true,"path":"posts/c3e91221.html","link":"","permalink":"https://mykkto.github.io/posts/c3e91221.html","excerpt":"","text":"1、技术（较为系统编排）1、java数据结构与算法 ★https://www.jianshu.com/p/929ca9e209e8 2、java设计模式https://www.jianshu.com/p/63df8cd03619 8、java单体架构技术栈https://www.jianshu.com/p/0a4a1ced23c7 9、java分布式架构技术栈https://www.jianshu.com/p/00aa796bb5b8 10、框架之外技术栈汇总https://www.jianshu.com/p/d0167f082cbf N1、内力篇汇总0-java内力——总纲 - 简书 (jianshu.com) 11、Liunxhttps://www.jianshu.com/p/409970d8d0f1 12、前端大杂烩https://www.jianshu.com/p/82fa0c99e019 13、各项目整合分解大杂烩https://www.jianshu.com/p/d30b07569dc3 14、面试题汇总：技术=面试题+项目总结 ★https://www.jianshu.com/p/5e3b81aef034 15、一些不错的网站：https://www.jianshu.com/p/53bf0d4a930d 16、随性记录一小点随性记录一小点 2021-07-15至未来 7、工具代码备份UT-工具代码 JDK各版本演变 4、netty 5、JVM【重量级】 n、大数据n、前端n、golangn、以太坊n、区块链n、scala 2、工作，博客，公众号等所学技术汇总3、心得（工作）4、语录（感悟）","categories":[{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}],"author":"mykk"}],"categories":[{"name":"分布式技术栈","slug":"分布式技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88/"},{"name":"mysql","slug":"mysql","permalink":"https://mykkto.github.io/categories/mysql/"},{"name":"博客","slug":"博客","permalink":"https://mykkto.github.io/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"分布式架构技术栈","slug":"分布式架构技术栈","permalink":"https://mykkto.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/"},{"name":"生活碎片化-段子","slug":"生活碎片化-段子","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96-%E6%AE%B5%E5%AD%90/"},{"name":"生活碎片化","slug":"生活碎片化","permalink":"https://mykkto.github.io/categories/%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87%E5%8C%96/"},{"name":"文章菜单合集","slug":"文章菜单合集","permalink":"https://mykkto.github.io/categories/%E6%96%87%E7%AB%A0%E8%8F%9C%E5%8D%95%E5%90%88%E9%9B%86/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://mykkto.github.io/tags/springcloud/"},{"name":"netflix","slug":"netflix","permalink":"https://mykkto.github.io/tags/netflix/"},{"name":"远程调用服务","slug":"远程调用服务","permalink":"https://mykkto.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"name":"openfeign","slug":"openfeign","permalink":"https://mykkto.github.io/tags/openfeign/"},{"name":"小姿势","slug":"小姿势","permalink":"https://mykkto.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"linux","slug":"linux","permalink":"https://mykkto.github.io/tags/linux/"},{"name":"断路器","slug":"断路器","permalink":"https://mykkto.github.io/tags/%E6%96%AD%E8%B7%AF%E5%99%A8/"},{"name":"Hystrix","slug":"Hystrix","permalink":"https://mykkto.github.io/tags/Hystrix/"},{"name":"路由网关","slug":"路由网关","permalink":"https://mykkto.github.io/tags/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"},{"name":"zuul","slug":"zuul","permalink":"https://mykkto.github.io/tags/zuul/"},{"name":"负载均衡","slug":"负载均衡","permalink":"https://mykkto.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"},{"name":"ribbon","slug":"ribbon","permalink":"https://mykkto.github.io/tags/ribbon/"},{"name":"hexo","slug":"hexo","permalink":"https://mykkto.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://mykkto.github.io/tags/github/"},{"name":"seo","slug":"seo","permalink":"https://mykkto.github.io/tags/seo/"},{"name":"百度","slug":"百度","permalink":"https://mykkto.github.io/tags/%E7%99%BE%E5%BA%A6/"},{"name":"谷歌","slug":"谷歌","permalink":"https://mykkto.github.io/tags/%E8%B0%B7%E6%AD%8C/"},{"name":"服务注册与发现","slug":"服务注册与发现","permalink":"https://mykkto.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"},{"name":"Consul","slug":"Consul","permalink":"https://mykkto.github.io/tags/Consul/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"https://mykkto.github.io/tags/Zookeeper/"},{"name":"Eureka","slug":"Eureka","permalink":"https://mykkto.github.io/tags/Eureka/"},{"name":"搭建","slug":"搭建","permalink":"https://mykkto.github.io/tags/%E6%90%AD%E5%BB%BA/"},{"name":"生活","slug":"生活","permalink":"https://mykkto.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"段子","slug":"段子","permalink":"https://mykkto.github.io/tags/%E6%AE%B5%E5%AD%90/"},{"name":"感慨","slug":"感慨","permalink":"https://mykkto.github.io/tags/%E6%84%9F%E6%85%A8/"},{"name":"springcloud-alibaba","slug":"springcloud-alibaba","permalink":"https://mykkto.github.io/tags/springcloud-alibaba/"},{"name":"合集","slug":"合集","permalink":"https://mykkto.github.io/tags/%E5%90%88%E9%9B%86/"},{"name":"语录","slug":"语录","permalink":"https://mykkto.github.io/tags/%E8%AF%AD%E5%BD%95/"},{"name":"日记","slug":"日记","permalink":"https://mykkto.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"话痨","slug":"话痨","permalink":"https://mykkto.github.io/tags/%E8%AF%9D%E7%97%A8/"},{"name":"美文","slug":"美文","permalink":"https://mykkto.github.io/tags/%E7%BE%8E%E6%96%87/"},{"name":"总纲","slug":"总纲","permalink":"https://mykkto.github.io/tags/%E6%80%BB%E7%BA%B2/"},{"name":"分享","slug":"分享","permalink":"https://mykkto.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"简书","slug":"简书","permalink":"https://mykkto.github.io/tags/%E7%AE%80%E4%B9%A6/"},{"name":"技术总纲","slug":"技术总纲","permalink":"https://mykkto.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BA%B2/"}]}